<?xml version="1.0" encoding="gb2312"?>
<defineSqls>

<!--公用define，用于在影响库存后，验证数据库中是否存在一个以上相同的序列号-->
<define name="validateSameSeq">
	<sql type="condition">
		<condition><select>select 'isUsed' as isUseSeq from tblGoodsAttribute where propName='Seq' and isUsed=1</select></condition>
		<exec condition="'@SqlReturn:isUseSeq'!='null'">
			<sql type="procedure">{call proc_isExistSameSeq(seqCode,seqVal)}</sql>
		</exec>
		<exec condition="'@ProcReturn:seqVal'!=''">
			<error>seq.validate.instore,@ProcReturn:seqVal</error>
		</exec>
	</sql>
</define>
<!--添加模块-->
<define name="tblModules_add">
	<sql type="condition">
		<exec condition="true">
			<sql>update tblModelOperations set moduleOpId= id where f_ref=@ValueofDB:tblModules_id  </sql>	 
		</exec>
		<exec condition=" '@ValueofDB:parentClass' !='' ">
			<sql type="define">modules_updateParent</sql>
		</exec>
	</sql>
</define>
<!--修改模块-->
<define name="tblModules_update">
    <sql type="condition">
	<condition>	
		<select>select isCatalog,tblName,modelName,linkAddress,isUsed from tblModules where id=@ValueofDB:tblModules_id</select>
	</condition>
	<exec condition="true">
	 	 <sql>update tblModelOperations set moduleOpId= id where f_ref=@ValueofDB:tblModules_id and (moduleOpId is null or moduleOpId=0)</sql>	 
	</exec>
	<exec condition="@SqlReturn:isCatalog==0&amp;&amp;'@SqlReturn:tblName'.length==0&amp;&amp;'@SqlReturn:linkAddress'.length!=0">
         <sql>update tblModules set tblName=@SqlReturn:modelName where id=@ValueofDB:tblModules_id </sql>
	</exec>
	<!--CRM启用定期检查单就往 枚举表里面插入记录-->
	 <exec condition="@SqlReturn:isCatalog==0&amp;&amp;'@SqlReturn:isUsed'=='1'&amp;&amp;'@SqlReturn:linkAddress'=='/UserFunctionQueryAction.do?parentTableName=CRMClientInfo&amp;tableName=CRMPeriodicExamine'">
	 	 <sql>delete from tbllanguage where id=(select languageid from tblDBEnumerationItem where enumid=(select id from tblDBEnumeration where enumName='GenerateReviewBill') and enumValue='CRMPeriodicExamine')</sql>
	 	<sql>delete from tblDBEnumerationItem where enumid=(select id from tblDBEnumeration where enumName='GenerateReviewBill') and enumValue='CRMPeriodicExamine'</sql>

		 <sql>insert tblDBEnumerationItem(id,enumValue,enumId,SCompanyID,classCode,RowON,workFlowNodeName,printCount,languageId,checkPersons) values('dba43be8_1012210918230150629','CRMPeriodicExamine','dba43be8_1012210918230150625','','','','','0','dba43be8_1012210918230150630','')
		</sql>
         <sql>insert into tblLanguage(id,zh_TW,zh_CN,en) values('dba43be8_1012210918230150630','定期???','定期检测单','Periodic Examine')</sql>	 
	</exec>
	<!--CRM不启用定期检查单就往 枚举表里面插入记录-->
	 <exec condition="@SqlReturn:isCatalog==0&amp;&amp;'@SqlReturn:isUsed'=='2'&amp;&amp;'@SqlReturn:linkAddress'=='/UserFunctionQueryAction.do?parentTableName=CRMClientInfo&amp;tableName=CRMPeriodicExamine'">
	 	 <sql>delete from tbllanguage where id=(select languageid from tblDBEnumerationItem where enumid=(select id from tblDBEnumeration where enumName='GenerateReviewBill') and enumValue='CRMPeriodicExamine')</sql>
	 	<sql>delete from tblDBEnumerationItem where enumid=(select id from tblDBEnumeration where enumName='GenerateReviewBill') and enumValue='CRMPeriodicExamine'</sql>	 
	</exec>
	<exec condition=" '@ValueofDB:parentClass' !='' ">
		<sql type="define">modules_updateParent</sql>
	</exec>
	</sql>	
</define>
<define name="modules_updateParent">	
	<sql type="condition">
		<exec condition="true">
			<sql type="procedure">{call proc_getNewClassCode(tblModules,@ValueofDB:parentClass,retCode,NewClassCode)}</sql>
		</exec>
	
		<!--存在父类-->
		<exec condition="'@ValueofDB:isCatalog'=='1'">
			<!--更新新的classCode-->
			<sql>update tblModules set classCode=@ProcReturn:NewClassCode+substring(classCode,len(@ValueofDB:classCode)+1,len(classCode)-len(@ValueofDB:classCode)) from tblModules where classCode like @ValueofDB:classCode+'_____%'</sql>
		</exec>
		<!--更新classCode-->
		<exec condition="true">
			<!--更新新的classCode-->
			<sql>update tblModules set classCode=@ProcReturn:NewClassCode where id=@ValueofDB:id</sql>
			<!--更新原来的往来父类标识-->
			<sql>update tblModules set iscatalog=0 where (select count(classCode) from tblModules where classCode like left(@ValueofDB:classCode,len(@ValueofDB:classCode)-5)+'_____%')=0 and len(@ValueofDB:classCode)&gt;5 and classCode=left(@ValueofDB:classCode,len(@ValueofDB:classCode)-5)</sql>
			<!--更新新目录父类标识-->
			<sql>update tblModules set iscatalog=1 where len(@ProcReturn:NewClassCode)&gt;5 and classCode=left(@ProcReturn:NewClassCode,len(@ProcReturn:NewClassCode)-5)</sql>
			<sql>update tblModules set parentClass='' where id=@ValueofDB:tblModules_id</sql>
		</exec>
	</sql>
</define>	
<!--商品导入-->
<define name="GoodsExport">
 <sql type="condition">
    <exec condition="@MEM:sunCompany==true"><!--启用分支机构，库存总表中设置数据，分仓库存表中设置期初数据。每个分支机构中已经月结或当前的期间需要在分仓库存中新增一条数据为0的记录-->
		<sql type="procedure">
		{call proc_OCgoodsIniInsert_GoodsExport(@retCode,@retVal)}
		</sql>
	</exec>	
	<exec condition="@MEM:sunCompany!=true"><!--不启用分支机构-->
        <sql type="procedure">
		{call proc_StockTotal_GoodsExport(@retCode,@retVal)}
		</sql>
		<!-- 根据仓库新增多条库存分仓信息-->
		<sql type="procedure">
		{call proc_iterateInsertStocks_GoodsExport(@retCode,@retVal)}
		</sql>
		<sql type="procedure"><!-- 根据仓库新增数据添加到虚拟库存表-->
		{call proc_iterateInsertVirtualStock_GoodsExport(@retCode,@retVal)}
		</sql>
		
		 <sql type="procedure">
        {call proc_iterateExeProcStocks_GoodsExport(@retCode,@retVal)}
		</sql>
	</exec>	
	<exec condition="'@Sess:NowPeriod' !='-1'"><!--开帐后增加商品-->
		<sql type="procedure"><!-- 根据仓库新增多条库存明细信息-->
		{call proc_iterateInsertStockDet_GoodsExport(@retCode,@retVal)}
		</sql>	
	</exec>
	<exec condition="true">
		<sql type="procedure">
		{call proc_GoodsSeqSet_GoodsExport(@retCode,@retVal)}
		</sql>	
	</exec>
   </sql>
</define>



<!--批量修改客户所有者-->
<define name="BachChangeOwner">
	<sql type="condition">
	<condition>	
			<select>select LEFT(@ValueofDB:popReturnVal,28 ) as empId</select>
    	</condition>
		<exec condition="true">	
		
			<sql>
			begin try
			declare @rulesId varchar(100),@retCode int,@retVal varchar(100)
			set @retCode=0
			declare @isCatalog int,@classCode varchar(100),@compId varchar(100),@empId varchar(100),@depCode varchar(100)
			set @compId=@ValueofDB:id
			set @empId=@SqlReturn:empId
			
			--调用存储过程执行成功才继续进行操作，否则回滚
			if @retCode=0
				begin		
					select @isCatalog = isCatalog,@classCode = classCode from tblCompany where id = @compId
					select @depCode = departmentcode from tblemployee where id = @empId
					print @isCatalog
					if (@isCatalog = 1)<!--如果有下级-->
						begin
							declare cur_agtRules cursor Scroll for select id from tblCompany where classCode like @classCode+'%'
							open cur_agtRules
							fetch next from cur_agtRules into @rulesId
							while @@FETCH_STATUS=0 and @retCode=0
								begin
									update tblCompany set EmployeeID = @empId,departmentcode = @depCode where id = @rulesId
									fetch next from cur_agtRules into @rulesId
								end
							CLOSE cur_agtRules;
							deallocate cur_agtRules;
						end
				    else
						begin
							update tblCompany set EmployeeID = @empId,departmentcode = @depCode where id = @compId
						end
				end
				print @retCode	
				end try
				begin catch 
					set @retCode=-1119
					set @retVal=ERROR_MESSAGE()
					print 'error'
					print @retVal 
				end catch	
			</sql>		
		</exec>
	</sql>
</define>


<!--通讯录导入-->
<define name="OACmctExports">

</define>

<!--职员导入-->
<define name="EmpExports">

</define>

<!-- 添加或修改 确保邮件默认帐户只有一个 -->
<define name="add_update_before">
	<sql type="condition">
		<condition>	
			<select>select count(*) num from MailinfoSetting where createBy=@Sess:UserId and defaultUser=1 and id!=@ValueofDB:MailinfoSetting_id</select>
    	</condition>
    	<exec condition="@ValueofDB:defaultUser==1&amp;&amp;@SqlReturn:num&gt;0">
        	<error>mail.exist.defaultuser.error</error>
		</exec>
	</sql>
</define>	
<!--往来单位导入-->
<define name="CompanyExport">
 <sql type="condition">
   <exec condition="@MEM:sunCompany==false||(@MEM:sunCompany==true&amp;&amp;'@SqlReturn:isSunCmpShare'!=1)">
		<sql type="procedure">
		{call proc_CompanyTotal_CompanyExport(@retCode,@retVal)}
		</sql>
			
		<sql type="procedure">
{call proc_iterateExeProc_proc_insert_CompanyExport(@retCode,@retVal)}
		</sql>	
		
		</exec>	
        <exec condition="'@Sess:NowPeriod' !='-1'"><!--开帐后增加往来单位-->

			<sql type="procedure">
	{call proc_CompanyIni_CompanyExport(@retCode,@retVal)}
			</sql>	
		</exec>

		<exec condition="@MEM:sunCompany==true &amp;&amp; '@SqlReturn:isSunCmpShare'==1">
			
			<sql type="procedure"><!--根据商品新增多条库存分仓信息-->
	 {call proc_iterateInsert_CompanyTotal_CompanyExport(@retCode,@retVal)}
			</sql>
		</exec>
  </sql>
</define>


<!-- 数据搬移
	  选中的商品的下级-->
<define name="Goods_dataMove">
		<sql type="condition">
		<condition>	
		<!--查询原来的商品代码-->
	<select>select isCatalog,classCode,CostMethod as OldCostMethod from tblGoods where id=@ValueofDB:tblGoods_id</select>
	<!--查询转到目录的商品的存货核算方法-->
	<select>select CostMethod as NewCostMethod from tblGoods where classCode=@ValueofDB:toClassCode</select>
	<!--父类不能搬迁到自己的子类-->
	<select>select GoodsFullName from tblGoods where charindex(@SqlReturn:classCode,@ValueofDB:toClassCode)=1 and id=@ValueofDB:tblGoods_id and len(@SqlReturn:classCode)&lt;=len(@ValueofDB:toClassCode)</select>

		<!--商品{0}搬移的级别相同-->
	<select>select GoodsFullName as GoodsName from tblGoods where id=@ValueofDB:tblGoods_id and 
@SqlReturn:classCode like @ValueofDB:toClassCode+'_____'</select>
			<!--商品未存在下级且有数据时不能增加下级-->
	<select>select tblGoods.GoodsFullName as existGoods from tblGoods where 
(tblGoods.classCode in (select GoodsCode from tblBeginStockDet UNION select GoodsCode from tblBuyInStockDet UNION select GoodsCode from tblStockDet UNION select GoodsCode from tblBuyOutStockDet UNION select GoodsCode from tblSalesOutStockDet UNION select GoodsCode from tblSalesReturnStockDet UNION select GoodsCode from tblSalesOrderDet UNION select GoodsCode from tblCheckDet UNION select GoodsCode from tblAdjustPriceDet UNION select GoodsCode from tblBuyOrderDet UNION select GoodsCode from tblAllotDet UNION select GoodsCode from tblAllotChangeDet UNION select GoodsCode from tblOtherOutDet UNION select GoodsCode from tblOtherInDet UNION select GoodsCode from tblAdjustPriceDet)) and tblGoods.SCompanyID=@Sess:SCompanyID and tblGoods.classCode=@ValueofDB:toClassCode</select>
		</condition>
	<exec condition="true">
		<sql type="procedure">{call proc_getNewClassCode(tblGoods,@ValueofDB:toClassCode,retCode,NewClassCode)}</sql>
	</exec>
	<!--父类不能搬迁到自己的子类-->
	<exec condition="'@SqlReturn:GoodsFullName'!='null'">
		<error>classCode.exist.chird.error,@SqlReturn:GoodsFullName</error>
	</exec>
		<!--商品{0}搬移的级别相同-->
	<exec condition="'@SqlReturn:GoodsName'!='null'">
		<error>classCode.exist.equal.error,@SqlReturn:GoodsName</error>
	</exec>
		<!--商品未存在下级且有数据时不能搬移至下级-->
		<exec condition="'@SqlReturn:existGoods'!='null'">
			<error>tblGoods.existoperation.error,@SqlReturn:existGoods</error>
		</exec>
	<!-- 搬移商品核算方法必须与父级相同 (Bug #13867 要求恢复提示)-->
  		<exec condition="'@SqlReturn:OldCostMethod' != '@SqlReturn:NewCostMethod'&amp;&amp;'@ValueofDB:toClassCode'!='null'&amp;&amp;'@ValueofDB:toClassCode'!=''">
		<error>tblGoods.error.CostMethod</error>
		</exec>
	<!--存在父类-->
	<exec condition="'@SqlReturn:isCatalog'=='1'">
	<!--存放原来的classCode-->
	<sql>update tblGoods set OldclassCode=classCode where classCode like @SqlReturn:classCode+'_____%'</sql>
	<!--更新新的classCode-->
	<sql>update tblGoods set classCode=@ProcReturn:NewClassCode+substring(classCode,len(@SqlReturn:classCode)+1,len(classCode)-len(@SqlReturn:classCode)) from tblGoods where classCode like @SqlReturn:classCode+'_____%'</sql>
</exec>
   <!--更新classCode-->
      <exec condition="true">
	  <!--存放原来的classCode-->
	<sql>update tblGoods set OldclassCode=classCode where id=@ValueofDB:tblGoods_id</sql>
	  <!--更新新的classCode-->
    <sql>update tblGoods set classCode=@ProcReturn:NewClassCode where id=@ValueofDB:tblGoods_id</sql>
	 <!--更新原来的商品父类标识-->
	<sql>update tblGoods set iscatalog=0 where (select count(classCode) from tblGoods where classCode like left(@SqlReturn:classCode,len(@SqlReturn:classCode)-5)+'_____%')=0 and len(@SqlReturn:classCode)&gt;5 and classCode=left(@SqlReturn:classCode,len(@SqlReturn:classCode)-5)</sql>
	
		 <!--更新新目录父类标识-->
	<sql>update tblGoods set iscatalog=1 where len(@ProcReturn:NewClassCode)&gt;5 and classCode=left(@ProcReturn:NewClassCode,len(@ProcReturn:NewClassCode)-5)</sql>
	
	  <!--更新单据表里面为新的classCode-->
		<sql type="procedure">
		{call proc_updateGoodsclassCode(@ProcReturn:NewClassCode,retCode,retVal)}
		</sql>
	</exec>
</sql>
</define>


<!--===========================================================仓库管理=========================================================-->
<define name="Stock_add">
	<sql type="condition"><!--当前添加的仓库有父级仓库时， 判断父级仓库是否有数据-->
		<condition><select>select classCode,StockNumber as Number,StockFullName as FullName from tblStock where @Sess:BillOper='add' and classCode=subString(@ValueofDB:tblStock_classCode,1,len(@ValueofDB:tblStock_classCode)-5) and (select count(0) from tblStock where classCode like subString(@ValueofDB:tblStock_classCode,1,len(@ValueofDB:tblStock_classCode)-5)+'_____')=1</select></condition>
		<exec condition="'@SqlReturn:classCode'!='null'&amp;&amp;'@SqlReturn:classCode'.length&gt;0">
			<sql type="procedure">{call proc_BaseInfoUse(StockCode,@SqlReturn:classCode,@Sess:Local,errorCode,errorVal)}</sql>
		</exec>		
		<exec condition="'@ProcReturn:errorCode'=='-2222'"> 					
			<error>BaseInfo.add.error,@SqlReturn:Number,@SqlReturn:FullName,@ProcReturn:errorVal</error>
		</exec>
	</sql>
</define>	 

<define name="Stock_Update">
	<sql type="condition"><!--不勾选“允许修改基础信息”时判断仓库是否使用了-->
		<condition><select>select classCode,StockNumber as Number,StockFullName as FullName from tblStock where id=@ValueofDB:tblStock_id</select></condition>
		<exec condition="'@MEM:ChangeUsed'=='false'&amp;&amp;('@SqlReturn:Number' != '@ValueofDB:tblStock_StockNumber' || '@SqlReturn:FullName' != '@ValueofDB:tblStock_StockFullName')">
			<sql type="procedure">{call proc_BaseInfoUse(StockCode,@SqlReturn:classCode,@Sess:Local,errorCode,errorVal)}</sql>
		</exec>	
		<exec condition="'@ProcReturn:errorCode'=='-2222'">
			<error>tblStock.Update.error,@ProcReturn:errorVal</error>
		</exec>	
	</sql>
</define>	
	<define name="Stock_Update_after">
		<sql type="condition">
			<exec condition=" '@Sess:BillOper'=='update'"><!-- 改名后，自动修改核算科目的名称 -->
			<sql type="procedure">{call UpdateAccName(StockCode,@ValueofDB:classCode,errorCode,errorVal)}</sql>
		</exec>
		</sql>
	</define>
<!-- ===========反审核时判断，是否已经被使用============-->
<define name="Stock_del">
	<sql type="condition">
		<exec condition="'@MEM:tblStock_IsStatart' == '0'">
			<sql type="define">tblStock_Delete_One</sql>
		</exec>
	</sql>
</define>	

<define name="tblStock_Delete_One">
	<sql type="define">tblStock_BaseInfoUse_Validate</sql>
</define>

<define name="tblStock_BaseInfoUse_Validate">
	<sql type="condition">
		<condition><select>select classCode,StockNumber as Number,StockFullName as FullName from tblStock where id=@ValueofDB:tblStock_id</select></condition>
		<exec condition="true">
			<sql type="procedure">{call proc_BaseInfoUse(StockCode,@SqlReturn:classCode,@Sess:Local,errorCode,errorVal)}</sql>
		</exec>		
		<exec condition="'@ProcReturn:errorCode'=='-2222'"> 					
			<error>BaseInfo.delete.error,@SqlReturn:Number,@SqlReturn:FullName,@ProcReturn:errorVal</error>
		</exec>
	</sql>
</define>

<!--===============仓库启用===============-->
<define name="OpenValue_BaseInfo_tblStock">
	<sql type="condition">
		<condition><select>select classCode from tblStock where tblStock.id=@ValueofDB:tblStock_id</select></condition>
		<exec condition="true"><!--启用当前商品、其父级及所有子级-->
			<sql>update tblStock set statusId=0 where classCode like @SqlReturn:classCode+'%' or classCode=subString(@SqlReturn:classCode,1,len(classCode))</sql>
		</exec>
	</sql>
</define>
<!--=============仓库停用==================-->
<define name="StopValue_BaseInfo_tblStock">
	<sql type="condition">
		<condition><select>select classCode from tblStock where id=@ValueofDB:tblStock_id</select></condition>
		<exec condition="true"><!--停用当前商品及所有子级-->
			<sql>update tblStock set statusId=-1 where classCode like @SqlReturn:classCode+'%'</sql>
		</exec>
	</sql>
</define>
<!--=================================================以上代码：仓库管理==========================================================-->	
	<define name="tblProject_Update">
		<sql type="condition">
			<exec condition=" '@Sess:BillOper'=='update'"><!-- 改名后，自动修改核算科目的名称 -->
			<sql type="procedure">{call UpdateAccName(ProjectCode,@ValueofDB:id,errorCode,errorVal)}</sql>
		</exec>
		</sql>
	</define>

 <!--=================================================以下代码：商品批量改价==========================================================-->	
 <define name="tblGoodsUpdatePrice_add">
	<sql type="condition"><!--不能重复录入价格类别-->
		<condition>
			<select>select tbllanguage.zh_CN as PriceKind from tblGoodsUpdatePricedet left join tblDBEnumerationItem on tblDBEnumerationItem.enumValue=tblGoodsUpdatePricedet.PriceKind and enumId=(select id from tblDBEnumeration where enumName='PriceKind') left join tblLanguage on tblLanguage.id=tblDBEnumerationItem.languageId where f_ref=@ValueofDB:tblGoodsUpdatePrice_id group by  PriceKind,tbllanguage.zh_CN  having  COUNT(PriceKind)&gt;=2</select>
		</condition>
		<exec condition="'@SqlReturn:PriceKind' != 'null'">
			<error>tblGoodsUpdatePrice.PriceKind.error,@SqlReturn:PriceKind</error>
		</exec>	
	</sql>
	<sql type="condition"><!--请输入正确的价格格式-->
		<exec condition="true">
			<sql type="procedure">{call proc_PriceMarginregular(@ValueofDB:tblGoodsUpdatePrice_id,errorCode,errorVal)}</sql>
		</exec>
		<exec condition="'@ProcReturn:errorCode'=='-2222'"> 					
			<error>tblGoodsUpdatePrice.PriceMargin.error,@ProcReturn:errorVal</error>
		</exec>	
	</sql>
	<sql type="condition"><!--弹出是否弹出框-->
		<exec condition="true">
			<confirm yesDefine="tblGoodsUpdatePrice_add_onex" noDefine="">tblGoodsUpdatePrice.additemconfirm</confirm>
		</exec> 
	</sql>
</define>
<!--不启用审核流批量修改商品表价格-->
<define name="tblGoodsUpdatePrice_add_onex">
	<exec condition="'@MEM:tblGoodsUpdatePrice_IsStatart' == '0'">
	<sql type="procedure">{call proc_updategoodsprice(@ValueofDB:tblGoodsUpdatePrice_id,@ValueofDB:tblGoodsUpdatePrice_GoodsCode,errorCode,errorVal)}</sql>
	</exec>
</define>
<!--启用审核流批量修改商品表价格-->
<define name="tblGoodsUpdatePrice_add_one">
	<sql type="procedure">{call proc_updategoodsprice(@ValueofDB:tblGoodsUpdatePrice_id,@ValueofDB:tblGoodsUpdatePrice_GoodsCode,errorCode,errorVal)}</sql>
</define>
<!--=======================================================商品管理=============================================================-->
<define name="tblGoods_Add">
	<!--================新增时的逻辑判断======================-->
	<sql type="condition">
		<condition>
			<select>select substring(@ValueofDB:tblGoods_classCode,1,len(@ValueofDB:tblGoods_classCode)-5) as PaterCode</select>
			<select>select count(0) PaterC from tblGoods where @Sess:BillOper='add' and classCode =@SqlReturn:PaterCode and (select count(0) from tblGoods where classCode like @SqlReturn:PaterCode+'_____')=1</select>
		</condition>
		<!--如果插入的商品存在父级且父级不存在其他子级商品，则先判断父级是否已经被使用-->
		<exec condition="@SqlReturn:PaterC&gt;0">
			<sql type="procedure">{call proc_GoodsUseInfo(@SqlReturn:PaterCode,@Sess:Local,errorCode,errorVal)}</sql>
		</exec>	
		<exec condition="@SqlReturn:PaterC&gt;0 &amp;&amp; '@ProcReturn:errorCode'=='-2222'"> 					
			<error>tblGoods.classCode.error,@ProcReturn:errorVal</error>
		</exec>
		<!--在库期限不能为负数-->
		<exec condition="@ValueofDB:tblGoods_StockTerm&lt;0">
			<error>tblGoods.StockTerm.error</error>
		</exec>
		<!--启用保质期，保质期为负数，不允许保存-->
		<exec condition="@ValueofDB:tblGoods_Validity&lt;0">
			<error>tblGoods.Validity.error</error>
		</exec>
	</sql>
	<sql type="condition"><!--存货核算科目与父级不同给出错误提示-->	
		<condition><select>select count(0) as CostMethodC from tblGoods where classCode=substring(@ValueofDB:tblGoods_classCode,1,len(@ValueofDB:tblGoods_classCode)-5) and CostMethod!=@ValueofDB:tblGoods_CostMethod</select></condition>
		<exec condition="@SqlReturn:CostMethodC&gt;0">
			<error>tblGoods.error.CostMethod</error>
		</exec> 
	</sql>
	<sql type="condition"><!--基本单位 辅助单位 换算数值必须为正整数-->
		<condition><select>SELECT SecUnit FROM tblGoodsUnit WHERE f_ref = @ValueofDB:tblGoods_id AND (UnitD&lt;=0 OR SecUnitD&lt;=0)</select></condition>
		<exec condition="'@SqlReturn:SecUnit'!='null'&amp;&amp;'@SqlReturn:SecUnit'.length!=0">
			<error>tblGoodsUnit.dataIsNagative.error,@SqlReturn:SecUnit</error>
		</exec>
	</sql>
	<sql type="condition"><!-- 只存在辅助单位但没选择基本单位时提示 -->	
		<condition><select>select count(0) as SecUnitC from tblGoodsUnit where f_ref=@ValueofDB:tblGoods_id</select></condition>
		<exec condition="@SqlReturn:SecUnitC&gt;0&amp;&amp;'@ValueofDB:tblGoods_BaseUnit'.length == 0">
			<error>tblGoods.BaseUnit.error</error>
    </exec>
	</sql>
	<sql type="condition"><!--商品基本单位不能与辅助单位相同-->
		<condition><select>select tblGoods.BaseUnit AS BaseUnit,tblGoodsUnit.SecUnit AS SecUnit from  tblGoods left join  tblGoodsUnit ON tblGoods.id=tblGoodsUnit.f_ref where f_ref=@ValueofDB:tblGoods_id</select></condition>
		<exec condition="'@SqlReturn:BaseUnit'=='@SqlReturn:SecUnit'&amp;&amp;'@SqlReturn:SecUnit'!='null'">
			<error>Goods.Unit.error</error>
		</exec>
	</sql>
	<sql type="condition"><!-- 默认辅助单位只能选择一个 -->	
		<condition><select>select count(0) as DefAssitC from tblGoodsUnit where f_ref=@ValueofDB:tblGoods_id and DefaultAssit='1'</select></condition>
		<exec condition="@SqlReturn:DefAssitC&gt;1">
			<error>tblGoods.add.GoodsUnit.DefaultAssit</error>
		</exec> 
	</sql>
	<sql type="condition">
		<condition>
			<select>SELECT a.Hue,'颜色' AS typeHue FROM (SELECT a.HueGroup,b.Hue,c.groupName,d.languageId FROM tblGoods a LEFT JOIN tblGoodsStockLimit b ON a.id =b.f_ref LEFT JOIN tblGoodsOfProp c ON a.HueGroup =c.groupName LEFT JOIN tblGoodsOfPropDet d ON c.id = d.f_ref AND b.Hue = d.languageId WHERE a.id =@ValueofDB:tblGoods_id) a WHERE (a.HueGroup ='' AND ISNULL(a.Hue,'')!='') OR (a.HueGroup !='' AND a.Hue !='' AND a.groupName !='' AND a.languageId IS NULL)</select>
			<select>SELECT a.yearNO,'尺码' AS typeYearNo FROM (SELECT a.YearNoGroup,b.yearNO,c.groupName,d.languageId FROM tblGoods a LEFT JOIN tblGoodsStockLimit b ON a.id =b.f_ref LEFT JOIN tblGoodsOfProp c ON a.YearNoGroup =c.groupName LEFT JOIN tblGoodsOfPropDet d ON c.id = d.f_ref AND b.yearNO = d.languageId WHERE a.id =@ValueofDB:tblGoods_id) a WHERE (a.YearNoGroup ='' AND ISNULL(a.yearNO,'')!='') OR (a.YearNoGroup !='' AND a.yearNO !='' AND a.groupName !='' AND a.languageId IS NULL)</select>
		</condition>
		<exec condition="'@SqlReturn:Hue'!='null'">
			<error>HueyearNO.isRelatGroup.error,@SqlReturn:typeHue,@SqlReturn:Hue,@SqlReturn:typeHue</error>
		</exec>
		<exec condition="'@SqlReturn:yearNO'!='null'">
			<error>HueyearNO.isRelatGroup.error,@SqlReturn:typeYearNo,@SqlReturn:yearNO,@SqlReturn:typeYearNo</error>
		</exec>
	</sql>
	<!--==============根据特定条件更新商品表中的信息=================-->
	<sql type="condition">
		<condition>
			<select>select count(0) as SecUnitNum from tblGoodsUnit where f_ref=@ValueofDB:tblGoods_id</select>
			<select>select count(DefaultAssit) as DefAssitC from tblGoodsUnit where f_ref=@ValueofDB:tblGoods_id and DefaultAssit='1'</select>
		</condition>
		<!--如果系统配置“启用条形码自动生成”启用，则设置条形码字段-->
		<exec condition="'@MEM:BarCodeAuto'=='true'">
			<sql>update tblGoods set barcode=dbo.ean8(BarCode) where id=@ValueofDB:tblGoods_id</sql>
		</exec>
		<!--如果不存在默认辅助单位，则设置第一个辅助单位为默认辅助单位-->
		<exec condition="@SqlReturn:SecUnitNum != 0 &amp;&amp; @SqlReturn:DefAssitC == 0">
			<sql>update tblGoodsUnit set DefaultAssit='1' where f_ref=@ValueofDB:tblGoods_id and id=(select min(a.id) from tblGoodsUnit a where a.f_ref=@ValueofDB:tblGoods_id)</sql>
		</exec>
		<!--设置商品表中原classCode为当前classCode-->	
		<exec condition="'@Sess:BillOper'=='add'">
			<sql>update tblGoods set OldclassCode=classCode where id=@ValueofDB:tblGoods_id</sql>
		</exec>
		<!--修改当前商品子级商品的序列号是否启用=当前商品状态-->
		<exec condition="'@Sess:BillOper'=='update'">
			<sql>update tblGoods set seqIsUsed=@ValueofDB:tblGoods_seqIsUsed where classCode like @ValueofDB:tblGoods_classCode+'%'</sql>	
		</exec>
		<!--设置辅助单位表中商品，基本单位-->
		<exec condition="true">
			<sql>update tblGoodsUnit set GoodsCode=@ValueofDB:tblGoods_classCode where f_ref=@ValueofDB:tblGoods_id</sql>			
		</exec>
	</sql>	

	<sql type="condition"><!--库存上下限明细表输入值判断-->
		<condition>
			<select>SELECT COUNT(StockCode) AS RepeatStockCount FROM tblGoodsStockLimit tgsl WHERE tgsl.f_ref=@ValueofDB:tblGoods_id GROUP BY StockCode,BatchNo,Inch,Hue,yearNO,ProDate,Availably  having count(0) &gt; 1</select>
		  <select>SELECT COUNT(StockCode) AS InvalidStockCount FROM tblGoodsStockLimit tgsl WHERE tgsl.f_ref=@ValueofDB:tblGoods_id AND tgsl.LowerLimit &gt; tgsl.UpperLimit AND tgsl.UpperLimit &lt;&gt; 0 AND tgsl.LowerLimit &lt;&gt; 0</select>
		</condition>
		<!-- 仓库不能重复 -->
		<exec condition="'@SqlReturn:RepeatStockCount'!='0' &amp;&amp; '@SqlReturn:RepeatStockCount'!='null'">	
			<error>tblGoodsStockLimit.add.repeatstockcode</error>
		</exec>
		<!-- 库存下限不能大于库存上限 -->
		<exec condition="'@SqlReturn:InvalidStockCount'!='0' &amp;&amp; '@SqlReturn:InvalidStockCount'!='null'"> 		
			<error>tblGoodsStockLimit.add.invalidstockcode</error>
		</exec>
	</sql>
</define>
<define name="tblGoods_Update">
	<sql type="condition"><!--不勾选“允许修改基础信息”时判断商品是否使用了-->
		<condition><select>select classCode,GoodsNumber as Number,GoodsFullName as FullName from tblGoods where id=@ValueofDB:tblGoods_id</select></condition>
		<exec condition="'@MEM:ChangeUsed'=='false'&amp;&amp;('@SqlReturn:Number' != '@ValueofDB:tblGoods_GoodsNumber' || '@SqlReturn:FullName' != '@ValueofDB:tblGoods_GoodsFullName')">
			<sql type="procedure">{call proc_BaseInfoUse(GoodsCode,@SqlReturn:classCode,@Sess:Local,errorCode,errorVal)}</sql>
		</exec>	
		<exec condition="'@ProcReturn:errorCode'=='-2222'">
			<error>tblGoods.UpdateName.error,@ProcReturn:errorVal</error>
		</exec>
	</sql>
	<sql type="condition"><!--如果修改前后的状态不同，则查询库存明细中是否有此商品记录-->
		<condition>
			<select>select classCode,GoodsNumber as Number,GoodsFullName as FullName,seqIsUsed as seqIs from tblGoods where id=@ValueofDB:tblGoods_id</select>
			<select>select COUNT(0) as seqCount from tblStockDet where @SqlReturn:seqIs!=@ValueofDB:tblGoods_seqIsUsed and GoodsCode=@SqlReturn:classCode </select>
		</condition>
		<exec condition="@SqlReturn:seqCount&gt;0">
			<error>此商品已经影响库存，不允许修改序列号状态</error>
		</exec>	
	</sql>
</define>
<!--=============== 删除商品===============-->
<define name="tblGoods_Delete">
	<sql type="condition">
		<exec condition="'@Sess:BillOper'=='update'">
			<sql type="define">tblGoods_Update</sql>
		</exec>
		<exec condition="'@Sess:BillOper'=='delete'">
			<sql type="define">tblGoods_Delete_Validator</sql>
		</exec>
		<exec condition="'@MEM:tblGoods_IsStatart' == '0'">
			<sql type="define">tblGoods_Delete_One</sql>
		</exec>
	</sql>	
</define>
<define name="tblGoods_Delete_Validator">
	<sql type="condition">
		<condition><select>select classCode as GoodsCode,GoodsNumber,GoodsFullName,substring(classCode,1,len(classCode)-5) as PaterCode from tblGoods where id=@ValueofDB:tblGoods_id</select></condition>
		<!--如果有表单引用，则不能删除该商品-->
		<exec condition="('@Sess:BillOper'=='delete'||'@Sess:BillOper'=='returnAuditing')">
			<sql type="procedure">{call proc_BaseInfoUse(GoodsCode,@SqlReturn:GoodsCode,@Sess:Local,errorCode,errorVal)}</sql>
		</exec>		
		<exec condition="('@Sess:BillOper'=='delete'||'@Sess:BillOper'=='returnAuditing')&amp;&amp;'@ProcReturn:errorCode'=='-2222'"> 					
			<error>tblGoods.delete.error,@SqlReturn:GoodsNumber,@SqlReturn:GoodsFullName,@ProcReturn:errorVal</error>
		</exec>
	</sql>
</define>
<define name="tblGoods_Delete_One">
	<sql type="condition">
		<!--修改电商商品的导入状态-->
		<exec condition="true">
			<sql>update tblEBGoods set InSign='1' where id=@ValueofDB:tblGoods_id</sql> 
		</exec>
	</sql>
</define>
<!--============商品启用===========-->
<define name="OpenValue_BaseInfo_Goods">
	<sql type="condition">
		<condition><select>select classCode from tblGoods where id=@ValueofDB:tblGoods_id</select></condition>
		<exec condition="true"><!--启用当前商品、其父级及所有子级-->
			<sql>update tblGoods set statusId=0 where classCode like @SqlReturn:classCode+'%' or classCode=subString(@SqlReturn:classCode,1,len(classCode))</sql>
		</exec>
	</sql>
</define>
<!--===========商品停用===========-->
<define name="StopValue_BaseInfo_Goods">
	<sql type="condition">
		<condition><select>select classCode from tblGoods where id=@ValueofDB:tblGoods_id</select></condition>
		<exec condition="true"><!--停用当前商品及所有子级-->
			<sql>update tblGoods set statusId=-1 where classCode like @SqlReturn:classCode+'%'</sql>
		</exec>
	</sql>
</define>
<!--=================================================以上代码：商品管理=========================================================-->

<!--============模块启用===========-->
<define name="OpenValue_BaseInfo_Modules">
    <sql type="condition">
        <condition><select>select classCode from tblModules where id=@ValueofDB:tblModules_id</select></condition>
        <exec condition="true"><!--启用当前模块、其父级及所有子级-->
            <sql>update tblModules set IsUsed=1 where classCode like @SqlReturn:classCode+'%' or classCode=subString(@SqlReturn:classCode,1,len(classCode))</sql>
        </exec>
    </sql>
</define>
<!--===========模块停用===========-->
<define name="StopValue_BaseInfo_Modules">
    <sql type="condition">
        <condition><select>select classCode from tblModules where id=@ValueofDB:tblModules_id</select></condition>
        <exec condition="true"><!--停用当前模块及所有子级-->
            <sql>update tblModules set IsUsed=2 where classCode like @SqlReturn:classCode+'%'</sql>
        </exec>
    </sql>
</define>

<define name="modules_move">	
	<sql type="condition">
		<condition>	
			<select>select isCatalog,classCode from tblModules where id=@ValueofDB:id</select>
		</condition>
		<exec condition="true">
			<sql type="procedure">{call proc_getNewClassCode(tblModules,@ValueofDB:toClassCode,retCode,NewClassCode)}</sql>
		</exec>
	
		<!--存在父类-->
		<exec condition="'@SqlReturn:isCatalog'=='1'">
			<!--更新新的classCode-->
			<sql>update tblModules set classCode=@ProcReturn:NewClassCode+substring(classCode,len(@SqlReturn:classCode)+1,len(classCode)-len(@SqlReturn:classCode)) from tblModules where classCode like @SqlReturn:classCode+'_____%'</sql>
		</exec>
		<!--更新classCode-->
		<exec condition="true">
			<!--更新新的classCode-->
			<sql>update tblModules set classCode=@ProcReturn:NewClassCode where id=@ValueofDB:id</sql>
			<!--更新原来的往来父类标识-->
			<sql>update tblModules set iscatalog=0 where (select count(classCode) from tblModules where classCode like left(@SqlReturn:classCode,len(@SqlReturn:classCode)-5)+'_____%')=0 and len(@SqlReturn:classCode)&gt;5 and classCode=left(@SqlReturn:classCode,len(@SqlReturn:classCode)-5)</sql>
			<!--更新新目录父类标识-->
			<sql>update tblModules set iscatalog=1 where len(@ProcReturn:NewClassCode)&gt;5 and classCode=left(@ProcReturn:NewClassCode,len(@ProcReturn:NewClassCode)-5)</sql>
		</exec>
	</sql>
</define>	

<!--=========================================================往来单位=========================================================-->
<!--=====往来单位数据搬移=========-->
<define name="Company_dataMove_TypeValidate">	
	<sql type="condition"><!--由客户搬移到供应商，或者由供应商搬移到客户，或者是由客户供应商搬移到客户，供应商，要判断是否存在往来余额-->
		<condition>
			<select>select classCode,ClientFlag as OldClientFlag,ComFullName,ComNumber from tblCompany where id=@ValueofDB:tblCompany_id</select>
			<select>select ClientFlag from tblCompany where classCode=@ValueofDB:toClassCode</select>
			<!--搬移到不同类型的往来单位时是否存在余额-->
			<select>select count(0) as dataCount from tblCompanyTotal where companyCode=@SqlReturn:classCode and id in(select  id from tblCompanyTotal where companyCode=@SqlReturn:classCode) and (ReceiveTotalRemain!=0 or PayTotalRemain!=0 or PrePayTotalRemain!=0 or PreReceiveTotalRemain!=0) and ((@SqlReturn:OldClientFlag=1 and @SqlReturn:ClientFlag=2) or (@SqlReturn:OldClientFlag=2 and @SqlReturn:ClientFlag=1) or (@SqlReturn:OldClientFlag=3 and (@SqlReturn:ClientFlag=2 or @SqlReturn:ClientFlag=1)))</select>
			<!--查询搬移到另一个类型中是否有相同的名称-->
			<select>select count(0) sameName from tblCompany where @MEM:ComNameUnique='true' and @SqlReturn:OldClientFlag!=@SqlReturn:ClientFlag and ClientFlag=@SqlReturn:ClientFlag and ComFullName=@SqlReturn:ComFullName</select>
			<!--查询搬移到另一个类型中是否有相同的编号-->
			<select>select count(0) sameNumber from tblCompany where @MEM:ComNoUnique='true' and @SqlReturn:OldClientFlag!=@SqlReturn:ClientFlag and ClientFlag=@SqlReturn:ClientFlag and ComNumber=@SqlReturn:ComNumber</select>
		</condition>
		<!--有往来余额，且搬移的类型与原来不同时，给出错误提示-->
		<exec condition="@SqlReturn:dataCount&gt;0">
			<error>tblCompany.dataMove.existsData.errorD,@SqlReturn:ComFullName</error>
		</exec>
		<!--名称必须唯一时，且搬移的类别中也有相同的名称，给出错误提示-->
		<exec condition="@SqlReturn:sameName&gt;0">
			<error>tblCompany.dataMove.sameName</error>
		</exec>
		<!--编号必须唯一时，且搬移的类别中也有相同的编号，给出错误提示-->
		<exec condition="@SqlReturn:sameNumber&gt;0">
			<error>tblCompany.dataMove.sameNumber</error>
		</exec>
	</sql>
</define>

<define name="Company_dataMove">	
	<sql type="condition"><!--搬移的目标是某个类别，则要判断不同类别是否符合要求-->
		<exec condition="'@ValueofDB:toClassCode'.length&gt;0">
			<sql type="define">Company_dataMove_TypeValidate</sql>
		</exec>
	</sql>

		<sql type="condition">
		<condition>	
	<select>select isCatalog,classCode from tblCompany where id=@ValueofDB:tblGoods_id</select>
		<!--父类不能搬迁到自己的子类-->
	<select>select ComFullName from tblCompany where charindex(@SqlReturn:classCode,@ValueofDB:toClassCode)=1 and id=@ValueofDB:tblCompany_id and len(@SqlReturn:classCode)&lt;=len(@ValueofDB:toClassCode)</select>
	<!--往来{0}搬移的级别相同-->
	<select>select ComFullName as ComName from tblCompany where id=@ValueofDB:tblCompany_id and 
@SqlReturn:classCode like @ValueofDB:toClassCode+'_____'</select>

<select>select ClientFlag,moduleType from tblCompany where classCode=@ValueofDB:toClassCode</select>
<!--有数据时不能搬移至下级-->
<select>select ComFullName as existCompany from tblCompany where (classCode in (select CompanyCode from tblBuyInStock) or classCode in (select CompanyCode from tblBuyOutStock) or classCode in (select CompanyCode from tblSalesOutStock) or classCode in (select CompanyCode from tblSalesReturnStock) or classCode in (select CompanyCode from tblSalesOrder) or classCode in (select CompanyCode from tblSaleReceive) or classCode in (select CompanyCode from tblBuyOrder) or classCode in (select CompanyCode from tblOtherOut) or classCode in (select CompanyCode from tblOtherIn)  or classCode in (select CompanyCode from tblTransferSale1) or classCode in (select InCompanyCode from tblTransferSale1) or classCode in (select CompanyCode from tblTransferSale2) or classCode in (select InCompanyCode from tblTransferSale2) or classCode in (select CompanyCode from tblTransferSale3)  or classCode in (select InCompanyCode from tblTransferSale3) or classCode in (select CompanyCode from tblTransferSale4)  or classCode in (select InCompanyCode from tblTransferSale4) or classCode in (select distinct CompanyCode from tblCompanyIni where ReceiveBegin !=0 or ReceiveTotalDebit !=0 or ReceiveTotalLend !=0 or PreReceiveBegin != 0 or PreReceiveTotalDebit !=0 or PreReceiveTotalLend !=0 or PayBegin !=0 or PayTotalDebit != 0 or PayTotalLend !=0 or PrePayBegin !=0 or PrePayTotalDebit !=0 or PrePayTotalLend != 0)) and tblCompany.classCode=@ValueofDB:toClassCode</select>
	
	</condition>
	<exec condition="true">
		<sql type="procedure">{call proc_getNewClassCode(tblCompany,@ValueofDB:toClassCode,retCode,NewClassCode)}</sql>
	</exec>
	<!--父类不能搬迁到自己的子类-->
	<exec condition="'@SqlReturn:ComFullName'!='null'">
		<error>classCode.exist.chird.error,@SqlReturn:ComFullName</error>
	</exec>
		<!--{0}搬移的级别相同-->
	<exec condition="'@SqlReturn:ComName'!='null'">
		<error>classCode.exist.equal.error,@SqlReturn:ComName</error>
	</exec>
		<!--有数据时不能搬移至下级-->
		<exec condition="'@SqlReturn:existCompany'!='null'">
			<error>tblGoods.existoperation.error,@SqlReturn:existCompany</error>
		</exec>
	<!--存在父类-->
	<exec condition="'@SqlReturn:isCatalog'=='1'">
	<!--存放原来的classCode-->
	<sql>update tblCompany set OldclassCode=classCode where classCode like @SqlReturn:classCode+'_____%'</sql>
			<!--更新新的classCode-->
	<sql>update tblCompany set classCode=@ProcReturn:NewClassCode+substring(classCode,len(@SqlReturn:classCode)+1,len(classCode)-len(@SqlReturn:classCode)) from tblCompany where classCode like @SqlReturn:classCode+'_____%'</sql>
  </exec>

   <!--更新classCode-->
      <exec condition="true">
	  <!--存放原来的classCode-->
	<sql>update tblCompany set OldclassCode=classCode where id=@ValueofDB:tblCompany_id</sql>
	  <!--更新新的classCode-->
    <sql>update tblCompany set classCode=@ProcReturn:NewClassCode where id=@ValueofDB:tblCompany_id</sql>
	 <!--更新原来的往来父类标识-->
	<sql>update tblCompany set iscatalog=0 where (select count(classCode) from tblCompany where classCode like left(@SqlReturn:classCode,len(@SqlReturn:classCode)-5)+'_____%')=0 and len(@SqlReturn:classCode)&gt;5 and classCode=left(@SqlReturn:classCode,len(@SqlReturn:classCode)-5)</sql>

		 <!--更新新目录父类标识-->
	<sql>update tblCompany set iscatalog=1 where len(@ProcReturn:NewClassCode)&gt;5 and classCode=left(@ProcReturn:NewClassCode,len(@ProcReturn:NewClassCode)-5)</sql>
	
	  <!--更新单据表里面为新的classCode-->
		<sql type="procedure">
		{call proc_updateCompanyclassCode(@ProcReturn:NewClassCode,retCode,retVal)}
		</sql>
	</exec>
	
	   <exec condition="'@ValueofDB:toClassCode'.length==5">
    <sql>update tblCompany set ClientFlag=@SqlReturn:ClientFlag,moduleType=@SqlReturn:moduleType where classCode like @ProcReturn:NewClassCode+'%'</sql>
   </exec>
   	   <exec condition="'@ValueofDB:toClassCode'.length&gt;5">
    <sql>update tblCompany set ClientFlag=(select ClientFlag from tblCompany where classCode=left(@ProcReturn:NewClassCode,5)),moduleType=(select moduleType from tblCompany where classCode=left(@ProcReturn:NewClassCode,5)) where classCode like @ProcReturn:NewClassCode+'%'</sql>
   </exec>
</sql>
</define>	 

<!--如果要在Company_Add中添加新的操作，需考虑往来单位导入时是否也同样需要，如果需要请同时更新往来导入的define(CompanyExport)--> 		
<define name="Company_Add">
	<sql type="condition"><!--如果当前往来存在父级，判断父级是否存在数据-->
		<condition><select>select classCode oldclassCode,ComNumber as Number,ComFullName as FullName from tblCompany where @Sess:BillOper='add' and classCode=subString(@ValueofDB:tblCompany_classCode,1,len(@ValueofDB:tblCompany_classCode)-5) and (select count(0) from tblCompany where classCode like subString(@ValueofDB:tblCompany_classCode,1,len(@ValueofDB:tblCompany_classCode)-5)+'_____')=1</select></condition>
		<exec condition="'@SqlReturn:oldclassCode'!='null'&amp;&amp;'@SqlReturn:oldclassCode'.length&gt;0">
			<sql type="procedure">{call proc_BaseInfoUse(CompanyCode,@SqlReturn:oldclassCode,@Sess:Local,errorCode,errorVal)}</sql>
		</exec>		
		<exec condition="'@ProcReturn:errorCode'=='-2222'"> 					
			<error>BaseInfo.add.error,@SqlReturn:Number,@SqlReturn:FullName,@ProcReturn:errorVal</error>
		</exec>
	</sql>
	
	<sql type="condition">
		<condition>
			<select>select ComNumber as SComNumber,isNull(ClientFlag,0) as SClientFlagA from tblCompany where ComNumber=@ValueofDB:tblCompany_ComNumber and ClientFlag=1 and id!=@ValueofDB:tblCompany_id</select>
			<select>select ComFullName as SComFullName,isNull(ClientFlag,0) as SClientFlagB from tblCompany where ComFullName=@ValueofDB:tblCompany_ComFullName and ClientFlag=1 and id!=@ValueofDB:tblCompany_id</select>
			<select>select ComNumber as CComNumber,isNull(ClientFlag,0) as CClientFlagA from tblCompany where ComNumber=@ValueofDB:tblCompany_ComNumber and ClientFlag=2 and id!=@ValueofDB:tblCompany_id</select>
			<select>select ComFullName as CComFullName,isNull(ClientFlag,0) as CClientFlagB from tblCompany where ComFullName=@ValueofDB:tblCompany_ComFullName and ClientFlag=2 and id!=@ValueofDB:tblCompany_id</select>
			<select>select ComNumber as SCComNumber,isNull(ClientFlag,0) as SCClientFlagA from tblCompany where ComNumber=@ValueofDB:tblCompany_ComNumber and ClientFlag=3 and id!=@ValueofDB:tblCompany_id</select>
			<select>select ComFullName as SCComFullName,isNull(ClientFlag,0) as SCClientFlagB from tblCompany where ComFullName=@ValueofDB:tblCompany_ComFullName and ClientFlag=3 and id!=@ValueofDB:tblCompany_id</select>
		</condition>
		<!--供应商编号不能重复-->
		<exec condition="'@SqlReturn:SComNumber'!='null'&amp;&amp;@SqlReturn:SClientFlagA==@ValueofDB:tblCompany_ClientFlag &amp;&amp; '@MEM:ComNoUnique'=='true'">
		<error>tblCompany.add.error.ComNumber</error>
		</exec>
		<!--供应商名称不能重复-->
		<exec condition="'@SqlReturn:SComFullName'!='null'&amp;&amp;@SqlReturn:SClientFlagB==@ValueofDB:tblCompany_ClientFlag &amp;&amp; '@MEM:ComNameUnique'=='true'">
		<error>tblCompany.add.error.ComFullName</error>
		</exec>
		<!--客户编号不能重复-->
		<exec condition="'@SqlReturn:CComNumber'!='null'&amp;&amp;@SqlReturn:CClientFlagA==@ValueofDB:tblCompany_ClientFlag &amp;&amp; '@MEM:ComNoUnique'=='true'">
			<error>tblCompany.add.error.ComNumber</error>
		</exec>
		<!--客户名称不能重复-->
		<exec condition="'@SqlReturn:CComFullName'!='null'&amp;&amp;@SqlReturn:CClientFlagB==@ValueofDB:tblCompany_ClientFlag &amp;&amp; '@MEM:ComNameUnique'=='true'">
		<error>tblCompany.add.error.ComFullName</error>
		</exec>
		<!--客户供应商编号不能重复-->
		<exec condition="'@SqlReturn:SCComNumber'!='null'&amp;&amp;@SqlReturn:SCClientFlagA==@ValueofDB:tblCompany_ClientFlag &amp;&amp; '@MEM:ComNoUnique'=='true'">
			<error>tblCompany.add.error.ComNumber</error>
		</exec>
		<!--客户供应商名称不能重复-->
		<exec condition="'@SqlReturn:SCComFullName'!='null'&amp;&amp;@SqlReturn:SCClientFlagB==@ValueofDB:tblCompany_ClientFlag &amp;&amp; '@MEM:ComNameUnique'=='true'">
			<error>tblCompany.add.error.ComFullName</error>
		</exec>
		<!--信用额度不能小于0-->
		<exec condition="@ValueofDB:tblCompany_Credit &lt;0">
			<error>tblcompany.credit.error</error>
		</exec>
	</sql>
	<sql type="condition">
		<condition><select>select SettleCys from tblCompany where id=@ValueofDB:tblCompany_id and len(SettleCys)&gt;0</select></condition>
		<!--往来单位带有结算账期时，更新该客户的销售出库单中没有收款日期的单据-->	
		<exec condition="'@Sess:BillOper'=='update'&amp;&amp;'@SqlReturn:SettleCys' !=null">
			<sql>update tblSalesOutStock set AcceptDate=convert(varchar(10),DATEADD(DAY,tblCompany.SettleCys,BillDate),121) from tblCompany where tblSalesOutStock.CompanyCode=tblCompany.classCode and tblCompany.id=@ValueofDB:tblCompany_id and len(AcceptDate)=0</sql>
		</exec>
		<!--修改往来单位的原classCode-->
		<sql>update tblCompany set OldclassCode=classCode,moduleType=ClientFlag where id=@ValueofDB:tblCompany_id</sql>
		<exec condition=" '@Sess:BillOper'=='update'"><!-- 改名后，自动修改核算科目的名称 -->
			<sql type="procedure">{call UpdateAccName(CompanyCode,@ValueofDB:classCode,errorCode,errorVal)}</sql>
		</exec>
	</sql>
</define>
<!--=======修改前判断编号和名称是否修改=====-->
<define name="Company_Update">
	<sql type="condition"><!--不勾选“允许修改基础信息”，但编号或名称被修改报错-->
		<condition><select>select classCode oldClassCode,ComNumber oldComNumber,ComFullName oldComFullName from tblCompany where id=@ValueofDB:tblCompany_id</select></condition>
		<exec condition="  '@MEM:ChangeUsed'=='false'&amp;&amp;('@SqlReturn:oldComFullName' != '@ValueofDB:tblCompany_ComFullName' || '@SqlReturn:oldComNumber' != '@ValueofDB:tblCompany_ComNumber')">
			<sql type="procedure">{call proc_BaseInfoUse(CompanyCode,@SqlReturn:oldClassCode,@Sess:Local,errorCode,errorVal)}</sql>
		</exec> 
		<exec condition="'@ProcReturn:errorCode'=='-2222'">
			<error>tblCompany.Update.error,@ProcReturn:errorVal</error>
		</exec> 
	</sql>
</define>

<define name="Company_Del">
	<sql type="condition">
		<exec condition="'@MEM:tblCompany_IsStatart' == '0'">
			<sql type="define">tblCompany_Delete_One</sql>
		</exec>
	</sql>
</define>
<!-- ===========反审核时判断，是否已经被使用============-->
<define name="tblCompany_Delete_One">
	<!--判断商品是否被使用-->
	<sql type="define">tblCompany_BaseInfoUse_Validate</sql>
	<!--删除往来汇总表中记录-->
	<sql>delete from tblCompanyPrice where CompanyCode=(select classCode from tblCompany where id=@ValueofDB:tblCompany_id and tblCompany.SCompanyID=@Sess:SCompanyID)</sql>
	<!--删除价格跟踪的记录-->
	<sql>delete from tblCustomerPriceDet where f_ref=(select id from tblCustomerPrice where CompanyCode=(select classCode from tblCompany where id=@ValueofDB:tblCompany_id and tblCompany.SCompanyID=@Sess:SCompanyID))</sql>
	<sql>delete from tblCustomerPrice where CompanyCode=(select classCode from tblCompany where id=@ValueofDB:tblCompany_id and tblCompany.SCompanyID=@Sess:SCompanyID)</sql>
</define>

<define name="tblCompany_BaseInfoUse_Validate">
	<sql type="condition">
		<condition><select>select classCode,ComNumber as Number,ComFullName as FullName from tblCompany where id=@ValueofDB:id</select></condition>
		<exec condition="true">
			<sql type="procedure">{call proc_BaseInfoUse(CompanyCode,@SqlReturn:classCode,@Sess:Local,errorCode,errorVal)}</sql>
		</exec>		
		<exec condition="'@ProcReturn:errorCode'=='-2222'"> 					
			<error>BaseInfo.delete.error,@SqlReturn:Number,@SqlReturn:FullName,@ProcReturn:errorVal</error>
		</exec>
	</sql>
</define>

<!--==========往来单位启用==========-->
<define name="OpenValue_BaseInfo_tblCompany">
	<sql type="condition">
		<condition><select>select classCode from tblCompany where id=@ValueofDB:tblCompany_id</select></condition>
		<exec condition="true"><!--启用当前商品、其父级及所有子级-->
			<sql>update tblCompany set statusId=0 where classCode like @SqlReturn:classCode+'%' or classCode=subString(@SqlReturn:classCode,1,len(classCode))</sql>
		</exec>
	</sql>
</define>
<!--========往来单位停用========-->
<define name="StopValue_BaseInfo_tblCompany">
	<sql type="condition">
		<condition><select>select classCode from tblCompany where id=@ValueofDB:tblCompany_id</select></condition>
		<exec condition="true"><!--停用当前商品及所有子级-->
			<sql>update tblCompany set statusId=-1 where classCode like @SqlReturn:classCode+'%'</sql>
		</exec>
	</sql>
</define>
	
<!--====================================================以上代码：往来单位===============================================================-->

<!--=========================================================会计科目==============================================================-->
<define name="AccTypeInfo_Add">
	<sql type="condition"><!-- 不能添加一二级会计科目 -->
		<condition><select>select 'TopSubjectExist' as TopSubjectExist from tblAccTypeInfo where @Sess:BillOper ='add' and id=@ValueofDB:tblAccTypeInfo_id and len(classCode)&lt;=10</select></condition>
		<exec condition="'@SqlReturn:TopSubjectExist'=='TopSubjectExist'">
			<error>tblAccTypeInfo.add.TopSubject.error</error>
		</exec>	
	</sql>
	<sql type="condition"><!--启用核算的会计科目不可以添加下级 -->
		<condition><select>select isDept as parentIsdept,IsPersonal as parentIsPersonal,IsClient as parentIsClient,IsProvider as parentIsProvider,IsStock as parentIsStock,IsProject as parentIsProject,IsForCur as parentIsForCur from tblAccTypeInfo where classCode=(select substring(classCode,1,len(classCode)-5) from tblAccTypeInfo where id=@ValueofDB:tblAccTypeInfo_id)</select></condition>
		<exec condition="'@SqlReturn:parentIsdept'=='1' || '@SqlReturn:parentIsPersonal'=='1' || '@SqlReturn:parentIsClient'=='1' || '@SqlReturn:parentIsProvider'=='1' || '@SqlReturn:parentIsStock'=='1' || '@SqlReturn:parentIsProject'=='1' || '@SqlReturn:parentIsForCur'=='1'">
			<error>AccTypeInfo.add.isCalculate.error</error>
		</exec>
	</sql>
	<sql type="condition">
		<condition><select>select count(0) as cash from tblAccTypeInfo where id=@ValueofDB:tblAccTypeInfo_id and (AccNumber like '1001%' or AccNumber like '1002%')</select></condition>
		<exec condition="@SqlReturn:cash&gt;0&amp;&amp;'@ValueofDB:IsForCur'=='1'&amp;&amp;'@ValueofDB:Currency'.length==0">
			<error>AccTypeInfo.add.IsForCur.error</error>
		</exec>
		<exec condition="@SqlReturn:cash&gt;0&amp;&amp;'@ValueofDB:IsForCur'=='2'&amp;&amp;'@ValueofDB:Currency'.length!=0">
			<error>AccTypeInfo.add.Currency.error</error>
		</exec>
	</sql>
	<!--验证新增的字段是否合理,并修改拼音码-->
	<sql type="define">AccTypeInfo_AddUpdate</sql>
	<!--更新表数据-->
	<sql type="condition">
		<condition>
			<select>SELECT COUNT(1) AS ChildCount FROM tblAccTypeInfo WHERE classCode LIKE SUBSTRING(@ValueofDB:tblAccTypeInfo_classCode,1,len(@ValueofDB:tblAccTypeInfo_classCode)-5)+'_____'</select>
			<select>select AccNumber as ParentAccNumber,b.zh_CN as FullName from tblAccTypeInfo a,tblLanguage b where a.classCode=subString(@ValueofDB:tblAccTypeInfo_classCode,1,len(@ValueofDB:tblAccTypeInfo_classCode)-5) and a.AccName=b.id</select>
		</condition>
		<exec condition="@SqlReturn:ChildCount==1&amp;&amp;(@ValueofDB:IsDept==1 || @ValueofDB:IsPersonal==1 || @ValueofDB:IsProject==1 || @ValueofDB:IsClient==1 || @ValueofDB:IsProvider==1 || @ValueofDB:isStock==1 || @ValueofDB:IsCash==1 || @ValueofDB:IsForCur==1)">
			<sql type="procedure">{call proc_AccInfoUse(@SqlReturn:ParentAccNumber,@Sess:Local,errorCode,errorVal)}</sql>
		</exec>
		<exec condition="'@ProcReturn:errorCode'=='-2222'"> 					
			<error>其父级科目已经在如下表中存在记录，第一个子级科目不允许选择核算项目：@ProcReturn:errorVal</error>
		</exec>
		<!--如果是新增，则更新系统标识为否-->
		<exec condition="true">
			<sql>update tblAccTypeInfo set isSysMarker=2 where id=@ValueofDB:tblAccTypeInfo_id</sql>
		</exec>
		<!--当前科目其父级科目只有这个这一个子级，则将科目余额表中记录复制到子级中 -->
		<exec condition="@SqlReturn:ChildCount==1">
			<sql>INSERT INTO tblAccBalance SELECT SUBSTRING(REPLACE(NEWID(),'-',''),1,28),@ValueofDB:tblAccTypeInfo_AccNumber,Nyear,Nmonth,createBy,lastUpdateBy,createTime,lastUpdateTime,statusId,CurrYIni,CurrYIniDebitSum,CurrYIniCreditSum,CurrYIniBala,PeriodIni,PeriodDebitSum,PeriodCreditSum,PeriodDCBala,PeriodBala,CurrYIniBase,CurrYIniDebitSumBase,CurrYIniCreditSumBase,CurrYIniBalaBase,PeriodIniBase,PeriodDebitSumBase,PeriodCreditSumBase,PeriodDCBalaBase,PeriodBalaBase,Period,SCompanyID,CurType,curRate,DepartmentCode FROM tblAccBalance WHERE SubCode =@SqlReturn:ParentAccNumber</sql>
			<sql>UPDATE tblAccDetail SET AccCode =@ValueofDB:tblAccTypeInfo_AccNumber WHERE AccCode =@SqlReturn:ParentAccNumber</sql>
			<sql type="procedure">{call proc_AccInfoUpdateBill(@SqlReturn:ParentAccNumber,@ValueofDB:tblAccTypeInfo_AccNumber,@retCode,@retVal)}</sql>
		</exec>		
		<!--向科目余额表中插入数据-->
		<exec condition="@SqlReturn:ChildCount&gt;=2">
			<sql>insert into tblAccBalance(id,SubCode,Nyear,Nmonth,createBy,lastUpdateBy,createTime,lastUpdateTime,CurrYIniBase,CurrYIniDebitSumBase,CurrYIniCreditSumBase,CurrYIniBalaBase,PeriodIniBase,PeriodDebitSumBase,PeriodCreditSumBase,PeriodDCBalaBase,PeriodBalaBase,Period,CurType,CurrYIni,CurrYIniDebitSum,CurrYIniCreditSum,CurrYIniBala,PeriodIni,PeriodDebitSum,PeriodCreditSum,PeriodDCBala,PeriodBala,SCompanyID) values (@ValueofDB:tblAccTypeInfo_id,@ValueofDB:tblAccTypeInfo_AccNumber,-1,-1,@ValueofDB:tblAccTypeInfo_createBy,@ValueofDB:tblAccTypeInfo_lastUpdateBy,@ValueofDB:tblAccTypeInfo_createTime,@ValueofDB:tblAccTypeInfo_lastUpdateTime,0,0,0,0,0,0,0,0,0,-1,@ValueofDB:tblAccTypeInfo_Currency,0,0,0,0,0,0,0,0,0,@ValueofDB:tblAccTypeInfo_SCompanyID)</sql>			
			<sql>insert into tblAccBalance(id,SubCode,CurrYIniBase,CurrYIniDebitSumBase,CurrYIniCreditSumBase,CurrYIniBalaBase,PeriodIniBase,PeriodDebitSumBase,PeriodCreditSumBase,PeriodDCBalaBase,PeriodBalaBase,CurType,CurrYIni,CurrYIniDebitSum,CurrYIniCreditSum,CurrYIniBala,PeriodIni,PeriodDebitSum,PeriodCreditSum,PeriodDCBala,PeriodBala,SCompanyID,createBy,lastUpdateBy,createTime,lastUpdateTime,period,Nyear,Nmonth) select substring(replace(newid(),'-',''),1,30) as id,@ValueofDB:tblAccTypeInfo_AccNumber,0,0,0,0,0,0,0,0,0,@ValueofDB:tblAccTypeInfo_CurrencyID,0,0,0,0,0,0,0,0,0,@ValueofDB:tblAccTypeInfo_SCompanyID,@ValueofDB:tblAccTypeInfo_createBy,@ValueofDB:tblAccTypeInfo_lastUpdateBy,@ValueofDB:tblAccTypeInfo_createTime,@ValueofDB:tblAccTypeInfo_lastUpdateTime,AccPeriod as AccPeriod,AccYear as AccYear,AccMonth as AccMonth from tblAccPeriod where (statusId=1 or statusId=2) and SCompanyID=@ValueofDB:tblAccTypeInfo_SCompanyID
			</sql>
		</exec>		
	</sql>
	<!--现金银行账户插入-->
	<sql type="condition">
		<condition>
			<select>select 'Add' as CashAdd,a.AccNumber as CashAccNumber,l.zh_CN as CashCN,l.zh_TW as CashTW,l.en as CashEN from tblAccTypeInfo a left join tblLanguage l on l.id=a.AccName where a.id=@ValueofDB:tblAccTypeInfo_id and AccNumber like '1001__%'</select>
			<select>select 'Add' as BankAdd,a.AccNumber as BankAccNumber,l.zh_CN as BankCN,l.zh_TW as BankTW,l.en as BankEN from tblAccTypeInfo a left join tblLanguage l on l.id=a.AccName where a.id=@ValueofDB:tblAccTypeInfo_id and AccNumber like '1002__%'</select>
			<select>select lower(substring(replace(newid(),'-',''),1,28)) as LanguageID</select>			
		</condition>
		<exec condition="'@SqlReturn:CashAdd'=='Add'">
			<sql>insert into tblLanguage(id,zh_CN,zh_TW,en) values(@SqlReturn:LanguageID,@SqlReturn:CashCN,@SqlReturn:CashTW,@SqlReturn:CashEN)</sql>
			<sql>insert into tblCashs(id,AccClassCode,AccountName,createBy,lastUpdateBy,createTime,lastUpdateTime,SCompanyID,statusId,printCount,workFlowNodeName,classCode,AccountType) values(lower(substring(replace(newid(),'-',''),1,28)),@SqlReturn:CashAccNumber,@SqlReturn:LanguageID,'1','1','2010-07-05 18:01:01','2010-07-05 18:01:01','00001',0,0,'notApprove','1'+SUBSTRING(@ValueofDB:tblAccTypeInfo_classCode,12,LEN(@ValueofDB:tblAccTypeInfo_classCode)-11),'cashs')</sql>
		</exec>
		<exec condition="'@SqlReturn:BankAdd'=='Add'">
			<sql>insert into tblLanguage(id,zh_CN,zh_TW,en) values(@SqlReturn:LanguageID,@SqlReturn:BankCN,@SqlReturn:BankTW,@SqlReturn:BankEN)</sql>
			<sql>insert into tblCashs(id,AccClassCode,AccountName,createBy,lastUpdateBy,createTime,lastUpdateTime,SCompanyID,statusId,printCount,workFlowNodeName,classCode,AccountType) values(lower(substring(replace(newid(),'-',''),1,28)),@SqlReturn:BankAccNumber,@SqlReturn:LanguageID,'1','1','2010-07-05 18:01:01','2010-07-05 18:01:01','00001',0,0,'notApprove','2'+SUBSTRING(@ValueofDB:tblAccTypeInfo_classCode,12,LEN(@ValueofDB:tblAccTypeInfo_classCode)-11),'banks')</sql>
		</exec>
		<!-- 更新现金银行账户的目录标识 -->
		<exec condition="'@ValueofDB:tblAccTypeInfo_AccNumber'.substr(0,4)=='1001'||'@ValueofDB:tblAccTypeInfo_AccNumber'.substr(0,4)=='1002'">
			<sql>update tblCashs set isCatalog=0 from tblCashs a where isCatalog=1 and not exists(select * from tblCashs where classCode like a.classCode+'_____%')</sql>
			<sql>update tblCashs set isCatalog=1 from tblCashs a where isCatalog=0 and exists(select * from tblCashs where classCode like a.classCode+'_____%')</sql>
		</exec>
	</sql>
</define>
<!--====新增和修改都可以调用的代码======-->
<define name="AccTypeInfo_AddUpdate">
	<sql type="condition"><!--科目代码长度不能为一位-->
		<condition><select>select len(@ValueofDB:tblAccTypeInfo_AccNumber) as lennum3</select></condition>
		<exec condition="@SqlReturn:lennum3==1">
			<error>AccTypeInfo.Add.error2</error>
		</exec>	
	</sql>
	<sql type="condition">
		<condition><select>select AccNumber as FatherAccNumber,substring(@ValueofDB:tblAccTypeInfo_AccNumber,1,len(AccNumber)) as SonAccNumber from tblAccTypeInfo where classCode=(select substring(classCode,1,len(classCode)-5) from tblAccTypeInfo where id=@ValueofDB:tblAccTypeInfo_id and len(classCode)&gt;10)</select></condition>
		<!-- 系统不允许下级科目与上级科目的代码不一致 -->
		<exec condition="'@SqlReturn:SonAccNumber'!='@SqlReturn:FatherAccNumber'">
			<error>tblAccTypeInfo.add.FatherAccNumber.error</error>
		</exec>
		<!-- 系统不允许向往来科目（应收、应付、预收、预付） 库存商品 原材料等科目添加下级 -->
		<exec condition="'@SqlReturn:FatherAccNumber'=='1123'||'@SqlReturn:FatherAccNumber'=='1122'||'@SqlReturn:FatherAccNumber'=='2202'||'@SqlReturn:FatherAccNumber'=='2203'||'@SqlReturn:FatherAccNumber'=='1403'||'@SqlReturn:FatherAccNumber'=='1405'">
			<error>tblAccTypeInfo.add.AccNumber.error</error>
		</exec>
	</sql>
	<sql type="condition">
		<condition>
			<select>select SUBSTRING(classCode,1,len(classCode)-5) pclassCode,zh_CN zhName from tblAccTypeInfo a left join tblLanguage b on a.AccName=b.id  where a.id  = @ValueofDB:id </select>
			<select>select COUNT(0) dblname from tblAccTypeInfo a join tblLanguage b on a.AccName=b.id where zh_CN = @SqlReturn:zhName and a.classCode like @SqlReturn:pclassCode+'%' and a.classCode &lt;&gt; @SqlReturn:pclassCode and a.id &lt;&gt; @ValueofDB:id  </select>
		</condition>
		<!-- 系统不允许下级科目与上级科目的代码不一致 -->
		<exec condition=" @SqlReturn:dblname &gt; 0 ">
			<error>同一目录科目不能重名</error>
		</exec>
	</sql>
	<sql type="condition"><!-- 同一个会计科目不能同时核算客户和供应商 -->
		<condition><select>select IsProvider,IsClient from tblAccTypeInfo where id=@ValueofDB:tblAccTypeInfo_id</select></condition>
		<exec condition="@SqlReturn:IsProvider==1 &amp;&amp; '@SqlReturn:IsClient'==1">
			<error>AccTypeInfo.add.isClick.error</error>
		</exec>
	</sql>
	<sql type="condition"><!--根据科目全称得到拼音码-->
		<condition><select>select AccName as AccNamePY from tblAccTypeInfo where id=@ValueofDB:tblAccTypeInfo_id</select></condition>
		<exec condition="true">			
			<sql type="procedure">{call proc_getaccfullname(@ValueofDB:classCode,@retCode,@retVal)}</sql>
		</exec>
		<exec condition="'@SqlReturn:AccNamePY'!='null'">
			<sql>update tblacctypeinfo set PyCode=dbo.updateAcctypeinfo_PYM(@SqlReturn:AccNamePY,@Sess:Local) where id=@ValueofDB:tblAccTypeInfo_id</sql>
			<sql>UPDATE tblCashs SET AccountName = tblacctypeinfo.AccName,Currency=tblacctypeinfo.Currency FROM tblacctypeinfo WHERE tblCashs.AccClassCode = @ValueofDB:AccNumber and tblacctypeinfo.id=@ValueofDB:tblAccTypeInfo_id</sql>
						
			<sql>update tblAccBalance set createBy=@ValueofDB:tblAccTypeInfo_createBy,lastUpdateBy=@ValueofDB:tblAccTypeInfo_lastUpdateBy,createTime=@ValueofDB:tblAccTypeInfo_createTime,lastUpdateTime=@ValueofDB:tblAccTypeInfo_lastUpdateTime,CurType=@ValueofDB:tblAccTypeInfo_Currency where SubCode=@ValueofDB:tblAccTypeInfo_AccNumber and SCompanyID=@Sess:SCompanyID</sql>
		</exec>
	</sql>
</define>
<define name="AccTypeInfo_Update">
	<sql type="condition">
		<condition><select>select count(0) as cash from tblAccTypeInfo where id=@ValueofDB:tblAccTypeInfo_id and (AccNumber like '1001%' or AccNumber like '1002%')</select></condition>
		<exec condition="@SqlReturn:cash&gt;0&amp;&amp;'@ValueofDB:IsForCur'=='1'&amp;&amp;'@ValueofDB:Currency'.length==0">
			<error>AccTypeInfo.add.IsForCur.error</error>
		</exec>
		<exec condition="@SqlReturn:cash&gt;0&amp;&amp;'@ValueofDB:IsForCur'=='2'&amp;&amp;'@ValueofDB:Currency'.length!=0">
			<error>AccTypeInfo.add.Currency.error</error>
		</exec>
	</sql>
	<!--验证修改的字段是否合理,并根据名称修改拼音码-->
	<sql type="define">AccTypeInfo_AddUpdate</sql>
	<sql type="condition"><!--如果当前科目是需要核算科目，且科目余额表不存在数据，则删除其核算科目-->
		<condition>
			<select>select COUNT(0) count from tblAccTypeInfo where id=@ValueofDB:tblAccTypeInfo_id and isCalculateParent=1 and (select COUNT(0) from tblAccBalance k where SubCode=tblAccTypeInfo.AccNumber and (k.CurrYIniBase!=0 or k.CurrYIniDebitSumBase!=0 or k.CurrYIniCreditSumBase!=0 or k.CurrYIniBalaBase!=0))=0</select>
			<select>SELECT a.id AS ExistsAccDetail FROM tblAccDetail a JOIN tblAccTypeInfo b ON a.AccCode = b.AccNumber JOIN tblAccTypeInfo c ON b.classCode LIKE c.classCode +'%' AND b.classCode !=c.classCode WHERE c.id =@ValueofDB:tblAccTypeInfo_id</select></condition>
		<exec condition="@SqlReturn:count&gt;0&amp;&amp;('@SqlReturn:ExistsAccDetail'=='null'||'@SqlReturn:ExistsAccDetail'.length==0)">
			<sql>delete from tblAccBalance where subCode in (select AccNumber from tblAccTypeInfo where classCode like @ValueofDB:tblAccTypeInfo_classCode+'_%')</sql>
			<sql>delete from tblAccTypeInfo where classCode like @ValueofDB:tblAccTypeInfo_classCode+'_%'</sql>
			<sql>update tblAccTypeInfo set isCalculateParent=0 where id =@ValueofDB:tblAccTypeInfo_id </sql>
		</exec>
	</sql>
</define>

<define name="AccTypeInfo_Update_Before">
	<sql type="condition"><!--已经存在下级不允许修改是否核算-->
		<exec condition="('@ValueofDB:tblAccTypeInfo_IsDept'=='1' || '@ValueofDB:tblAccTypeInfo_IsPersonal'=='1' || '@ValueofDB:tblAccTypeInfo_IsClient'=='1' || '@ValueofDB:tblAccTypeInfo_IsProvider'=='1' || '@ValueofDB:tblAccTypeInfo_isStock'=='1' || '@ValueofDB:tblAccTypeInfo_IsProject'=='1' || '@ValueofDB:tblAccTypeInfo_IsForCur'=='1')&amp;&amp;@ValueofDB:tblAccTypeInfo_isCatalog==1">
			<error>AccTypeInfo.add.isCatalogisCalculate.error</error>
		</exec>
	</sql>
	<sql type="condition"><!--验证是否存在数据的情况下修改了核算项-->
		<condition>
			<select>select AccName oldAccName,AccNumber oldAccNumber,TotalAmount oldTotalAmount,TotalIni oldTotalIni,DeletedFlag oldDeletedFlag,JdFlag oldJdFlag,CanAddType oldCanAddType,CanDel oldCanDel,IsDept oldIsDept,IsQty oldIsQty,IsPersonal oldIsPersonal,IsProject oldIsProject,IsClient oldIsClient,IsProvider oldIsProvider,IsCash oldIsCash,IsForCur oldIsForCur,PyCode oldPyCode,Remark as oldMRemark,SCompanyID oldSCompanyID,Currency oldCurrency,AccFullName oldAccFullName,IsFullName oldIsFullName,isCalculate oldisCalculate,isStock oldisStock from tblAccTypeInfo where id=@ValueofDB:tblAccTypeInfo_id and SCompanyID=@Sess:SCompanyID</select>
			<select>SELECT isnull(sum(isNull(CurrYIniBase,0)),0) CurrYIniBase, isnull(sum(isNull(CurrYIniBalaBase,0)),0) CurrYIniBalaBase,isnull(sum(isNull(CurrYIniCreditSumBase,0)),0) CurrYIniCreditSumBase,isnull(sum(isNull(CurrYIniDebitSumBase,0)),0) CurrYIniDebitSumBase FROM tblAccBalance a JOIN tblAccTypeInfo b ON a.SubCode = b.AccNumber JOIN tblAccTypeInfo c ON b.classCode LIKE c.classCode +'%'  WHERE c.id =@ValueofDB:tblAccTypeInfo_id</select>			
 		</condition>
		<exec condition="@SqlReturn:oldAccNumber != @ValueofDB:tblAccTypeInfo_AccNumber ">
			<error>科目编号不允许修改</error>
		</exec>
		<!--如果存在有记录，则不允许修改对应字段-->		
		<exec condition="(@SqlReturn:CurrYIniBase !=0 || @SqlReturn:CurrYIniBalaBase !=0 || @SqlReturn:CurrYIniCreditSumBase !=0 || @SqlReturn:CurrYIniDebitSumBase !=0 ) &amp;&amp; (@SqlReturn:oldIsDept != @ValueofDB:tblAccTypeInfo_IsDept || @SqlReturn:oldIsQty != @ValueofDB:tblAccTypeInfo_IsQty || @SqlReturn:oldIsPersonal != @ValueofDB:tblAccTypeInfo_IsPersonal || @SqlReturn:oldIsProject != @ValueofDB:tblAccTypeInfo_IsProject || @SqlReturn:oldIsClient != @ValueofDB:tblAccTypeInfo_IsClient || @SqlReturn:oldIsProvider != @ValueofDB:tblAccTypeInfo_IsProvider || @SqlReturn:oldIsCash != @ValueofDB:tblAccTypeInfo_IsCash || @SqlReturn:oldIsForCur != @ValueofDB:tblAccTypeInfo_IsForCur ||@SqlReturn:oldisStock != @ValueofDB:tblAccTypeInfo_isStock || (@SqlReturn:oldJdFlag != @ValueofDB:JdFlag &amp;&amp; @SqlReturn:oldJdFlag != -100000 ) )">
			<error>ChildUsed.AccCode.error</error>
		</exec>
	</sql>
</define>
<!--=======判断是否被单据使用========-->
<define name="AccTypeInfo_AccInfoUse_Validate">
	<sql type="condition">
		<condition><select>select AccNumber,b.zh_CN as FullName from tblAccTypeInfo a,tblLanguage b where a.id=@ValueofDB:tblAccTypeInfo_id and a.AccName=b.id</select></condition>
		<exec condition="true">
			<sql type="procedure">{call proc_AccInfoUse(@SqlReturn:AccNumber,@Sess:Local,errorCode,errorVal)}</sql>
		</exec>
		<exec condition="'@ProcReturn:errorCode'=='-2222'"> 					
			<error>BaseInfo.delete.error,@SqlReturn:AccNumber,@SqlReturn:FullName,@ProcReturn:errorVal</error>
		</exec>
	</sql>
</define>
<!--============删除前执行的define===============-->
<define name="AccTypeInfo_Del">
	<sql type="condition"><!--不允许删除系统原有科目-->
		<condition><select>select id,AccNumber,isSysMarker from tblAccTypeInfo where id=@ValueofDB:tblAccTypeInfo_id</select></condition>
		<exec condition="'@SqlReturn:isSysMarker'=='1'">
			<error>delete.AccSysMarker.error</error>
		</exec>
	</sql>
	<!--判断是否已经被使用-->
	<sql type="define">AccTypeInfo_AccInfoUse_Validate</sql>
	
	<sql type="condition">
		<condition><select>select AccNumber,classCode,isCatalog from tblAccTypeInfo where id=@ValueofDB:tblAccTypeInfo_id</select></condition>
		<!--删除科目余额表，现金银行账户中相关信息-->
		<exec condition="true">
			<sql>delete from tblLanguage where id=(select AccountName from tblCashs where AccClassCode=@SqlReturn:AccNumber)</sql>
			<sql>delete from tblLanguage where id=(select AccountName from tblBanks where AccClassCode=@SqlReturn:AccNumber)</sql>
			<sql>delete from tblCashs where AccClassCode=@SqlReturn:AccNumber and SCompanyID=@Sess:SCompanyID</sql>
			<sql>delete from tblBanks where AccClassCode=@SqlReturn:AccNumber and SCompanyID=@Sess:SCompanyID</sql>
			<sql>delete from tblAccBalance where SubCode in (select AccNumber from tblAccTypeInfo where classCode like @SqlReturn:classCode+'%')</sql>
			<!--如果是需要核算的科目，则修改时删除所有核算科目-->
			<sql>delete from tblAccTypeInfo where @SqlReturn:isCatalog=0 and classCode like @SqlReturn:classCode+'_%'</sql>
		</exec>
		<!-- 更新现金银行账户的目录标识 -->
		<exec condition="'@SqlReturn:AccNumber'.substr(0,4)=='1001'||'@SqlReturn:AccNumber'.substr(0,4)=='1002'">
			<sql>update tblCashs set isCatalog=0 from tblCashs a where isCatalog=1 and not exists(select * from tblCashs where classCode like a.classCode+'_____%')</sql>
			<sql>update tblCashs set isCatalog=1 from tblCashs a where isCatalog=0 and exists(select * from tblCashs where classCode like a.classCode+'_____%')</sql>
		</exec>
	</sql>
</define>
<!--================================================以上代码：会计科目======================================================-->

<!--=================================================现金银行账户=========================================================-->
<define name="Cash_Add">
	<sql type="condition"><!-- 当前科目的核算币种必须与父级相同-->
		<condition><select>select isnull(AccountType,'') as AccountTypee from tblCashs where classCode=substring(@ValueofDB:tblCashs_classCode,1,len(@ValueofDB:tblCashs_classCode)-5)</select></condition>
		<exec condition="'@SqlReturn:AccountTypee'!= 'null'&amp;&amp;'@SqlReturn:AccountTypee' != '@ValueofDB:tblCashs_AccountType' ">
			<error>tblCashs.error.AccountType</error> 
		</exec>
	</sql>
	<sql type="condition"><!-- 现金银行添加下级时第一个添加的必须是本位币，因为要把原数据转入下级科目，币种必须一致-->
		<condition>
        <select>SELECT COUNT(*) AS BankAccBalanceCnt FROM tblAccBalance WHERE tblAccBalance.SubCode LIKE '1002%' AND (isnull(CurrYIniCreditSumBase,0)!=0 or isnull(CurrYIniDebitSumBase,0)!=0 or isnull(PeriodCreditSumBase,0)!=0 OR ISNULL(PeriodDebitSumBase,0)!=0 or isnull(CurrYIniBalaBase,0)!=0 OR isnull(PeriodBalaBase,0)!=0 or isnull(PeriodIniBase,0)!=0 OR ISNULL(PeriodDCBalaBase,0)!=0)</select>
        <select>SELECT COUNT(*) AS BankAccCnt FROM tblAccDetail tad WHERE tad.AccCode LIKE '1002%'</select>
        <select>SELECT COUNT(*) AS CashAccBalanceCnt FROM tblAccBalance WHERE tblAccBalance.SubCode LIKE '1001%'  AND (isnull(CurrYIniCreditSumBase,0)!=0 or isnull(CurrYIniDebitSumBase,0)!=0 or isnull(PeriodCreditSumBase,0)!=0 OR ISNULL(PeriodDebitSumBase,0)!=0 or isnull(CurrYIniBalaBase,0)!=0 OR isnull(PeriodBalaBase,0)!=0 or isnull(PeriodIniBase,0)!=0 OR ISNULL(PeriodDCBalaBase,0)!=0)</select>
        <select>SELECT COUNT(*) AS CashAccCnt FROM tblAccDetail tad WHERE tad.AccCode LIKE '1001%'</select>        
		<select>SELECT len(isnull(Currency,'')) AS CurLen, AccountType FROM tblCashs WHERE id=@ValueofDB:tblCashs_id</select>
		<select>SELECT COUNT(*) AS SubCnt FROM tblCashs WHERE AccountType IN (SELECT AccountType FROM tblCashs WHERE id=@ValueofDB:tblCashs_id) AND LEN(ISNULL(Currency,''))=0</select>
		</condition>
		<exec condition="(@SqlReturn:BankAccBalanceCnt &gt; '0' || @SqlReturn:BankAccCnt &gt; '0') &amp;&amp; '@SqlReturn:CurLen' &gt; '0' &amp;&amp; '@SqlReturn:SubCnt' == '0' &amp;&amp; '@SqlReturn:AccountType' == 'banks'">
			<error>tblCash.error.bankfirstMustBeRMB</error>
		</exec>
        <exec condition="(@SqlReturn:CashAccBalanceCnt &gt; '0' || @SqlReturn:CashAccCnt &gt; '0') &amp;&amp; '@SqlReturn:CurLen' &gt; '0' &amp;&amp; '@SqlReturn:SubCnt' == '0' &amp;&amp; '@SqlReturn:AccountType' == 'cashs'">
            <error>tblCash.error.cashfirstMustBeRMB</error>
        </exec>
	</sql>
	<sql type="condition">
		<condition>
			<!--生成会计科目表的classCode-->
      <select>select (case when len(isnull(Currency,''))=0 then 2 else 1 end) as IsForCur from tblCashs where id=@ValueofDB:tblCashs_id</select>
			<select>select classCode+@ValueofDB:tblCashs_classCode as NewClassCode,@SqlReturn:IsForCur from tblAccTypeInfo where AccNumber=(case when @ValueofDB:AccountType='cashs' then '1001' else '1002' end)</select> 
			<!--自动生成科目代码-->
			<select>select isnull(max(AccClassCode),(case when len(@ValueofDB:tblCashs_classCode)=5 then (case when @ValueofDB:AccountType='cashs' then '1001' else '1002' end) else (select AccClassCode from tblCashs where classCode=substring(@ValueofDB:tblCashs_classCode,1,len(@ValueofDB:tblCashs_classCode)-5)) end)+'00') as MaxAccClassCode from tblCashs where classCode like substring(@ValueofDB:tblCashs_classCode,1,len(@ValueofDB:tblCashs_classCode)-5)+'_____' and AccountType=@ValueofDB:AccountType and ISNULL(accclassCode,'') != '' </select>
			<select>select isnull(max(AccClassCode),(case when len(@ValueofDB:tblCashs_classCode)=5 then (case when @ValueofDB:AccountType='cashs' then '1001' else '1002' end) else (select AccClassCode from tblCashs where classCode=substring(@ValueofDB:tblCashs_classCode,1,len(@ValueofDB:tblCashs_classCode)-5)) end)+'00')+1 as MaxAccClassCodeNew from tblCashs where classCode like substring(@ValueofDB:tblCashs_classCode,1,len(@ValueofDB:tblCashs_classCode)-5)+'_____' and AccountType=@ValueofDB:AccountType and ISNULL(accclassCode,'') != '' </select>
			<!--查询科目名称，因为界面传递的值还不是多语言ID-->
			<select>select AccountName as AccName from tblCashs where id=@ValueofDB:tblCashs_id</select>
			<select>SELECT COUNT(1) AS ChildCount FROM tblCashs WHERE classCode LIKE SUBSTRING(@ValueofDB:tblCashs_classCode,1,len(@ValueofDB:tblCashs_classCode)-5)+'_____' and AccountType=@ValueofDB:tblCashs_AccountType</select> 
			<select>SELECT (case when len(@ValueofDB:tblCashs_classCode)=5 then (case when @ValueofDB:AccountType='cashs' then '1001' else '1002' end) else AccClassCode end) AS ParentAccNumber FROM tblCashs WHERE len(@ValueofDB:tblCashs_classCode)=5 or classCode = SUBSTRING(@ValueofDB:tblCashs_classCode,1,len(@ValueofDB:tblCashs_classCode)-5)</select> 
			<select>select case when @ValueofDB:AccountType='cashs' then 'coh' else 'dib' end as coh</select>
		</condition>
		<exec condition="true">
			<!--向会计表中插入相同的现金科目信息-->
			<sql type="procedure">{call proc_CommLan(CommEnum,@SqlReturn:coh,@SqlReturn:AccName,retCode,retVal)}</sql>
			<sql>insert into tblAccTypeInfo (id,classCode,AccName,PyCode,AccNumber,createBy,lastUpdateBy,JdFlag,CanAddType,CanDel,IsDept,IsQty,IsPersonal,IsProject,IsClient,IsProvider,IsCash,IsForCur,Currency,createTime,statusId,SCompanyID,DeletedFlag,lastUpdateTime,AccFullName,IsFullName) values (@ValueofDB:tblCashs_id,@SqlReturn:NewClassCode,@SqlReturn:AccName,dbo.updateAcctypeinfo_PYM(@SqlReturn:AccName,@Sess:Local),@SqlReturn:MaxAccClassCode+1,@ValueofDB:tblCashs_createBy,@ValueofDB:tblCashs_lastUpdateBy,1,1,2,2,2,2,2,2,2,2,@SqlReturn:IsForCur,@ValueofDB:tblCashs_Currency,@ValueofDB:tblCashs_createTime,0,@ValueofDB:tblCashs_SCompanyID,0,@ValueofDB:tblCashs_lastUpdateTime,@SqlReturn:retVal,1)</sql>
			<!--如果库存现金还是子级，则更新为父级标识-->
			<sql>update tblAccTypeInfo set isCatalog=1 where accNumber=(case when @ValueofDB:AccountType='cashs' then '1001' else '1002' end) and isCatalog=0</sql>
			<!--更新当前记录的科目代码-->
			<sql>update tblCashs set AccClassCode=@SqlReturn:MaxAccClassCode+1 where id=@ValueofDB:tblCashs_id</sql>
			<sql>update tblAccTypeInfo set isCatalog=1 where accNumber=@SqlReturn:ParentAccNumber and isCatalog=0</sql>
		</exec>
		<exec condition="'@SqlReturn:ParentAccNumber'!='null'&amp;&amp;@SqlReturn:ChildCount==1">
		<!--回填科目余额、凭证明细、单据-->
			<sql>INSERT INTO tblAccBalance SELECT SUBSTRING(REPLACE(NEWID(),'-',''),1,28),@SqlReturn:MaxAccClassCode+1,Nyear,Nmonth,createBy,lastUpdateBy,createTime,lastUpdateTime,statusId,CurrYIni,CurrYIniDebitSum,CurrYIniCreditSum,CurrYIniBala,PeriodIni,PeriodDebitSum,PeriodCreditSum,PeriodDCBala,PeriodBala,CurrYIniBase,CurrYIniDebitSumBase,CurrYIniCreditSumBase,CurrYIniBalaBase,PeriodIniBase,PeriodDebitSumBase,PeriodCreditSumBase,PeriodDCBalaBase,PeriodBalaBase,Period,SCompanyID,@ValueofDB:tblCashs_Currency,curRate,DepartmentCode FROM tblAccBalance WHERE SubCode =@SqlReturn:ParentAccNumber</sql>
			<sql>UPDATE tblAccDetail SET AccCode =@SqlReturn:MaxAccClassCode+1 WHERE AccCode =@SqlReturn:ParentAccNumber</sql>
			<sql type="procedure">{call proc_AccInfoUpdateBill(@SqlReturn:ParentAccNumber,@SqlReturn:MaxAccClassCodeNew,@retCode,@retVal)}</sql>
		</exec>
		<exec condition="@SqlReturn:ChildCount&gt;=2||('@SqlReturn:ParentAccNumber'==''||'@SqlReturn:ParentAccNumber'=='null')">
			<!--插入期初科目余额表-->
			<sql>insert into tblAccBalance(id,SubCode,Nyear,Nmonth,CurType,createBy,lastUpdateBy,createTime,lastUpdateTime,CurrYIniBase,CurrYIniDebitSumBase,CurrYIniCreditSumBase,CurrYIniBalaBase,PeriodIniBase,PeriodDebitSumBase,PeriodCreditSumBase,PeriodDCBalaBase,PeriodBalaBase,Period,CurrYIni,CurrYIniDebitSum,CurrYIniCreditSum,CurrYIniBala,PeriodIni,PeriodDebitSum,PeriodCreditSum,PeriodDCBala,PeriodBala,SCompanyID) values (@ValueofDB:tblCashs_id,@SqlReturn:MaxAccClassCode+1,-1,-1,@ValueofDB:tblCashs_Currency,@ValueofDB:tblCashs_createBy,@ValueofDB:tblCashs_lastUpdateBy,@ValueofDB:tblCashs_createTime,@ValueofDB:tblCashs_lastUpdateTime,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,@ValueofDB:tblCashs_SCompanyID)</sql>
		</exec>
		<!--如果当前期间不是期初，则插入以后期间的数据-->
		<exec condition="('@Sess:NowPeriod' !='-1')&amp;&amp;(@SqlReturn:ChildCount&gt;=2||('@SqlReturn:ParentAccNumber'==''||'@SqlReturn:ParentAccNumber'=='null'))">		
			<sql>insert into tblAccBalance(id,SubCode,Nyear,Nmonth,Period,CurType,createBy,lastUpdateBy,createTime,lastUpdateTime,CurrYIniBase,CurrYIniDebitSumBase,CurrYIniCreditSumBase,CurrYIniBalaBase,PeriodIniBase,PeriodDebitSumBase,PeriodCreditSumBase,PeriodDCBalaBase,PeriodBalaBase,CurrYIni,CurrYIniDebitSum,CurrYIniCreditSum,CurrYIniBala,PeriodIni,PeriodDebitSum,PeriodCreditSum,PeriodDCBala,PeriodBala,SCompanyID) select substring(replace(newid(),'-',''),1,30),@SqlReturn:MaxAccClassCode+1,AccYear,AccMonth,AccPeriod,@ValueofDB:tblCashs_Currency,@ValueofDB:tblCashs_createBy,@ValueofDB:tblCashs_lastUpdateBy,@ValueofDB:tblCashs_createTime,@ValueofDB:tblCashs_lastUpdateTime,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,@ValueofDB:tblCashs_SCompanyID from tblAccPeriod where SCompanyID=@Sess:SCompanyID and periodBegin&gt;=(select periodBegin from tblAccPeriod where IsBegin=1 and SCompanyID=@ValueofDB:tblCashs_SCompanyID) and periodEnd&lt;=(select periodEnd from tblAccPeriod where statusId=1 and SCompanyID=@ValueofDB:tblCashs_SCompanyID)</sql>			
		</exec>
		<!--如果启用了部门核算，则新增时根据所有一级部门复制当前科目的所有期间-->		
		<exec condition="('@MEM:openDeptAcc'=='true'&amp;&amp;'@Sess:BillOper'=='add')&amp;&amp;(@SqlReturn:ChildCount&gt;=2||('@SqlReturn:ParentAccNumber'==''||'@SqlReturn:ParentAccNumber'=='null'))">
			<sql>insert into tblAccBalance(id,SubCode,Nyear,Nmonth,createBy,lastUpdateBy,createTime,lastUpdateTime,statusId,CurrYIni,CurrYIniDebitSum,CurrYIniCreditSum,CurrYIniBala,PeriodIni,PeriodDebitSum,PeriodCreditSum,PeriodDCBala,PeriodBala,CurrYIniBase,CurrYIniDebitSumBase,CurrYIniCreditSumBase,CurrYIniBalaBase,PeriodIniBase,PeriodDebitSumBase,PeriodCreditSumBase,PeriodDCBalaBase,PeriodBalaBase,Period,SCompanyID,CurType,CurrencyRate,classCode,RowON,workFlowNodeName,workFlowNode,printCount,checkPersons,finishTime,CheckPersont,DepartmentCode) select substring(replace(newid(),'-',''),1,30) as id,a.SubCode,a.Nyear,a.Nmonth,a.createBy,a.lastUpdateBy,a.createTime,a.lastUpdateTime,a.statusId,CurrYIni,a.CurrYIniDebitSum,CurrYIniCreditSum,CurrYIniBala,a.PeriodIni,a.PeriodDebitSum,a.PeriodCreditSum,a.PeriodDCBala,a.PeriodBala,a.CurrYIniBase,CurrYIniDebitSumBase,CurrYIniCreditSumBase,a.CurrYIniBalaBase,PeriodIniBase,PeriodDebitSumBase,a.PeriodCreditSumBase,a.PeriodDCBalaBase,a.PeriodBalaBase,a.Period,a.SCompanyID,a.CurType,CurrencyRate,a.classCode,a.RowON,a.workFlowNodeName,a.workFlowNode,a.printCount,a.checkPersons,a.finishTime,a.CheckPersont,b.classCode from tblAccBalance a,tblDepartment b where a.SubCode=(select  AccClassCode from tblCashs where id=@ValueofDB:tblCashs_id) and len(isnull(b.classCode,''))=5</sql>
		</exec>
	</sql>
</define>

<define name="Cash_Del">
	<sql type="condition">
		<condition>
			<select>select id,AccountName,AccClassCode,AccountType from tblCashs where id=@ValueofDB:tblCashs_id </select>
			<select>select len(AccClassCode)/2 as numbers from tblCashs where id=@ValueofDB:tblCashs_id </select>			 
			<select>select tblCashs.id as CashsID,zh_CN as AN from tblCashs left join tbllanguage on tblCashs.Accountname=tbllanguage.id where (tblCashs.AccClassCode in (select AccCode from tblAccDetail) or (select top 1 PeriodBalaBase from tblAccBalance where subCode=tblCashs.AccClassCode order by Nyear desc,Nmonth desc)!=0) and tblCashs.id=@ValueofDB:tblCashs_id</select>
      <select>SELECT COUNT(Account) as UseCount FROM (SELECT Account FROM tblBuyOrder WHERE Account in (SELECT AccClassCode FROM tblCashs WHERE id=@ValueofDB:tblCashs_id) UNION ALL SELECT Account FROM tblBuyPayAccount WHERE Account in (SELECT AccClassCode FROM tblCashs WHERE id=@ValueofDB:tblCashs_id) UNION ALL SELECT Account FROM tblBuyOutStock WHERE Account in (SELECT AccClassCode FROM tblCashs WHERE id=@ValueofDB:tblCashs_id) UNION ALL SELECT Account FROM tblBuyReplace WHERE Account in (SELECT AccClassCode FROM tblCashs WHERE id=@ValueofDB:tblCashs_id) UNION ALL SELECT Account FROM tblPayAccountDet WHERE Account in (SELECT AccClassCode FROM tblCashs WHERE id=@ValueofDB:tblCashs_id) UNION ALL SELECT Account FROM tblSalesOrder WHERE Account in (SELECT AccClassCode FROM tblCashs WHERE id=@ValueofDB:tblCashs_id) UNION ALL SELECT Account FROM tblSalesRecAccount WHERE Account in (SELECT AccClassCode FROM tblCashs WHERE id=@ValueofDB:tblCashs_id) UNION ALL SELECT Account FROM tblSalesReturnStock WHERE Account in (SELECT AccClassCode FROM tblCashs WHERE id=@ValueofDB:tblCashs_id) UNION ALL SELECT Account FROM tblSalesReplace WHERE Account in (SELECT AccClassCode FROM tblCashs WHERE id=@ValueofDB:tblCashs_id) UNION ALL SELECT Account FROM tblReceiveAccountDet WHERE Account in (SELECT AccClassCode FROM tblCashs WHERE id=@ValueofDB:tblCashs_id) UNION ALL SELECT SubCode FROM tblExpensed WHERE SubCode in (SELECT AccClassCode FROM tblCashs WHERE id=@ValueofDB:tblCashs_id) UNION ALL SELECT SubCode FROM tblIncome WHERE SubCode in (SELECT AccClassCode FROM tblCashs WHERE id=@ValueofDB:tblCashs_id) UNION ALL SELECT PayBankID FROM tblUserTransAcc WHERE PayBankID in (SELECT AccClassCode FROM tblCashs WHERE id=@ValueofDB:tblCashs_id) UNION ALL SELECT ReceiveBankNo FROM tblUserTransAccDet WHERE ReceiveBankNo in (SELECT AccClassCode FROM tblCashs WHERE id=@ValueofDB:tblCashs_id))tt
    </select>
		</condition>
		<exec condition="'@SqlReturn:UseCount' &gt; 0">
			<error>tblCashs.Delete.error,@SqlReturn:AN</error>
		</exec>
		<exec condition="'@SqlReturn:CashsID' != 'null'">
			<error>tblCashs.Delete.error,@SqlReturn:AN</error>
		</exec>
		<exec condition="true"> 
			<sql>delete from tblAccTypeInfo where AccNumber like @SqlReturn:AccClassCode+'%' and SCompanyID=@Sess:SCompanyID</sql>
			<sql>delete from tblAccBalance where SubCode like @SqlReturn:AccClassCode+'%' and SCompanyID=@Sess:SCompanyID</sql>
		</exec>
		<exec condition="@SqlReturn:numbers==3">
			<sql>update tblAccTypeInfo set isCatalog=0 where accNumber=(case when @SqlReturn:AccountType='cashs' then '1001' else '1002' end) and isCatalog=1 and not exists (select * from tblAccTypeInfo where accNumber like (case when @SqlReturn:AccountType='cashs' then '1001' else '1002' end)+'__%')</sql>	
		</exec>
		<exec condition="@SqlReturn:numbers==4">
			<sql>update tblAccTypeInfo set isCatalog=0 where accNumber=substring(@SqlReturn:AccClassCode,1,6) and isCatalog=1 and not exists (select * from tblAccTypeInfo where accNumber like substring(@SqlReturn:AccClassCode,1,6)+'__'+'%')</sql>	
		</exec>
 		<exec condition="@SqlReturn:numbers==5">
			<sql>update tblAccTypeInfo set isCatalog=0 where accNumber=substring(@SqlReturn:AccClassCode,1,8) and isCatalog=1 and not exists (select * from tblAccTypeInfo where accNumber like substring(@SqlReturn:AccClassCode,1,8)+'__'+'%')</sql>	
		</exec>		 
	</sql>						                
</define>
<define name="Cash_update_bef">
	<sql type="condition">
		<condition>
			<select>select AccountType,Currency as CurrencyR from tblCashs where id=@ValueofDB:tblCashs_id</select>
			<select>select a.AccNumber,b.zh_CN as FullName from tblAccTypeInfo a,tblLanguage b,tblCashs c where c.id=@ValueofDB:tblCashs_id and a.AccName=b.id and a.AccNumber=c.AccClassCode</select>
			<select>SELECT 'exist' AS existsCh FROM tblCashs WHERE classCode LIKE @ValueofDB:tblCashs_classCode+'_____'</select>
		</condition>
		<exec condition="'@SqlReturn:existsCh'=='exist'&amp;&amp;'@SqlReturn:AccountType'!='@ValueofDB:tblCashs_AccountType'">
			<error>Account.existChild.error</error>
		</exec>
		<exec condition="'@SqlReturn:AccountType'!='@ValueofDB:tblCashs_AccountType'||'@SqlReturn:CurrencyR'!='@ValueofDB:tblCashs_Currency'">
			<sql type="procedure">{call proc_AccInfoUse(@SqlReturn:AccNumber,@Sess:Local,errorCode,errorVal)}</sql>
		</exec>
		<exec condition="'@ProcReturn:errorCode'=='-2222'"> 					
			<error>BaseInfo.delete.error,@SqlReturn:AccNumber,@SqlReturn:FullName,@ProcReturn:errorVal</error>
		</exec>
		<exec condition="'@SqlReturn:AccountType'!='@ValueofDB:tblCashs_AccountType'">
			<sql>DELETE FROM tblAccTypeInfo WHERE AccNumber = @ValueofDB:AccClassCode</sql>
			<sql>DELETE FROM tblAccBalance WHERE SubCode = @ValueofDB:AccClassCode</sql>
		</exec>
	</sql>
</define>
<define name="Cash_Update_AddOperation">
	<sql type="condition"><!--在凭证表中查询库存现金或者上级科目代码是否使用-->	
		<condition>
			<select>SELECT MAX(classCode) AS CurrentClassCode FROM tblCashs WHERE AccountType =@ValueofDB:AccountType</select>
			<select>select case when @SqlReturn:CurrentClassCode='' then @ValueofDB:classCode else @SqlReturn:CurrentClassCode end as CurrentClassCode1</select>
			<select>select COUNT(0) as PC from tblAccDetail where AccCode=(case when @ValueofDB:AccountType='cashs' then '1001' else '1002' end) or AccCode in (select AccClassCode from tblCashs where classCode=substring(@SqlReturn:CurrentClassCode1,1,len(@SqlReturn:CurrentClassCode1)-5))</select>
		</condition>
		<!--如果是第一级现金，则提示会计科目中库存现金已经存在业务数据-->	
		<exec condition="@SqlReturn:PC&gt;0&amp;&amp;'@SqlReturn:CurrentClassCode'.length==5">
			<error>Cashs.addAccTypeinfonext.error</error>
		</exec>
	</sql>

	<sql type="condition">
		<condition>
			<select>SELECT MAX(classCode) AS CurrentClassCode FROM tblCashs WHERE AccountType =@ValueofDB:AccountType</select>
			<select>select case when @SqlReturn:CurrentClassCode='' then @ValueofDB:classCode else @SqlReturn:CurrentClassCode end as CurrentClassCode1,case when len(@ValueofDB:tblCashs_Currency)=0 then 2 else 1 end as IsForCur</select>
			<!--生成会计科目表的classCode-->
			<select>select classCode+@SqlReturn:CurrentClassCode1 as NewClassCode from tblAccTypeInfo where AccNumber=(case when @ValueofDB:AccountType='cashs' then '1001' else '1002' end)</select> 
			<!--自动生成科目代码-->
			<select>select max(AccClassCode) as MaxAccClassCode1 from tblCashs where len(classCode)=len(@SqlReturn:CurrentClassCode1) and AccountType=@ValueofDB:AccountType</select>
			<select>select case when @SqlReturn:MaxAccClassCode1='' then (case when len(@SqlReturn:CurrentClassCode1)=5 then (case when @ValueofDB:AccountType='cashs' then '1001' else '1002' end) else (select AccClassCode from tblCashs where classCode=substring(@SqlReturn:CurrentClassCode1,1,len(@SqlReturn:CurrentClassCode1)-5)) end)+'00' else @SqlReturn:MaxAccClassCode1 end as MaxAccClassCode</select>
			<select>select case when @SqlReturn:MaxAccClassCode1='' then (case when len(@SqlReturn:CurrentClassCode1)=5 then (case when @ValueofDB:AccountType='cashs' then '1001' else '1002' end) else (select AccClassCode from tblCashs where classCode=substring(@SqlReturn:CurrentClassCode1,1,len(@SqlReturn:CurrentClassCode1)-5)) end)+'00' else @SqlReturn:MaxAccClassCode1 end as MaxAccClassCodeNew</select>
			<!--查询科目名称，因为界面传递的值还不是多语言ID-->
			<select>select AccountName as AccName from tblCashs where id=@ValueofDB:tblCashs_id</select>
			<select>SELECT COUNT(1) AS ChildCount FROM tblCashs WHERE classCode LIKE SUBSTRING(@SqlReturn:CurrentClassCode1,1,len(@SqlReturn:CurrentClassCode1)-5)+'_____'</select> 
			<select>SELECT AccClassCode AS ParentAccNumber FROM tblCashs WHERE classCode = SUBSTRING(@SqlReturn:CurrentClassCode1,1,len(@SqlReturn:CurrentClassCode1)-5)</select> 
			<select>select case when @ValueofDB:AccountType='cashs' then 'coh' else 'dib' end as coh</select>
		</condition>
		<exec condition="true">
			<!--向会计表中插入相同的现金科目信息-->
			<sql type="procedure">{call proc_CommLan(CommEnum,@SqlReturn:coh,@SqlReturn:AccName,retCode,retVal)}</sql>
			<sql>insert into tblAccTypeInfo (id,classCode,AccName,PyCode,AccNumber,createBy,lastUpdateBy,JdFlag,CanAddType,CanDel,IsDept,IsQty,IsPersonal,IsProject,IsClient,IsProvider,IsCash,IsForCur,Currency,createTime,statusId,SCompanyID,DeletedFlag,lastUpdateTime,AccFullName,IsFullName) values (@ValueofDB:tblCashs_id,@SqlReturn:NewClassCode,@SqlReturn:AccName,dbo.updateAcctypeinfo_PYM(@SqlReturn:AccName,@Sess:Local),@SqlReturn:MaxAccClassCode+1,@ValueofDB:tblCashs_createBy,@ValueofDB:tblCashs_lastUpdateBy,1,1,2,2,2,2,2,2,2,2,@SqlReturn:IsForCur,@ValueofDB:tblCashs_Currency,@ValueofDB:tblCashs_createTime,0,@ValueofDB:tblCashs_SCompanyID,0,@ValueofDB:tblCashs_lastUpdateTime,@SqlReturn:retVal,1)</sql>
			<!--如果库存现金还是子级，则更新为父级标识-->
			<sql>update tblAccTypeInfo set isCatalog=1 where accNumber=(case when @ValueofDB:AccountType='cashs' then '1001' else '1002' end) and isCatalog=0</sql>
			<!--更新当前记录的科目代码-->
			<sql>update tblCashs set AccClassCode=@SqlReturn:MaxAccClassCode+1 where id=@ValueofDB:tblCashs_id</sql>
			<sql>update tblAccTypeInfo set isCatalog=1 where accNumber=@SqlReturn:ParentAccNumber and isCatalog=0</sql>
		</exec>
		<exec condition="'@SqlReturn:ParentAccNumber'!='null'&amp;&amp;@SqlReturn:ChildCount==1">
		<!--回填科目余额、凭证明细、单据-->
			<sql>INSERT INTO tblAccBalance SELECT SUBSTRING(REPLACE(NEWID(),'-',''),1,28),@SqlReturn:MaxAccClassCode+1,Nyear,Nmonth,createBy,lastUpdateBy,createTime,lastUpdateTime,statusId,CurrYIni,CurrYIniDebitSum,CurrYIniCreditSum,CurrYIniBala,PeriodIni,PeriodDebitSum,PeriodCreditSum,PeriodDCBala,PeriodBala,CurrYIniBase,CurrYIniDebitSumBase,CurrYIniCreditSumBase,CurrYIniBalaBase,PeriodIniBase,PeriodDebitSumBase,PeriodCreditSumBase,PeriodDCBalaBase,PeriodBalaBase,Period,SCompanyID,CurType,curRate,DepartmentCode FROM tblAccBalance WHERE SubCode =@SqlReturn:ParentAccNumber</sql>
			<sql>UPDATE tblAccDetail SET AccCode =@SqlReturn:MaxAccClassCode+1 WHERE AccCode =@SqlReturn:ParentAccNumber</sql>
			<sql type="procedure">{call proc_AccInfoUpdateBill(@SqlReturn:ParentAccNumber,@SqlReturn:MaxAccClassCodeNew,@retCode,@retVal)}</sql>
		</exec>
		<exec condition="@SqlReturn:ChildCount&gt;=2||('@SqlReturn:ParentAccNumber'==''||'@SqlReturn:ParentAccNumber'=='null')">
			<!--插入期初科目余额表-->
			<sql>insert into tblAccBalance(id,SubCode,Nyear,Nmonth,CurType,createBy,lastUpdateBy,createTime,lastUpdateTime,CurrYIniBase,CurrYIniDebitSumBase,CurrYIniCreditSumBase,CurrYIniBalaBase,PeriodIniBase,PeriodDebitSumBase,PeriodCreditSumBase,PeriodDCBalaBase,PeriodBalaBase,Period,CurrYIni,CurrYIniDebitSum,CurrYIniCreditSum,CurrYIniBala,PeriodIni,PeriodDebitSum,PeriodCreditSum,PeriodDCBala,PeriodBala,SCompanyID) values (@ValueofDB:tblCashs_id,@SqlReturn:MaxAccClassCode+1,-1,-1,@ValueofDB:tblCashs_Currency,@ValueofDB:tblCashs_createBy,@ValueofDB:tblCashs_lastUpdateBy,@ValueofDB:tblCashs_createTime,@ValueofDB:tblCashs_lastUpdateTime,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,@ValueofDB:tblCashs_SCompanyID)</sql>
		</exec>
		<!--如果当前期间不是期初，则插入以后期间的数据-->
		<exec condition="('@Sess:NowPeriod' !='-1')&amp;&amp;(@SqlReturn:ChildCount&gt;=2||('@SqlReturn:ParentAccNumber'==''||'@SqlReturn:ParentAccNumber'=='null'))">		
			<sql>insert into tblAccBalance(id,SubCode,Nyear,Nmonth,Period,CurType,createBy,lastUpdateBy,createTime,lastUpdateTime,CurrYIniBase,CurrYIniDebitSumBase,CurrYIniCreditSumBase,CurrYIniBalaBase,PeriodIniBase,PeriodDebitSumBase,PeriodCreditSumBase,PeriodDCBalaBase,PeriodBalaBase,CurrYIni,CurrYIniDebitSum,CurrYIniCreditSum,CurrYIniBala,PeriodIni,PeriodDebitSum,PeriodCreditSum,PeriodDCBala,PeriodBala,SCompanyID) select substring(replace(newid(),'-',''),1,30),@SqlReturn:MaxAccClassCode+1,AccYear,AccMonth,AccPeriod,@ValueofDB:tblCashs_Currency,@ValueofDB:tblCashs_createBy,@ValueofDB:tblCashs_lastUpdateBy,@ValueofDB:tblCashs_createTime,@ValueofDB:tblCashs_lastUpdateTime,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,@ValueofDB:tblCashs_SCompanyID from tblAccPeriod where SCompanyID=@Sess:SCompanyID and periodBegin&gt;=(select periodBegin from tblAccPeriod where IsBegin=1 and SCompanyID=@ValueofDB:tblCashs_SCompanyID) and periodEnd&lt;=(select periodEnd from tblAccPeriod where statusId=1 and SCompanyID=@ValueofDB:tblCashs_SCompanyID)</sql>			
		</exec>
		<!--如果启用了部门核算，则新增时根据所有一级部门复制当前科目的所有期间-->		
		<exec condition="('@MEM:openDeptAcc'=='true'&amp;&amp;'@Sess:BillOper'=='add')&amp;&amp;(@SqlReturn:ChildCount&gt;=2||('@SqlReturn:ParentAccNumber'==''||'@SqlReturn:ParentAccNumber'=='null'))">
			<sql>insert into tblAccBalance(id,SubCode,Nyear,Nmonth,createBy,lastUpdateBy,createTime,lastUpdateTime,statusId,CurrYIni,CurrYIniDebitSum,CurrYIniCreditSum,CurrYIniBala,PeriodIni,PeriodDebitSum,PeriodCreditSum,PeriodDCBala,PeriodBala,CurrYIniBase,CurrYIniDebitSumBase,CurrYIniCreditSumBase,CurrYIniBalaBase,PeriodIniBase,PeriodDebitSumBase,PeriodCreditSumBase,PeriodDCBalaBase,PeriodBalaBase,Period,SCompanyID,CurType,CurrencyRate,classCode,RowON,workFlowNodeName,workFlowNode,printCount,checkPersons,finishTime,CheckPersont,DepartmentCode) select substring(replace(newid(),'-',''),1,30) as id,a.SubCode,a.Nyear,a.Nmonth,a.createBy,a.lastUpdateBy,a.createTime,a.lastUpdateTime,a.statusId,CurrYIni,a.CurrYIniDebitSum,CurrYIniCreditSum,CurrYIniBala,a.PeriodIni,a.PeriodDebitSum,a.PeriodCreditSum,a.PeriodDCBala,a.PeriodBala,a.CurrYIniBase,CurrYIniDebitSumBase,CurrYIniCreditSumBase,a.CurrYIniBalaBase,PeriodIniBase,PeriodDebitSumBase,a.PeriodCreditSumBase,a.PeriodDCBalaBase,a.PeriodBalaBase,a.Period,a.SCompanyID,a.CurType,CurrencyRate,a.classCode,a.RowON,a.workFlowNodeName,a.workFlowNode,a.printCount,a.checkPersons,a.finishTime,a.CheckPersont,b.classCode from tblAccBalance a,tblDepartment b where a.SubCode=(select  AccClassCode from tblCashs where id=@ValueofDB:tblCashs_id) and len(isnull(b.classCode,''))=5</sql>
		</exec>
	</sql>
</define>
<define name="Cash_Update">
	<sql type="condition">
		<condition>
			<select>SELECT 'EXISTS' AS EXIST FROM tblAccTypeInfo WHERE AccNumber = @ValueofDB:AccClassCode</select>
			<select>SELECT MAX(classCode) maxClassCode FROM tblCashs WHERE AccountType =@ValueofDB:AccountType and id&lt;&gt; @ValueofDB:id</select>
		</condition>
		<exec condition="'@SqlReturn:EXIST'=='null'||'@SqlReturn:EXIST'.length==0">
			<sql>UPDATE tblCashs SET AccClassCode='',classCode=dbo.newClassCode(@SqlReturn:maxClassCode) WHERE id= @ValueofDB:id</sql>
			<sql type="define">Cash_Update_AddOperation</sql>
		</exec>
		<exec condition="'@SqlReturn:EXIST'!='null'&amp;&amp;'@SqlReturn:EXIST'.length!=0">
			<sql type="define">Cash_Update_Operation</sql>
		</exec>
		<exec condition="true">
			<sql>UPDATE tblCashs SET isCatalog =0 WHERE NOT EXISTS(SELECT NULL FROM tblCashs a WHERE a.classCode LIKE tblCashs.classCode+'_____') AND isCatalog =1</sql>
			<sql>UPDATE tblAccTypeInfo SET isCatalog =0 WHERE NOT EXISTS(SELECT NULL FROM tblAccTypeInfo a WHERE a.classCode LIKE tblAccTypeInfo.classCode+'_____') AND isCatalog =1</sql>
		</exec>
	</sql>
</define>
<define name="Cash_Update_Operation">
	<sql type="condition"><!-- 现金银行添加下级时第一个添加的必须是本位币，因为要把原数据转入下级科目，币种必须一致-->
		<condition>
			<select>SELECT COUNT(*) AS BankAccBalanceCnt FROM tblAccBalance WHERE tblAccBalance.SubCode LIKE '1002%' AND (isnull(CurrYIniCreditSumBase,0)!=0 or isnull(CurrYIniDebitSumBase,0)!=0 or isnull(PeriodCreditSumBase,0)!=0 OR ISNULL(PeriodDebitSumBase,0)!=0 or isnull(CurrYIniBalaBase,0)!=0 OR isnull(PeriodBalaBase,0)!=0 or isnull(PeriodIniBase,0)!=0 OR ISNULL(PeriodDCBalaBase,0)!=0)</select>
			<select>SELECT COUNT(*) AS BankAccCnt FROM tblAccDetail tad WHERE tad.AccCode LIKE '1002%'</select>
			<select>SELECT COUNT(*) AS CashAccBalanceCnt FROM tblAccBalance WHERE tblAccBalance.SubCode LIKE '1001%'  AND (isnull(CurrYIniCreditSumBase,0)!=0 or isnull(CurrYIniDebitSumBase,0)!=0 or isnull(PeriodCreditSumBase,0)!=0 OR ISNULL(PeriodDebitSumBase,0)!=0 or isnull(CurrYIniBalaBase,0)!=0 OR isnull(PeriodBalaBase,0)!=0 or isnull(PeriodIniBase,0)!=0 OR ISNULL(PeriodDCBalaBase,0)!=0)</select>
			<select>SELECT COUNT(*) AS CashAccCnt FROM tblAccDetail tad WHERE tad.AccCode LIKE '1001%'</select>        
			<select>SELECT len(isnull(Currency,'')) AS CurLen, AccountType FROM tblCashs WHERE id=@ValueofDB:tblCashs_id</select>
			<select>SELECT COUNT(*) AS SubCnt FROM tblCashs WHERE AccountType IN (SELECT AccountType FROM tblCashs WHERE id=@ValueofDB:tblCashs_id) AND LEN(ISNULL(Currency,''))=0</select>
		</condition>
		<exec condition="(@SqlReturn:BankAccBalanceCnt &gt; '0' || @SqlReturn:BankAccCnt &gt; '0') &amp;&amp; '@SqlReturn:CurLen' &gt; '0' &amp;&amp; '@SqlReturn:SubCnt' == '0' &amp;&amp; '@SqlReturn:AccountType' == 'banks'">
			<error>tblCash.error.bankfirstMustBeRMB</error>
		</exec>
		<exec condition="(@SqlReturn:CashAccBalanceCnt &gt; '0' || @SqlReturn:CashAccCnt &gt; '0') &amp;&amp; '@SqlReturn:CurLen' &gt; '0' &amp;&amp; '@SqlReturn:SubCnt' == '0' &amp;&amp; '@SqlReturn:AccountType' == 'cashs'">
			<error>tblCash.error.cashfirstMustBeRMB</error>
		</exec>
	</sql>
	<sql type="condition">
		<condition>
			<select>select id,AccountName,AccNumber,CompanyName,AccClassCode,Remark,isnull(Currency,'') as NewCurrencyID from tblCashs where id=@ValueofDB:tblCashs_id</select>
			<select>select tblCashs.id as CashsID,zh_CN as AN  from tblCashs left join tbllanguage on tblCashs.Accountname=tbllanguage.id  where tblCashs.id=@ValueofDB:tblCashs_id and tblCashs.id in (select tblCashs.id from tblCashs left join tblAccBalance on tblAccBalance.SubCode=tblCashs.AccClassCode and tblAccBalance.SCompanyID=tblCashs.SCompanyID where tblAccBalance.CurrYIniBase != 0 or tblAccBalance.CurrYIniBalaBase != 0 or tblAccBalance.PeriodIniBase !=0 or tblAccBalance.PeriodBalaBase !=0 )</select>
			<select>select AccountName as AccName,AccFullname as fullID from tblCashs left join tblAccTypeInfo on tblCashs.AccClasscode=tblAccTypeInfo.AccNumber where tblCashs.id=@ValueofDB:tblCashs_id</select>
	 		<!-- 查找上一级的币种-->
			<select>select isnull(Currency,'') as CurrencyID from tblCashs where classCode=substring(@ValueofDB:tblCashs_classCode,1,len(@ValueofDB:tblCashs_classCode)-5)</select>
			<select>select case when @ValueofDB:AccountType='cashs' then 'coh' else 'dib' end as coh</select>
		</condition>
		<exec condition="'@SqlReturn:CashsID' != 'null' &amp;&amp; '@MEM:ChangeUsed'=='false'">
			<error>tblCashs.Delete.error,@SqlReturn:AN</error>
		</exec>
		<exec condition="true">
			<sql>update tblCashs set AccountName=@SqlReturn:AccName,AccNumber=@ValueofDB:tblCashs_AccNumber,CompanyName=@ValueofDB:tblCashs_CompanyName,Remark=@ValueofDB:tblCashs_Remark where id=@SqlReturn:tblCashs_id</sql>
			<sql>update tblAccBalance set createBy=@ValueofDB:tblCashs_createBy,lastUpdateBy=@ValueofDB:tblCashs_lastUpdateBy,createTime=@ValueofDB:tblCashs_createTime,lastUpdateTime=@ValueofDB:tblCashs_lastUpdateTime,CurType=@ValueofDB:tblCashs_Currency where SubCode=@SqlReturn:AccClassCode and SCompanyID=@Sess:SCompanyID</sql>
		</exec>
		<exec condition="'@ValueofDB:tblCashs_Currency'.length != 0">
			<!--如果存在会计科目表有核算外币的ID,则更新是核算外币-->
			<!-- 解析'银行存款'+多语言ID类似数据结合生成另一多语言ID-->
			<sql>delete from tbllanguage where id=@SqlReturn:fullID</sql>
			<sql type="procedure"> 
			  	{call proc_CommLan(CommEnum,@SqlReturn:coh,@SqlReturn:AccName,retCode,retVal)}
			</sql>
			<sql>update tblAccTypeInfo set AccName=@SqlReturn:AccName,createBy=@ValueofDB:tblCashs_createBy,lastUpdateBy=@ValueofDB:tblCashs_lastUpdateBy,createTime=@ValueofDB:tblCashs_createTime,lastUpdateTime=@ValueofDB:tblCashs_lastUpdateTime,Currency=@ValueofDB:tblCashs_Currency,AccFullname=@SqlReturn:retVal,IsForCur=1  where  AccNumber=@SqlReturn:AccClassCode and SCompanyID=@Sess:SCompanyID</sql>
		</exec>
		<exec condition="'@ValueofDB:tblCashs_Currency'.length == 0">	
			<!--如果存在会计科目表有核算本币的ID或者为空,则不核算外币-->
			<!-- 解析'银行存款'+多语言ID类似数据结合生成另一多语言ID-->
			<sql>delete from tbllanguage where id=@SqlReturn:fullID</sql>
			<sql type="procedure"> 
			  	{call proc_CommLan(CommEnum,@SqlReturn:coh,@SqlReturn:AccName,retCode,retVal)}
			</sql>
			<sql>update tblAccTypeInfo set AccName=@SqlReturn:AccName,createBy=@ValueofDB:tblCashs_createBy,lastUpdateBy=@ValueofDB:tblCashs_lastUpdateBy,createTime=@ValueofDB:tblCashs_createTime,lastUpdateTime=@ValueofDB:tblCashs_lastUpdateTime,Currency=@ValueofDB:tblCashs_Currency,AccFullname=@SqlReturn:retVal where AccNumber=@SqlReturn:AccClassCode and SCompanyID=@Sess:SCompanyID</sql>
		</exec>
	</sql>
	<!-- 更新现金的拼音码 通过产生的会计科目的ID-->
	<sql type="condition">
		<condition>
			<select>select id,AccClassCode from tblCashs where id=@ValueofDB:tblCashs_id</select>
			<select>select AccName as AccNamePY from tblAccTypeInfo where AccNumber=@SqlReturn:AccClassCode</select>
		</condition>
		<exec condition="'@SqlReturn:AccNamePY'!='null'">
			<sql>update tblacctypeinfo set PyCode=dbo.updateAcctypeinfo_PYM(@SqlReturn:AccNamePY,@Sess:Local)
where AccNumber=@SqlReturn:AccClassCode</sql>
		</exec>
	</sql>
</define>
<!--=================================================以上代码：现金账户================================================-->
<!-- 开帐的会计期间添加或修改 -->
<define name="tblAccPeriod_add">
	<sql type="condition"> 	
		<condition>
			<select>select count(AccPeriod) as IsBegin from tblAccPeriod where IsBegin=1 and SCompanyID=@ValueofDB:tblAccPeriod_SCompanyID</select>
			<select>select count(*) as statusid  from tblAccPeriod where scompanyID=@Sess:SCompanyID and statusid=1 </select>
			<select>select count(*) as Num,min(AccPeriod) as MinValue,(min(AccPeriod)+max(AccPeriod))*count(*)/2 as NumOne,(min(AccPeriod)*2+count(*)-1)*count(*)/2 as NumTwo from tblAccPeriod where AccYear=@ValueofDB:tblAccPeriod_AccYear</select>
		</condition>
		<!--开帐后不允许修改会计期间-->
		<exec condition="@SqlReturn:statusid==1">
			<error>tblSysSetting.statusid.error</error>
		</exec>
		<!--添加会计期间开始日期不能大于结束日期-->
		<exec condition="'@ValueofDB:tblAccPeriod_periodBegin'&gt;'@ValueofDB:tblAccPeriod_periodEnd'">
			<error>tblAccPeriod.date.error</error>
		</exec>
		<!-- 会计期间数及年月必须大于0 -->
		<exec condition="@ValueofDB:tblAccPeriod_AccYear&lt;=0||@ValueofDB:tblAccPeriod_AccPeriod&lt;=0||@ValueofDB:tblAccPeriod_AccMonth&lt;=0">
			<error>tblAccPeriod.add.error.negative</error>
		</exec>
		<!-- 某会计期间年的会计期间必须从1开始 -->
		<exec condition="@SqlReturn:Num==1&amp;&amp;@SqlReturn:MinValue!=1">
			<error>tblAccPeriod.ass.error.spacing</error>
		</exec>
		<!-- 同一会计年份的期间数不能有间隔或不连续性! -->
		<exec condition="@SqlReturn:NumOne!=@SqlReturn:NumTwo">
			<error>tblAccPeriod.ass.error.spacing</error>
		</exec>
		<!-- 开帐期间必须唯一 -->
		<exec condition="@SqlReturn:IsBegin &gt; 1">
			<error>tblAccPeriod.IsBegin.error</error>
		</exec>
	</sql>
</define>

<!-- 会计期间修改前 -->
<define name="tblAccPeriod_update_before">
	<sql type="condition">
		<condition>
			<select>select count(*) as Num,max(AccPeriod) as MaxValue,(min(AccPeriod)+max(AccPeriod))*count(*)/2 as NumOne,(min(AccPeriod)*2+count(*)-1)*count(*)/2 as NumTwo from tblAccPeriod where AccYear=(select AccYear from tblAccPeriod where id=@ValueofDB:tblAccPeriod_id)</select>
			<select>select AccPeriod as AccPeriod,AccYear as AccYear from tblAccPeriod where id=@ValueofDB:tblAccPeriod_id</select>
		</condition>
		<!-- 修改时，会计期间数不能被修改同一年份的其他期间数 -->
		<exec condition="@SqlReturn:AccYear==@ValueofDB:tblAccPeriod_AccYear&amp;&amp;@SqlReturn:AccPeriod!=@ValueofDB:tblAccPeriod_AccPeriod">
			<error>tblAccPeriod.ass.error.spacing</error>
		</exec>
		<!-- 修改某会计期间年的会计期间，之前所在的会计期间年份的期间必须连续 -->
		<exec condition="@SqlReturn:Num!=1&amp;&amp;@SqlReturn:AccPeriod!=@SqlReturn:MaxValue&amp;&amp;@SqlReturn:AccYear!=@ValueofDB:tblAccPeriod_AccYear">
			<error>tblAccPeriod.ass.error.spacing</error>
		</exec>
	</sql>
</define>
 
<!-- 删除会计期间 -->
<define name="tblAccPeriod_delete">
	<sql type="condition"> 	
		<condition>
			<select>select count(*) as statusid from tblaccperiod where  statusid='1'  and scompanyID=@Sess:SCompanyID</select>
			<select>select AccPeriod from tblAccPeriod where id=@ValueofDB:tblAccPeriod_id</select>
			<select>select max(AccPeriod) as MaxValue from tblAccPeriod where AccYear=(select AccYear from tblAccPeriod where id=@ValueofDB:tblAccPeriod_id)</select>
		</condition>
		<!--开帐后不允许删除会计期间-->
		<exec condition="@SqlReturn:statusid==1">
			<error>tblSysSetting.statusid.error</error>
		</exec>
		<!-- 不允许删除某会计年份的非最大期间 -->
		<exec condition="@SqlReturn:MaxValue!=@SqlReturn:AccPeriod">
			<error>tblAccPeriod.ass.error.spacing</error>
		</exec>
	</sql>
</define>
    <!-- 新增目标代理时-->
	<define name="CMAimAgent_message_add">
		<!--往即时消息表新增一条数据 -->
		<sql type="condition">
		<condition><select>
		select top 1 id,createBy from tblCMAimAgent order by createTime desc
		</select></condition>
		<condition><select>
		select EmpFullName from tblEmployee where id=@SqlReturn:createBy
		</select></condition>
		<exec condition="true"> 
			<sql>
			insert into tblAdvice(id,send,Title,Receive,Content,createBy,createTime,lastUpdateTime,SendName,ReceiveName) values(@SqlReturn:id,@SqlReturn:createBy,@Locale:Erp.define.AddAimSurrogate+@ValueofDB:tblCMAimAgent_UserName,@SqlReturn:createBy,@Locale:Erp.define.newAimSurrogate,'',@ValueofDB:tblCMAimAgent_createTime,@ValueofDB:tblCMAimAgent_lastUpdateTime,@ValueofDB:tblCMAimAgent_UserName,@SqlReturn:EmpFullName)
			</sql>

		 </exec>
		</sql>		
	</define>
    <!-- 删除客户时-->
	<define name="CMAimAgent_message_del">
		<sql>delete from tblAdvice where SendName=RTRIM(LTRIM(@ValueofDB:tblCMWillClient_UserName))</sql>	
	</define>

    <!-- 新增意向代理时-->
	<define name="CMWillAgent_message_add">
		<!--往即时消息表新增一条数据 -->
		<sql type="condition">
		<condition><select>
		select top 1 id,createBy from tblCMWillAgent order by createTime desc
		</select></condition>
		<condition><select>
		select EmpFullName from tblEmployee where id=@SqlReturn:createBy
		</select></condition>
		<exec condition="true"> 
			<sql>
			insert into tblAdvice(id,send,Title,Receive,Content,createBy,createTime,lastUpdateTime,SendName,ReceiveName) values(@SqlReturn:id,@SqlReturn:createBy,@Locale:Erp.define.AddWillSurrogate+@ValueofDB:tblCMWillAgent_UserName,@SqlReturn:createBy,@Locale:Erp.define.newWillSurrogate,'',@ValueofDB:tblCMWillAgent_createTime,@ValueofDB:tblCMWillAgent_lastUpdateTime,@ValueofDB:tblCMWillAgent_UserName,@SqlReturn:EmpFullName)
			</sql>

		 </exec>
		</sql>		
	</define>
    <!-- 删除意向代理时-->
	<define name="CMWillAgent_message_del">
		<sql>delete from tblAdvice where SendName=RTRIM(LTRIM(@ValueofDB:tblCMWillClient_UserName))</sql>	
	</define>

    <!-- 新增签约代理时-->
	<define name="CMCompleteAgent_message_add">
		<!--往即时消息表新增一条数据 -->
		<sql type="condition">
		<condition><select>
		select top 1 id,createBy from tblCMCompleteAgent order by createTime desc
		</select></condition>
		<condition><select>
		select EmpFullName from tblEmployee where id=@SqlReturn:createBy
		</select></condition>
		<exec condition="true"> 
			<sql>
			insert into tblAdvice(id,send,Title,Receive,Content,createBy,createTime,lastUpdateTime,SendName,ReceiveName) values(@SqlReturn:id,@SqlReturn:createBy,@Locale:Erp.define.AddDealSurrogate+@ValueofDB:tblCMCompleteAgent_UserName,@SqlReturn:createBy,@Locale:Erp.define.newDealSurrogate,'',@ValueofDB:tblCMCompleteAgent_createTime,@ValueofDB:tblCMCompleteAgent_lastUpdateTime,@ValueofDB:tblCMCompleteAgent_UserName,@SqlReturn:EmpFullName)
			</sql>

		 </exec>
		</sql>		
	</define>
    <!-- 删除签约代理时-->
	<define name="CMCompleteAgent_message_del">
		<sql>delete from tblAdvice where SendName=RTRIM(LTRIM(@ValueofDB:tblCMCompleteAgent_UserName))</sql>	
	</define>
    <!-- 新增放弃代理时-->
	<define name="CMAbandonAgent_message_add">
		<!--往即时消息表新增一条数据 -->
		<sql type="condition">
		<condition><select>
		select top 1 id,createBy from tblCMAbandonAgent order by createTime desc
		</select></condition>
		<condition><select>
		select EmpFullName from tblEmployee where id=@SqlReturn:createBy
		</select></condition>
		<exec condition="true"> 
			<sql>
			insert into tblAdvice(id,send,Title,Receive,Content,createBy,createTime,lastUpdateTime,SendName,ReceiveName) values(@SqlReturn:id,@SqlReturn:createBy,@Locale:Erp.define.AddGiveupSurrogate+@ValueofDB:tblCMAbandonAgent_UserName,@SqlReturn:createBy,@Locale:Erp.define.newGiveupSurrogate,'',@ValueofDB:tblCMAbandonAgent_createTime,@ValueofDB:tblCMAbandonAgent_lastUpdateTime,@ValueofDB:tblCMAbandonAgent_UserName,@SqlReturn:EmpFullName)
			</sql>

		 </exec>
		</sql>		
	</define>
    <!-- 删除放弃代理时-->
	<define name="CMAbandonAgent_message_del">
		<sql>delete from tblAdvice where SendName=RTRIM(LTRIM(@ValueofDB:tblCMAbandonAgent_UserName))</sql>	
	</define>	
	<!-- 以下新增分支机构前判断是否跟默认分支机构平级-->
	<define name="SunCompanys_add_before">
		<sql type="condition">
		<exec condition="'@ValueofDB:tblSunCompanys_classCode'.length &lt;=5">
			<error>tblSunCompanys.classCode.error</error>
		</exec>
		</sql>
	</define>
	<!-- 以上新增分支机构前判断是否跟默认分支机构平级-->
	<!--以下新增分支机构时执行的操作-->
	<define name="SunCompanys_add">		
		<sql type="condition">
		<condition>		
		<select>select isSunCmpShare as comShare from tblDBTableInfo where tableName='tblCompany'</select>
		<select>select isSunCmpShare as accShare from tblDBTableInfo where tableName='tblAccBalance'</select>
		<select>select id as kid from tblDBEnumeration where enumname='AllSunCompany'
		</select>
		</condition>	
		<exec condition="@MEM:sunCompany==true"><!--启用分支机构，库存总表中设置数据，分仓库存表中设置期初数据-->
		<sql type="procedure">
		{call proc_OCgoodsIniInsertByCom(@ValueofDB:tblSunCompanys_classCode,@ValueofDB:tblGoods_createBy,@ValueofDB:tblGoods_createTime,@retCode,@retVal)}
		</sql>
		<!--分支机构增加复制会计期间-->
		<sql type="procedure">
		{call proc_copySunCompanyData(@ValueofDB:tblSunCompanys_classCode,@ValueofDB:tblSunCompanys_sunCompanyName,@retCode,@retVal)}
		</sql>
		<!--增加枚举表里面的分支机构名称及枚举值-->
		<sql>
insert tblDBEnumerationItem
([id],enumValue,enumId,SCompanyID,classCode,RowON,languageId)
values
(@ValueofDB:tblSunCompanys_id,@ValueofDB:tblSunCompanys_classCode,@SqlReturn:kid,NULL,NULL,NULL,@ValueofDB:tblSunCompanys_sunCompanyName)
		</sql>
		</exec>	
		<exec condition="@MEM:sunCompany==true &amp;&amp; '@SqlReturn:comShare'==1">
			
			<sql type="procedure"><!--往来汇总表此分支机构新增数据-->
	 {call proc_iterateInsert(@ValueofDB:tblSunCompanys_id,tblCompany,tblCompanyTotal,
CompanyCode=tblCompany_classCode@SPFieldLink:ReceiveBegin=0@SPFieldLink:ReceiveTotalDebit=0@SPFieldLink:ReceiveTotalLend=0@SPFieldLink:ReceiveTotalRemain=0@SPFieldLink:PayBegin=0@SPFieldLink:PayTotalDebit=0@SPFieldLink:PayTotalLend=0@SPFieldLink:PayTotalRemain=0@SPFieldLink:PreReceiveBegin=0@SPFieldLink:PreReceiveTotalDebit=0@SPFieldLink:PreReceiveTotalLend=0@SPFieldLink:PreReceiveTotalRemain=0@SPFieldLink:PrePayBegin=0@SPFieldLink:PrePayTotalDebit=0@SPFieldLink:PrePayTotalLend=0@SPFieldLink:PrePayTotalRemain=0@SPFieldLink:YReceiveTotalDebit=0@SPFieldLink:YReceiveTotalLend=0@SPFieldLink:YPayTotalDebit=0@SPFieldLink:YPayTotalLend=0@SPFieldLink:YPreReceiveTotalDebit=0@SPFieldLink:YPreReceiveTotalLend=0@SPFieldLink:YPrePayTotalDebit=0@SPFieldLink:YPrePayTotalLend=0@SPFieldLink:createBy=@ValueofDB:tblCompany_createBy@SPFieldLink:lastUpdateBy=@ValueofDB:tblCompany_lastUpdateBy@SPFieldLink:createTime=@ValueofDB:tblCompany_createTime@SPFieldLink:lastUpdateTime=@ValueofDB:tblCompany_lastUpdateTime@SPFieldLink:statusId=0@SPFieldLink:period=-1@SPFieldLink:periodYear=-1@SPFieldLink:periodMonth=-1@SPFieldLink:SCompanyID=@ValueofDB:tblSunCompanys_classCode,@retCode,@retVal)}
			</sql>
		</exec>   
		<exec condition="@MEM:sunCompany==true &amp;&amp; '@SqlReturn:accShare'==1">			
			<sql type="procedure"><!--科目余额表此分支机构新增数据-->
	 {call proc_iterateInsert(@ValueofDB:tblSunCompanys_id,tblAccTypeInfo,tblAccBalance,
SubCode=tblAccTypeInfo_AccNumber@SPFieldLink:CurrYIniBase=0@SPFieldLink:CurrYIniDebitSumBase=0@SPFieldLink:CurrYIniCreditSumBase=0@SPFieldLink:CurrYIniBalaBase=0@SPFieldLink:PeriodIniBase=0@SPFieldLink:PeriodDebitSumBase=0@SPFieldLink:PeriodCreditSumBase=0@SPFieldLink:PeriodDCBalaBase=0@SPFieldLink:PeriodBalaBase=0@SPFieldLink:CurType=0@SPFieldLink:CurrYIni=0@SPFieldLink:CurrYIniDebitSum=0@SPFieldLink:CurrYIniCreditSum=0@SPFieldLink:CurrYIniBala=0@SPFieldLink:PeriodIni=0@SPFieldLink:PeriodDebitSum=0@SPFieldLink:PeriodCreditSum=0@SPFieldLink:PeriodDCBala=0@SPFieldLink:PeriodBala=0@SPFieldLink:createBy=@ValueofDB:tblAccTypeInfo_createBy@SPFieldLink:lastUpdateBy=@ValueofDB:tblAccTypeInfo_lastUpdateBy@SPFieldLink:createTime=@ValueofDB:tblAccTypeInfo_createTime@SPFieldLink:lastUpdateTime=@ValueofDB:tblAccTypeInfo_lastUpdateTime@SPFieldLink:statusId=0@SPFieldLink:period=-1@SPFieldLink:Nyear=-1@SPFieldLink:Nmonth=-1@SPFieldLink:SCompanyID=@ValueofDB:tblSunCompanys_classCode,@retCode,@retVal)}
			</sql>
		</exec>
	</sql>
	</define>
	<!--以上新增分支机构时执行的操作-->
	<!-- 以下新增分支机构时同时新增该分支机构的管理员角色操作-->
	<define name="SunCompanys_add_addRole">
		<sql type="condition">
		<condition><select>
		select top 1 id,createBy,sunCompanyName,classCode from tblSunCompanys order by createTime desc
		</select></condition>
		<exec condition="true"> 
			<sql>
			insert into tblRole(id,createBy,createTime,lastUpdateBy,lastUpdateTime,roleDesc,roleName,SCompanyID) values(@SqlReturn:id,@SqlReturn:createBy,@ValueofDB:tblSunCompanys_createTime,@ValueofDB:tblSunCompanys_lastUpdateBy,@ValueofDB:tblSunCompanys_lastUpdateTime,@SqlReturn:sunCompanyName+@Locale:Erp.define.admin,@SqlReturn:sunCompanyName+@Locale:Erp.define.admin,@SqlReturn:classCode)
			</sql>
		 </exec>
		</sql>		
	</define>
	<!-- 以上新增分支机构时同时新增该分支机构的管理员角色操作-->
		<!--以下删除分支机构时执行的操作-->
    <define name="SunCompanys_del_before">
		<sql type="condition"> 	
			<condition>
			<select>select id,sunCompanyName from tblSunCompanys where id=@ValueofDB:tblSunCompanys_id</select>
			</condition>
		<exec condition="'@SqlReturn:id'=='1'">
			<error>tblSunCompanys.id.error</error>
		</exec>
	</sql>
		<sql type="condition">
			<condition>
			<select>select count(*) as num from tblEmployee where tblEmployee.SCompanyID=(select s.classCode from tblSunCompanys s where id=@ValueofDB:tblSunCompanys_id)</select>
			</condition>
		<exec condition="'@SqlReturn:num'!='0'">
			<error>tblSunCompanys.hasEmployee.error</error>
		</exec>
		</sql>
		<sql type="condition">
			<condition>
				<select>select classCode from tblSunCompanys where tblSunCompanys.id=@ValueofDB:tblSunCompanys_id</select>
				<select>select id from tblSunCompanys where id=@ValueofDB:tblSunCompanys_id</select>
			</condition>
			<exec condition="true">
				<sql type="procedure">
						{call proc_delSunCompanyCopyData(@SqlReturn:classCode,@retCode,@retVal)}
				</sql>
								<!--删除枚举表里面的分支机构名称及枚举值-->
		<sql>
		delete from tblDBEnumerationItem where id=@SqlReturn:id
		</sql>
		<sql>
		delete from tblDBEnumerationItemDisplay where referId=@SqlReturn:id
		</sql>
			</exec>
		</sql>
	</define>
	<!--以上删除分支机构时执行的操作-->
<!--=======================================================币种类型=======================================================-->
<define name="tblCurrency_add">
	<sql type="condition"> 	
		<condition><select>select count(CurrencyName) as CName from tblCurrency where IsBaseCurrency=1</select></condition>
		<exec condition="@SqlReturn:CName &gt; 1 &amp;&amp;'@Sess:BillOper'!='update'">
			<error>tblCurrency.IsBeginCurrency.error</error>
		</exec>
		<exec condition="@SqlReturn:CName &gt; 1 &amp;&amp; @ValueofDB:IsBaseCurrency==1 &amp;&amp;'@Sess:BillOper'=='update'">
			<sql>update tblCurrency set isBaseCurrency=2 where id!=@ValueofDB:tblCurrency_id</sql>
			<sql>update tblCurrency set isBaseCurrency=1 where id =@ValueofDB:tblCurrency_id</sql>
		</exec>
	</sql>
</define>

<define name="tblCurrency_Delete">
	<sql type="condition"> 	
		<condition>
			<select>select id,CurrencyName as CName from tblCurrency where IsBaseCurrency=1 and id=@ValueofDB:tblCurrency_id</select>
			<select>select count(id) as idNum from tblCurrency where IsBaseCurrency=1 </select>
			<select>select count(IsBaseCurrency) as baseNum from tblCurrency where id=@ValueofDB:tblCurrency_id and isBaseCurrency=1 and @ValueofDB:IsBaseCurrency=2 </select>
			<select>select Currency as CurrencyID from tblSetExchange where Currency=@ValueofDB:tblCurrency_id union all select Currency from tblCashs where Currency=@ValueofDB:tblCurrency_id union all select Currency from tblBanks where Currency=@ValueofDB:tblCurrency_id</select>
		</condition>
		<!--必须保留至少一个本位币-->
		<exec condition="'@SqlReturn:idNum'=='1' &amp;&amp; '@SqlReturn:baseNum'=='1' &amp;&amp; '@Sess:BillOper'=='update'">
			<error>tblCurrency.atleastoneCurrency.error</error>
		</exec>
		<!--币种设置不能修改-->
		<exec condition="'@SqlReturn:id' !='null'&amp;&amp;'@Sess:BillOper'!='update'">
			<error>tblCurrency.CurrencyName.error,@SqlReturn:CName</error>
		</exec>
		<!--删除单据时存在关联单据提示-->
		<exec condition="'@SqlReturn:CurrencyID' != 'null'">	 					
			<error>tblCurrency.CurrencyID.error</error>
		</exec>
	</sql>
</define>
<!--==================================================以上代码：币种类型=======================================================-->


<!--==========================================================汇率设置=========================================================-->
<define name="tblSetExchange_add">
	<sql type="condition"> 	
		<condition>
			<select>select statusId from tblAccPeriod where AccYear=@ValueofDB:tblSetExchange_PeriodYear and AccPeriod=@ValueofDB:tblSetExchange_Period  and SCompanyID=@ValueofDB:tblSetExchange_SCompanyID</select>
			<select>select count(Currency) as idNum,Period as Perd,CurrencyName as Cname from tblSetExchange where Currency=@ValueofDB:tblSetExchange_Currency and Period=@ValueofDB:tblSetExchange_Period and PeriodYear=@ValueofDB:tblSetExchange_PeriodYear and SCompanyID= @ValueofDB:tblSetExchange_SCompanyID group by PeriodYear,Period,CurrencyName</select>
		</condition>
		<exec condition="@ValueofDB:tblSetExchange_RecordExchange&lt;=0">
			<error>tblSetExchange.Recordingrate.error</error>
		</exec>
		<exec condition="@ValueofDB:tblSetExchange_AdjustExchange&lt;0">
			<error>tblSetExchange.AdjustedExchangerate.error</error>
		</exec>
		<exec condition="@SqlReturn:statusId == 2">
			<error>tblSetExchange.AdjustExchange.error</error>
		</exec>
		<exec condition="@SqlReturn:idNum &gt;1">
			<error>tblSetExchange.CurrencyID.error,@SqlReturn:Perd,@SqlReturn:Cname</error>
		</exec>
	</sql>
</define>
	
<define name="tblSetExchange_Deletebefore">
	<sql type="condition"> 	
		<condition><select>select tblAccDetail.Currency,tblSetExchange.CurrencyName,tblAccDetail.CurrencyRate from tblAccDetail inner join tblSetExchange on tblSetExchange.Currency=tblAccDetail.Currency and tblSetExchange.id=@ValueofDB:tblSetExchange_id and tblAccDetail.SCompanyID= @ValueofDB:tblSetExchange_SCompanyID and tblSetExchange.SCompanyID= @ValueofDB:tblSetExchange_SCompanyID</select></condition>
		<exec condition="'@SqlReturn:Currency' != 'null'">
			<error>tblSetExchange.Deletebefore.error,@SqlReturn:CurrencyName</error>
		</exec>
	</sql>
</define>
		
<define name="tblSetExchange_Delete">
	<sql type="condition"> 	
		<condition><select>select CurrencyName from tblSetExchange a,tblAccPeriod b where a.id=@ValueofDB:tblSetExchange_id and a.period=b.AccPeriod and a.periodYear=b.AccYear and b.statusId=2</select></condition>
		<exec condition="'@SqlReturn:CurrencyName' != 'null'&amp;&amp;'@SqlReturn:CurrencyName'.length&gt;0">
			<error>tblSetExchange.AdjustExchange.error</error>
		</exec>
	</sql>
</define>
<!--=======================================================以上代码：汇率设置=========================================================-->

<!--=======================================================职员管理=========================================================-->
<define name="tblEmployee_add">
	<sql type="condition"> 	
		<condition>
			<select>select count(EmpNumber) as Empnum from tblEmployee where EmpNumber=@ValueofDB:tblEmployee_EmpNumber and SCompanyID=@Sess:SCompanyID</select>
			<select>select 'Exist' as EstablishErrorExist from tblEmployee as A outer apply (select DeptEstablish from tblDepartment where classCode=A.DepartmentCode) as B outer apply (select count(*) as Counts from tblEmployee where DepartmentCode=A.DepartmentCode) as C where id=@ValueofDB:tblEmployee_id and isNULL(B.DeptEstablish,0)&lt;isNULL(C.Counts,0) and isNULL(B.DeptEstablish,0)!=0</select>
			<select>select 'Exist' as ParentClassExistData from tblEmployee where DepartmentCode in (select classCode from tblDepartment where @ValueofDB:tblDepartment_classCode like classCode+'%')</select>
		</condition>
		<exec condition="@SqlReturn:Empnum &gt; 1">
				<error>tblEmployee.EmpNumber.error</error>
			</exec>
			<exec condition="'@ValueofDB:tblEmployee_SCompanyID'.length=='0' &amp;&amp; @MEM:sunCompany==true">
				<error>tblEmployeeadd.SCompanyID.error</error>
			</exec>
			<!-- 已被职员引用的部门不能添加下级 -->
			<exec condition="'@SqlReturn:ParentClassExistData'=='Exist'">
				<error>tblDepartment.add.Parent.error</error>
			</exec>
			<!-- 选择部门的编制人数已经超出，提示：是否继续保存 -->
			<exec condition="'@SqlReturn:EstablishErrorExist'=='Exist'">
				<confirm yesDefine="Employee_add_update" noDefine="">tblEmployee.add.alert.Establish</confirm>
			</exec>
		</sql>
	</define>
	<!--以上增加职员执行的操作-->
	
	<define name="Employee_add_update">
	</define>
	
<!--修改职员信息-->
    <define name="tblEmployee_Update">
		<sql type="condition"> 	
			<condition>
			<select>select tblEmployee.EmpFullName as FullName from tblEmployee where (tblEmployee.id in (select EmployeeID from tblAccDetail) or tblEmployee.id in (select EmployeeID from tblAccMain) or tblEmployee.id in (select EmployeeID from tblBuyInStock) or tblEmployee.id in (select EmployeeID from tblBuyOutStock) or tblEmployee.id in (select EmployeeID from tblSalesOutStock)
or tblEmployee.id in (select EmployeeID from tblSalesReturnStock) or tblEmployee.id in (select EmployeeID from tblSalesOrder)
or tblEmployee.id in (select EmployeeID from tblCheck) or tblEmployee.id in (select EmployeeID from tblAdjustPrice) or tblEmployee.id in (select EmployeeID from tblBuyOrder) or tblEmployee.id in (select EmployeeID from tblAllot) or tblEmployee.id in (select EmployeeID from tblAllotChange) or tblEmployee.id in (select EmployeeID from tblOtherOut)
or tblEmployee.id in (select EmployeeID from tblOtherIn) or tblEmployee.id in (select EmployeeID from tblTransferSale1) or tblEmployee.id in (select EmployeeID from tblTransferSale2) or tblEmployee.id in (select EmployeeID from tblTransferSale3) or tblEmployee.id in (select EmployeeID from tblTransferSale4) or tblEmployee.id in (select EmployeeID from tblExpensed) or tblEmployee.id in (select EmployeeID from tblIncome) or tblEmployee.id in (select EmployeeID from tblUserDefTransAcc) or tblEmployee.id in (select EmployeeID from tblUserTransAcc) or tblEmployee.id in (select EmployeeID from tblCurrencyExchangeBuy) or tblEmployee.id in (select EmployeeID from tblCurrencyExchangeSale) or tblEmployee.id in (select EmployeeID from tblAdjustPrice) or tblEmployee.id in (select EmployeeID from tblCurrencyExchange) or tblEmployee.id in (select EmployeeID from tblCurrencyExchangeB) or tblEmployee.id in (select EmployeeID from tblBuyAskPrice)) and tblEmployee.id=@ValueofDB:tblEmployee_id</select>

				<select>select id,EmpFullName,EmpName,GraduateID,TitleID,TopCost,TopCredit,Email,createBy,lastUpdateBy,createTime,lastUpdateTime,DepartmentCode,BornDate,EmployDate,EmpNumber,empCode,sysName,password,openFlag,defSys,Remark,Attachment,ManagerITel,Tel,Mobile,SCompanyID,classCode,RowON from tblEmployee where id=@ValueofDB:tblEmployee_id</select>
				<select>select 'Exist' as EstablishErrorExist from (select @ValueofDB:tblEmployee_DepartmentCode as DepartmentCode) as A outer apply (select DeptEstablish from tblDepartment where classCode=A.DepartmentCode) as B outer apply (select count(*) as Counts from tblEmployee where DepartmentCode=A.DepartmentCode) as C where isNULL(B.DeptEstablish,0)&lt;isNULL(C.Counts,0)+1 and isNULL(B.DeptEstablish,0)!=0</select>
			</condition>
			<!-- admin的名称和编号不能被修改 -->
			<exec condition="'@SqlReturn:id'=='1'&amp;&amp;('@SqlReturn:EmpFullName'!='@ValueofDB:tblEmployee_EmpFullName'||'@SqlReturn:EmpNumber'!='@ValueofDB:tblEmployee_EmpNumber'||'@SqlReturn:EmpName'!='@ValueofDB:tblEmployee_EmpName')">
				<error>tblEmployee.id.error</error>
			</exec>
			<!--如果检测到该职员已经用来做过单据，则相关字段如编号、全称不允许修改-->
	<!--系统参数里面设置不允许修改-->
			<exec condition="(('@SqlReturn:FullName' != 'null' &amp;&amp; '@SqlReturn:FullName'.length != 0) &amp;&amp; ('@SqlReturn:EmpFullName' != '@ValueofDB:tblEmployee_EmpFullName' || '@SqlReturn:EmpNumber' != '@ValueofDB:tblEmployee_EmpNumber')) &amp;&amp; '@MEM:ChangeUsed'=='false'">
				<error>tblEmployee.Update.error</error>
			</exec>
			<!-- 选择部门的编制人数已经超出，提示：是否继续保存 -->
			<exec condition="'@ValueofDB:tblEmployee_DepartmentCode'!='@SqlReturn:DepartmentCode '&amp;&amp;'@SqlReturn:EstablishErrorExist'=='Exist'">
				<confirm yesDefine="Employee_add_update" noDefine="">tblEmployee.add.alert.Establish</confirm>
			</exec>
		</sql>
	</define>
	<define name="tblEmployee_Update_After">
		<sql type="condition">
			<exec condition=" '@Sess:BillOper'=='update'"><!-- 改名后，自动修改核算科目的名称 -->
			<sql type="procedure">{call UpdateAccName(EmployeeID,@ValueofDB:id,errorCode,errorVal)}</sql>
		</exec>
		</sql>
	</define>
<!-- ===========反审核时判断，是否已经被使用============-->
<define name="tblEmployee_Delete_One">
	<sql type="define">tblEmployee_BaseInfoUse_Validate</sql>
</define>

<define name="tblEmployee_BaseInfoUse_Validate">
	<sql type="condition">
		<condition><select>select id,EmpNumber as Number,EmpFullName as FullName from tblEmployee where id=@ValueofDB:id</select></condition>
		<exec condition="true">
			<sql type="procedure">{call proc_BaseInfoUse(EmployeeID,@SqlReturn:id,@Sess:Local,errorCode,errorVal)}</sql>
		</exec>		
		<exec condition="'@ProcReturn:errorCode'=='-2222'"> 					
			<error>BaseInfo.delete.error,@SqlReturn:Number,@SqlReturn:FullName,@ProcReturn:errorVal</error>
		</exec>
	</sql>
</define>		
		<!--以下删除职员前执行的操作-->
    <define name="Employee_del_before">
		<sql type="condition"> 	
			<condition>
			<select>select id from tblEmployee where id=@ValueofDB:tblEmployee_id</select>
<select>select tblEmployee.EmpFullName as FullName from tblEmployee where (tblEmployee.id in (select EmployeeID from tblAccDetail) or tblEmployee.id in (select EmployeeID from tblAccMain) or tblEmployee.id in (select EmployeeID from tblBuyInStock) or tblEmployee.id in (select EmployeeID from tblBuyOutStock) or tblEmployee.id in (select EmployeeID from tblSalesOutStock)
or tblEmployee.id in (select EmployeeID from tblSalesReturnStock) or tblEmployee.id in (select EmployeeID from tblSalesInvoice) or tblEmployee.id in (select EmployeeID from tblSalesOrder)
or tblEmployee.id in (select EmployeeID from tblCheck) or tblEmployee.id in (select EmployeeID from tblAdjustPrice) or tblEmployee.id in (select EmployeeID from tblBuyOrder) or tblEmployee.id in (select EmployeeID from tblReturnReceive) or tblEmployee.id in (select EmployeeID from tblAllot) or tblEmployee.id in (select EmployeeID from tblAllotChange) or tblEmployee.id in (select EmployeeID from tblOtherOut)
or tblEmployee.id in (select EmployeeID from tblOtherIn) or tblEmployee.id in (select EmployeeID from tblTransferSale1) or tblEmployee.id in (select EmployeeID from tblTransferSale2) or tblEmployee.id in (select EmployeeID from tblTransferSale3) or tblEmployee.id in (select EmployeeID from tblTransferSale4) or tblEmployee.id in (select EmployeeID from tblExpensed) or tblEmployee.id in (select EmployeeID from tblIncome) or tblEmployee.id in (select EmployeeID from tblUserDefTransAcc) or tblEmployee.id in (select EmployeeID from tblUserTransAcc) or tblEmployee.id in (select EmployeeID from tblCurrencyExchangeBuy) or tblEmployee.id in (select EmployeeID from tblCurrencyExchangeSale) or tblEmployee.id in (select EmployeeID from tblAdjustPrice) or tblEmployee.id in (select EmployeeID from tblCurrencyExchange) or tblEmployee.id in (select EmployeeID from tblCurrencyExchangeB) or tblEmployee.id in (select EmployeeID from tblBuyAskPrice) or tblEmployee.id in (select createBy from CRMTaskAssign) or tblEmployee.id in (select userId from CRMTaskAssign)) and tblEmployee.id=@ValueofDB:tblEmployee_id</select>
			</condition>
			
		<exec condition="'@SqlReturn:id'=='1'">
		<error>tblEmployee.id.error.delete</error>
		</exec>
		
		<exec condition="('@SqlReturn:FullName' != 'null' &amp;&amp; '@SqlReturn:FullName'.length != 0)">
		<error>tblEmployee.Delete.error</error>
		</exec>
		<exec condition="true">
		<!--同步删除通讯录-->
		<sql>delete from OACommunicationNoteInfo where name=(select EmpFullName from tblEmployee where id=@ValueofDB:tblEmployee_id)</sql>
		<!--用户的角色记录-->
		<sql>delete tblUserSunCompany where userid=@ValueofDB:tblEmployee_id</sql>
		</exec>
		</sql>
	</define>
	
	<!--以上删除职员前执行的操作-->


<!--================================================================单据科目设置=================================================-->
<define name="tblBillAccSetup_Add">
	<sql type="condition">
		<condition><select>select count(SubCode) AS RepeatNum from tblBillAccSetup where SubCode IN (select SubCode from tblBillAccSetup where id=@ValueofDB:tblBillAccSetup_id) and  MainType IN (select MainType from tblBillAccSetup where id=@ValueofDB:tblBillAccSetup_id)</select></condition>
		<exec condition="'@SqlReturn:RepeatNum' &gt; 1">
			<error>tblBillAccSetup.Delete.repeatnames.error</error>
		</exec>
	</sql>
</define>

<define name="tblBillAccSetup_Delete">
	<sql type="condition">
		<condition>
			<select>SELECT COUNT(tt.SubCode) AS UseNum FROM (	SELECT SubCode FROM tblAccAdjust  WHERE 'tblAccAdjustMore' IN (SELECT MainType FROM tblBillAccSetup WHERE  id = @ValueofDB:tblBillAccSetup_id) AND SubCode IN (SELECT SubCode FROM tblBillAccSetup WHERE id = @ValueofDB:tblBillAccSetup_id) UNION ALL SELECT SubCode FROM tblAccAdjust  WHERE 'tblAccAdjustLess' IN (SELECT MainType FROM tblBillAccSetup WHERE  id = @ValueofDB:tblBillAccSetup_id) AND SubCode IN (SELECT SubCode FROM tblBillAccSetup WHERE id = @ValueofDB:tblBillAccSetup_id)	UNION ALL SELECT SubCode FROM tblPayAdjust  WHERE 'tblPayAdjustMore' IN (SELECT MainType FROM tblBillAccSetup WHERE  id = @ValueofDB:tblBillAccSetup_id) AND SubCode IN (SELECT SubCode FROM tblBillAccSetup WHERE id = @ValueofDB:tblBillAccSetup_id) UNION ALL SELECT SubCode FROM tblPayAdjust  WHERE 'tblPayAdjustLess' IN (SELECT MainType FROM tblBillAccSetup WHERE  id = @ValueofDB:tblBillAccSetup_id) AND SubCode IN (SELECT SubCode FROM tblBillAccSetup WHERE id = @ValueofDB:tblBillAccSetup_id)	UNION ALL SELECT SubCode FROM tblAdjustPrice  WHERE 'tblAdjustPrice' IN (SELECT MainType FROM tblBillAccSetup WHERE  id = @ValueofDB:tblBillAccSetup_id) AND SubCode IN (SELECT SubCode FROM tblBillAccSetup WHERE id = @ValueofDB:tblBillAccSetup_id)	UNION ALL SELECT SubCode FROM tblAllotChange  WHERE 'tblAllotChange' IN (SELECT MainType FROM tblBillAccSetup WHERE  id = @ValueofDB:tblBillAccSetup_id) AND SubCode IN (SELECT SubCode FROM tblBillAccSetup WHERE id = @ValueofDB:tblBillAccSetup_id) UNION ALL SELECT SubCode FROM tblCheck  WHERE 'tblCheck' IN (SELECT MainType FROM tblBillAccSetup WHERE  id = @ValueofDB:tblBillAccSetup_id) AND SubCode IN (SELECT SubCode FROM tblBillAccSetup WHERE id = @ValueofDB:tblBillAccSetup_id) UNION ALL SELECT SubCode FROM tblGoodsAssemblySplit  WHERE 'tblGoodsAssemblySplit' IN (SELECT MainType FROM tblBillAccSetup WHERE  id = @ValueofDB:tblBillAccSetup_id) AND SubCode IN (SELECT SubCode FROM tblBillAccSetup WHERE id = @ValueofDB:tblBillAccSetup_id)	UNION ALL SELECT SubCode FROM tblExpenseDet  WHERE 'tblExpenseDet' IN (SELECT MainType FROM tblBillAccSetup WHERE  id = @ValueofDB:tblBillAccSetup_id) AND SubCode IN (SELECT SubCode FROM tblBillAccSetup WHERE id = @ValueofDB:tblBillAccSetup_id)	UNION ALL SELECT SubCode FROM tblIncomeDetl  WHERE 'tblIncomeDetl' IN (SELECT MainType FROM tblBillAccSetup WHERE  id = @ValueofDB:tblBillAccSetup_id) AND SubCode IN (SELECT SubCode FROM tblBillAccSetup WHERE id = @ValueofDB:tblBillAccSetup_id)	UNION ALL SELECT SubCode FROM tblOtherIn  WHERE 'tblOtherIn' IN (SELECT MainType FROM tblBillAccSetup WHERE  id = @ValueofDB:tblBillAccSetup_id) AND SubCode IN (SELECT SubCode FROM tblBillAccSetup WHERE id = @ValueofDB:tblBillAccSetup_id)	UNION ALL SELECT SubCode FROM tblOtherOut  WHERE 'tblOtherOut' IN (SELECT MainType FROM tblBillAccSetup WHERE  id = @ValueofDB:tblBillAccSetup_id) AND SubCode IN (SELECT SubCode FROM tblBillAccSetup WHERE id = @ValueofDB:tblBillAccSetup_id)) tt</select>
			<select> select tblBillAccSetup.MainType oldMainType,tblBillAccSetup.SubCode oldSubCode from tblBillAccSetup where id= @ValueofDB:id </select>
		</condition>
		<exec condition=" '@Sess:BillOper'!='update' &amp;&amp; '@SqlReturn:UseNum' &gt; 0">
		    <error>tblBillAccSetup.Delete.usedbytable.error</error>
		</exec>
		<exec condition=" '@Sess:BillOper'=='update' &amp;&amp; '@SqlReturn:UseNum' &gt; 0 &amp;&amp; ( '@ValueofDB:MainType' != '@SqlReturn:oldMainType' ||  '@ValueofDB:SubCode' != '@SqlReturn:oldSubCode' ) ">
		    <error>当前单据科目已被业务单据引用，不允许修改业务类型和科目名称</error>
		</exec>
	</sql>
</define>
<!--==========================================================以上代码：单据科目设置=================================================-->

<!--审核人设置-->
	<define name="AuditingSetting_add">
		<!--往即时消息表新增一条数据 -->
		<sql type="condition">
		<condition><select>
		select top 1 id,createBy from AuditingSetting order by createTime desc
		</select>
		</condition>
		
		<exec condition="true"> 
			<sql>

insert into AuditingSetting(id,classCode,TableName,AssessorID,ReturnAssessorID,Assessor,ReturnAssessor,createBy,lastUpdateBy,createTime,lastUpdateTime,statusId,SCompanyID) values(@ValueofDB:id,@ValueofDB:classCode,@ValueofDB:AuditingSetting_TableName,@ValueofDB:AuditingSetting_AssessorID,@ValueofDB:AuditingSetting_ReturnAssessorID,@ValueofDB:AuditingSetting_Assessor,@ValueofDB:AuditingSetting_ReturnAssessor,@ValueofDB:reateBy,@ValueofDB:lastUpdateBy,@ValueofDB:createTime,@ValueofDB:lastUpdateTime,0,@ValueofDB:SCompanyID)
			</sql>

		 </exec>
		</sql>		
	</define>

<!--END审核人设置-->

<!--工作流测试-->
<!--条件-->
	 <define name="testCondition1">
	 	<sql type="condition">	
			<condition>
				<select>
					select qty,id from tblBOM where id=@ValueofDB:id
				</select>

			</condition>
		 <exec condition="@SqlReturn:qty &gt;0 &amp;&amp; @SqlReturn:qty &lt;1000">				
		</exec>
		</sql> 

	 </define>	
	 
	 <define name="testCondition2">
	 	<sql type="condition">	
			<condition>
				<select>
					select qty from tblBOM where id=@ValueofDB:id
				</select>
			</condition>
			<exec condition="@SqlReturn:qty == 0">						
			</exec>
		</sql> 

	 </define>	
	 <define name="testCondition3">
	 	<sql type="condition">	
			<condition>
				<select>
					select qty,id from tblBOM where id=@ValueofDB:id
				</select>
			</condition>
		<exec condition="@SqlReturn:qty &gt;1000">						
		</exec>	
		</sql> 

	 </define>	 		 
<!--end条件-->
<!--执行动作-->
	 
	<define name="GG_add2">
		<sql type="condition">
		<condition>
			<select>
			select id,classCode,qty from tblBOM where id=@ValueofDB:id
			</select>			
		</condition>
		
		<exec condition="true"> 
			<sql>
		insert into GG (id,classCode,NAME,AGE,createBy,lastUpdateBy,createTime,lastUpdateTime,statusId,SCompanyID)
		values('00002',@SqlReturn:id,38,50,'1','1',getDate(),getDate(),0,'00001')
			</sql>
		 </exec>		 				
		</sql>		
	</define>
	 
	 <define name="GG_add4">	 
		<sql type="condition">
		<condition>
			<select>
			select id,classCode from tblBOM where id=@ValueofDB:id
			</select>	
		</condition>
		<exec condition="true"> 
			<sql>
		insert into GG (id,classCode,NAME,AGE,createBy,lastUpdateBy,createTime,lastUpdateTime,statusId,SCompanyID)
		values('00004',@SqlReturn:id,38,50,'1','1',getDate(),getDate(),0,'00001')
			</sql>			
		 </exec>	 
		</sql>	
	 </define>	
	 
	 <define name="GG_add5">	 
		<sql type="condition">
		<condition>
			<select>
			select id,classCode from tblBOM where id=@ValueofDB:id
			</select>
		</condition>
		<exec condition="true"> 
			<sql>
		insert into GG (id,classCode,NAME,AGE,createBy,lastUpdateBy,createTime,lastUpdateTime,statusId,SCompanyID)
		values('00005',@SqlReturn:id,38,50,'1','1',getDate(),getDate(),0,'00001')
			</sql>				
		 </exec>
		</sql>	
	 </define>
	 <define name="GG_add6">	 
		<sql type="condition">
		<condition>
			<select>
			select id,classCode from tblBOM where id=@ValueofDB:id
			</select>
		</condition>
		<exec condition="true"> 
			<sql>
		insert into GG (id,classCode,NAME,AGE,createBy,lastUpdateBy,createTime,lastUpdateTime,statusId,SCompanyID)
		values('00006',@SqlReturn:id,38,50,'1','1',getDate(),getDate(),0,'00001')
			</sql>			
		 </exec>
		</sql>	
	 </define>	
	 
	 <define name="GG_add7">	 
		<sql type="condition">
		<condition>
			<select>
			select id,classCode from tblBOM where id=@ValueofDB:id
			</select>
		</condition>
		<exec condition="true"> 
			<sql>
		insert into GG (id,classCode,NAME,AGE,createBy,lastUpdateBy,createTime,lastUpdateTime,statusId,SCompanyID)
		values('00007',@SqlReturn:id,38,50,'1','1',getDate(),getDate(),0,'00001')
			</sql>			
		 </exec>
		</sql>	
	 </define>	
	 
	 <define name="GG_add8">	 
		<sql type="condition">
		<condition>
			<select>
			select id,classCode from tblBOM where id=@ValueofDB:id
			</select>
		</condition>
		<exec condition="true"> 
			<sql>
		insert into GG (id,classCode,NAME,AGE,createBy,lastUpdateBy,createTime,lastUpdateTime,statusId,SCompanyID)
		values('00008',@SqlReturn:id,38,50,'1','1',getDate(),getDate(),0,'00001')
			</sql>			
		 </exec>
		</sql>	
	 </define>	
	 
	 <define name="GG_add9">	 
		<sql type="condition">
		<condition>
			<select>
			select id,classCode from tblBOM where id=@ValueofDB:id
			</select>
		</condition>
		<exec condition="true"> 
			<sql>
		insert into GG (id,classCode,NAME,AGE,createBy,lastUpdateBy,createTime,lastUpdateTime,statusId,SCompanyID)
		values('00009',@SqlReturn:id,38,50,'1','1',getDate(),getDate(),0,'00001')
			</sql>			
		 </exec>		 
		</sql>	
	 </define>
	 
	 <define name="GG_add10">	 
		<sql type="condition">
		<condition>
			<select>
			select id,classCode from tblBOM where id=@ValueofDB:id
			</select>
		</condition>
		<exec condition="true"> 
			<sql>
		insert into GG (id,classCode,NAME,AGE,createBy,lastUpdateBy,createTime,lastUpdateTime,statusId,SCompanyID)
		values('00010',@SqlReturn:id,38,50,'1','1',getDate(),getDate(),0,'00001')
			</sql>			
		 </exec>
		</sql>	
	 </define>	 	    
	<!--end执行动作-->
	<!--end工作流测试-->
	<define name="tblSysAlert_Add">
		<sql type="condition">
			<condition>
				<select>select count(*) as count from tblSysAlert where SqlDefineName=@ValueofDB:tblSysAlert_SqlDefineName</select>
			</condition>
			<exec condition="@SqlReturn:count&gt;0">
				<error>alert.exists.error</error>
			</exec>
		</sql>		
	</define>
		<!--end工作流测试-->
	<define name="tblCompanyCredit_Add">
		<sql type="condition">
			<condition>
				<select>select Credit from tblcompany where ComFullName=@ValueofDB:tblCompanyCredit_ComFullName</select>
			</condition>
			<exec condition="true">
		<sql>update tblcompany set Credit=@ValueofDB:tblCompanyCredit_Credit where id=@ValueofDB:tblCompanyCredit_RefCompanyID</sql>
			</exec>
		</sql>		
	</define>
		<!--end工作流测试-->
	<define name="tblCompanyCredit_Del">
		<sql type="condition">
			<condition>
				<select>select RefCompanyID from tblCompanyCredit where id=@ValueofDB:tblCompanyCredit_id</select>
			</condition>
			<exec condition="true">
		<sql>update tblcompany set Credit=0 where id=@SqlReturn:RefCompanyID</sql>
			</exec>
		</sql>		
	</define>

	<!-- 系统重启 -->
<!--
	<define name="System_Restart_yesno">
		<sql type="condition">
			<exec condition="true">
				<confirm yesDefine="System_Restart" noDefine="">System_Restart_yesno</confirm>
			</exec>
		</sql>
	</define>
	-->
	<!-- 系统重启 -->
	<define name="System_Restart">
		<sql type="condition">
			<exec condition="@startSystem"/>
		</sql>
	</define>
	
	<!-- 系统重新加载 -->
	<define name="System_Reload">

	</define>
	

<define name="tblSysDeploy_CashIntegralConvert_Validate">
	<sql type="condition">
		<condition>
			<select>select 'ExistError10' as ExistError10 where (@ValueofDB:tblSysDeploy_Setting like '%[^0-9/]%' or convert(int,left(@ValueofDB:tblSysDeploy_Setting,charindex('/',@ValueofDB:tblSysDeploy_Setting)-1))&lt;=0 or convert(int,right(@ValueofDB:tblSysDeploy_Setting,len(@ValueofDB:tblSysDeploy_Setting)-charindex('/',@ValueofDB:tblSysDeploy_Setting)))&lt;=0) and @ValueofDB:tblSysDeploy_SysCode='CashIntegralConvert'</select>
		</condition>
		<!-- 积分现金兑换比例形式为n/m(m,n都为整数) -->
		<exec condition="'@SqlReturn:ExistError10'=='ExistError10'">
			<error>tblSysParameter.update.ExistError10</error>
		</exec>
	</sql>
</define>



<!--======================================================系统配置=======================================================-->
<!--======java程序中已设定，点击界面的保存并重启调用此define==========-->
<define name="tblSysDeploy_System_Restart">
	<sql type="define">tblSysDeploy_update_define</sql>
	<sql type="define">System_Restart</sql>
</define>
<!--======java程序中已设定，点击界面的保存调用此define==========-->
<define name="tblSysDeploy_System_NoRestart">
	<sql type="define">tblSysDeploy_update_define</sql>
</define>
<!--======根据当前修改的系统配置调用不同的define处理==============-->
<define name="tblSysDeploy_update_define">
	<sql type="condition"> 	
		<condition>
			<select>select statusid,scompanyid,accperiod from tblaccperiod where  statusid='1'  and scompanyID=@Sess:SCompanyID</select>
			<select>select statusid as stat from tblSysDeploy where id=@ValueofDB:id</select>
		</condition>
		<!--如果当前配置的状态为-1，且已开账，则提示已经开账不能修改 -->
		<exec condition="'@SqlReturn:stat' == '-1'&amp;&amp;'@SqlReturn:statusid' == '1'">
			<error>tblSysSetting.statusid.error</error>
		</exec>
	</sql>
	<sql type="condition">
		<condition>
			<select>select count(*) as RecordCount from tblSalesOutStock</select>
			<select>select count(*) as RecordCount2 from tblSalesReplace</select>
		</condition>
		<!--客户信用额度控制, 若销售出库单与销售换货单中有数据, 则不允许禁用-->
		<exec condition="'@ValueofDB:tblSysDeploy_SysCode'=='CustomerCreditLimit' &amp;&amp; ('@SqlReturn:RecordCount' != '0' || '@SqlReturn:RecordCount2' != '0') &amp;&amp; '@ValueofDB:tblSysDeploy_Setting'=='true'">				
			<error>SysDeploy.update.hasrecord.error1,&quot;启用客户信用额度控制&quot;</error>                  
		</exec>
		<!--客户信用额度-->
		<exec condition="'@ValueofDB:tblSysDeploy_SysCode'=='CustomerCreditLimit'">
			<sql type="define">SysDeploy_update_CustomerCreditLimit</sql>
		</exec>
		<!--采购询价流程-->
		<exec condition="'@ValueofDB:tblSysDeploy_SysCode'=='tblBuyAskPriceFlow'">
			<sql type="define">SysDeploy_update_tblBuyAskPriceFlow</sql>
		</exec>
		<!--销售报价流程-->
		<exec condition="'@ValueofDB:tblSysDeploy_SysCode'=='tblSalseQuoteFlow'">
			<sql type="define">SysDeploy_update_tblSalseQuoteFlow</sql>
		</exec>
		<!--采购换货流程-->
		<exec condition="'@ValueofDB:tblSysDeploy_SysCode'=='tblBuyReplaceFlow'">
			<sql type="define">SysDeploy_update_tblBuyReplaceFlow</sql>
		</exec>
		<!--销售换货流程-->
		<exec condition="'@ValueofDB:tblSysDeploy_SysCode'=='tblSalesReplaceFlow'">
			<sql type="define">SysDeploy_update_tblSalesReplaceFlow</sql>
		</exec>
		<!--配送流程-->
		<exec condition="'@ValueofDB:tblSysDeploy_SysCode'=='SendFlow'">
			<sql type="define">SysDeploy_update_SendFlow</sql>
		</exec>
		<!--增值税发票，普通发票-->
		<exec condition="'@ValueofDB:tblSysDeploy_SysCode'=='VATinvoice'||'@ValueofDB:tblSysDeploy_SysCode'=='Commoninvoice'">
			<sql type="define">SysDeploy_update_Invoice</sql>
		</exec>
		<!--商品成本计算方法-->
		<exec condition="'@ValueofDB:tblSysDeploy_SysCode'=='GoodsCostingMethod'">
			<sql type="define">SysDeploy_update_GoodsCostingMethod</sql>
		</exec>	
		<!--是否允许负库存过账-->
		<exec condition="'@ValueofDB:tblSysDeploy_SysCode'=='NegativeStock'">
			<sql type="define">SysDeploy_update_NegativeStock</sql>
		</exec>	
		<!--凭证字-->
		<exec condition="'@ValueofDB:tblSysDeploy_SysCode'=='AccNumberType'">
			<sql type="define">SysDeploy_update_AccNumberType</sql>
		</exec>
		<!--启用保质期-->
		<exec condition="'@ValueofDB:tblSysDeploy_SysCode'=='Availably'">
			<sql type="define">SysDeploy_update_Availably</sql>
		</exec>
		<exec condition="'@ValueofDB:tblSysDeploy_SysCode'=='GoodsNOorNameUnique'">
			<sql type="define">SysDeploy_update_GoodsUnique</sql> 
		</exec> 
			<exec condition="'@ValueofDB:tblSysDeploy_SysCode'=='ComNoorNameUnique'">
			<sql type="define">SysDeploy_update_ComUnique</sql> 
		</exec> 
		<!--往来单位支持对应商品预设售价-->
		<exec condition="'@ValueofDB:tblSysDeploy_SysCode'=='PresetPrice'">
			<sql type="define">SysDeploy_update_PresetPrice</sql>
		</exec>
		<!--采购类单据多仓库-->
		<exec condition="'@ValueofDB:tblSysDeploy_SysCode'=='ManyStockBuy'">
			<sql type="define">SysDeploy_update_ManyStockBuy</sql>
		</exec>
		<!--销售类单据多仓库-->
		<exec condition="'@ValueofDB:tblSysDeploy_SysCode'=='ManyStockSales'">
			<sql type="define">SysDeploy_update_ManyStockSales</sql>
		</exec>
		<!--仓库类单据多仓库-->
		<exec condition="'@ValueofDB:tblSysDeploy_SysCode'=='ManyStockStore'">
			<sql type="define">SysDeploy_update_ManyStockStore</sql>
		</exec>
		<!--采购订单录入到货日期-->
		<exec condition="'@ValueofDB:tblSysDeploy_SysCode'=='DeliveryDate'">
			<sql type="define">SysDeploy_update_DeliveryDate</sql>
		</exec>
		<!--销售订单录入发货日期-->
		<exec condition="'@ValueofDB:tblSysDeploy_SysCode'=='ArrivalDate'">
			<sql type="define">SysDeploy_update_ArrivalDate</sql>
		</exec>
		<!--是否允许录入销售价-->
		<exec condition="'@ValueofDB:tblSysDeploy_SysCode'=='admitinputsaleprice'">
			<sql type="define">SysDeploy_update_admitinputsaleprice</sql>
		</exec>
		<!--商品销售核算价-->
		<exec condition="'@ValueofDB:tblSysDeploy_SysCode'=='GoodsSalesAccountPrice'">
			<sql type="define">SysDeploy_update_GoodsSalesAccountPrice</sql>
		</exec>
		<!--出库类单据保存时判断可用库存-->
		<exec condition="'@ValueofDB:tblSysDeploy_SysCode'=='OutBillUseQtyCheck'">
			<sql type="define">SysDeploy_update_OutBillUseQtyCheck</sql>
		</exec>
		<!--启用条码管理-->
		<exec condition="'@ValueofDB:tblSysDeploy_SysCode'=='BarCodeAuto'">
			<sql type="define">SysDeploy_update_BarCodeAuto</sql>
		</exec>
		<!--启用项目管理-->
		<exec condition="'@ValueofDB:tblSysDeploy_SysCode'=='Project'">
			<sql type="define">SysDeploy_update_Project</sql>
		</exec>
		<!--辅助单位-->
		<exec condition="'@ValueofDB:tblSysDeploy_SysCode'=='AssUnit'">
			<sql type="define">SysDeploy_update_AssUnit</sql>
		</exec>
		<!--数量小数保留位数,单价小数保留位数,金额小数保留位数-->
		<exec condition="'@ValueofDB:tblSysDeploy_SysCode'=='DigitsAmount'||'@ValueofDB:tblSysDeploy_SysCode'=='DigitsPrice'||'@ValueofDB:tblSysDeploy_SysCode'=='DigitsQty'">
			<sql type="define">SysDeploy_update_Digits</sql>
		</exec>
		<!--列表页每页显示行数-->
		<exec condition="'@ValueofDB:tblSysDeploy_SysCode'=='PageSize'">
				<sql type="define">SysDeploy_update_PageSize</sql>
		</exec>
		  <!--采购订单单价差异提醒-->
		<exec condition="'@ValueofDB:tblSysDeploy_SysCode'=='DifferenceOfPriceInBuyOrder'">
				<sql type="define">SysDeploy_update_DifferenceOfPriceInBuyOrder</sql>
		</exec>
			<!--系统保留通知数量,消息中心端口-->
			<exec condition="('@ValueofDB:tblSysDeploy_SysCode'=='advinceOrder'||'@ValueofDB:tblSysDeploy_SysCode'=='msgPort')&amp;&amp;'@ValueofDB:tblSysDeploy_Setting'.search(new RegExp('^[0-9]*$'))&lt;=-1">
			<error>必须为大于0的整数</error> 
		</exec>
		<!--财务管理启用固定资产-->
		<exec condition="'@ValueofDB:tblSysDeploy_SysCode'=='FixedAsset'">
				<sql type="define">SysDeploy_update_FixedAsset</sql>
		</exec>
		<!--财务管理启用自动产生凭证-->
		<exec condition="'@ValueofDB:tblSysDeploy_SysCode'=='autoGenerateAcc'">
				<sql type="define">SysDeploy_update_autoGenerateAcc</sql>
		</exec>
		<!--其他的系统配置（CRM,电子商务等）-->
		<exec condition="true">
				<sql type="define">SysDeploy_update_OtherDeploy</sql>
		</exec>
		<!--预收预付转应收应付的系统配置-->
		<exec condition="'@ValueofDB:tblSysDeploy_SysCode'=='prerecvpaymarktoneedrecvpay'">
				<sql type="define">SysDeploy_update_prerecvpaymarktoneedrecvpay</sql>
		</exec>
		<!--启用MAC地址过滤-->
		<exec condition="'@ValueofDB:tblSysDeploy_SysCode'=='MACFilter'">
				<sql type="define">SysDeploy_update_MACFilter</sql>
		</exec>
		 <!--启用外币核算-->
		<exec condition="'@ValueofDB:tblSysDeploy_SysCode'=='currency'">
				<sql type="define">SysDeploy_update_currency</sql>
		</exec>
		<!--单据编号只读-->
		<exec condition="'@ValueofDB:tblSysDeploy_SysCode'=='BillNoReadOnly'">
				<sql type="define">SysDeploy_update_BillNoReadOnly</sql>
		</exec>
		<!--启用单据含税-->
		<exec condition="'@ValueofDB:tblSysDeploy_SysCode'=='BillTax'">
				<sql type="define">SysDeploy_update_BillTax</sql>
		</exec>
		<!--商品开票-->
		<exec condition="'@ValueofDB:tblSysDeploy_SysCode'=='GoodsInvoice'">
				<sql type="define">SysDeploy_update_GoodsInvoice</sql>
		</exec>
		<!--采购开票-->
		<exec condition="'@ValueofDB:tblSysDeploy_SysCode'=='BuyInvoice'">
				<sql type="define">SysDeploy_update_BuyInvoice</sql>
		</exec>
		<!--销售开票-->
		<exec condition="'@ValueofDB:tblSysDeploy_SysCode'=='SalesInvoice'">
				<sql type="define">SysDeploy_update_SalesInvoice</sql>
		</exec>
		<!--运费分摊到成本-->
		<exec condition="'@ValueofDB:tblSysDeploy_SysCode'=='freightToCost'">
				<sql type="define">SysDeploy_update_freightToCost</sql>
		</exec>
		<!--进价跟踪-->
		<exec condition="'@ValueofDB:tblSysDeploy_SysCode'=='InPriceTrack'">
				<sql type="define">SysDeploy_update_InPriceTrack</sql>
		</exec>
		<!--售价跟踪-->
		<exec condition="'@ValueofDB:tblSysDeploy_SysCode'=='OutPriceTrack'">
				<sql type="define">SysDeploy_update_OutPriceTrack</sql>
		</exec>
	</sql>
</define>
<!--======售价跟踪=======-->
<define name="SysDeploy_update_OutPriceTrack">
	<sql type="condition"> 
		<condition><select>select Setting as DisSetting from tblSysDeploy where sysCode='OutDiscountTracke'</select></condition>
		<exec condition="'@SqlReturn:DisSetting'=='true'&amp;&amp;('@ValueofDB:tblSysDeploy_Setting'=='TaxPrice'||'@ValueofDB:tblSysDeploy_Setting'=='CurPrice')">
			<error>系统配置“启用售价折扣跟踪”已启用，不能同时启用含税单价或者外币单价跟踪</error>
		</exec>
	</sql>
	<!--sql type="condition"> 
		<condition><select>select COUNT(0) as SalesPriceC from tblCustomerPriceDet where Price!=0</select></condition>
		<exec condition="@SqlReturn:SalesPriceC&gt;0">
			<error>已经存在售价跟踪记录，不允许此操作</error>
		</exec>
	&lt;/sql-->
	<sql type="condition">
		<exec condition="'@ValueofDB:tblSysDeploy_Setting'=='Price'||'@ValueofDB:tblSysDeploy_Setting'=='PriceNo'">
			<sql>update tblDBFieldInfo set inputValue='GoodsSales' where tableId=(select id from tblDBTableInfo where tableName='tblSalesOutStockDet') and fieldName='GoodsCode'</sql>
		</exec>
		<exec condition="'@ValueofDB:tblSysDeploy_Setting'=='TaxPrice'">
			<sql>update tblDBFieldInfo set inputValue='GoodsSalesTaxPrice' where tableId=(select id from tblDBTableInfo where tableName='tblSalesOutStockDet') and fieldName='GoodsCode'</sql>
		</exec>
		<exec condition="'@ValueofDB:tblSysDeploy_Setting'=='CurPrice'">
			<sql>update tblDBFieldInfo set inputValue='GoodsSalesCurPrice' where tableId=(select id from tblDBTableInfo where tableName='tblSalesOutStockDet') and fieldName='GoodsCode'</sql>
		</exec>
	</sql>
	<sql type="condition">
		<exec condition="true">
			<sql>delete tblcustomerprice where id in (select f_ref from tblcustomerpriceDet where Price&gt;0)</sql>
		</exec>
	</sql>
</define>
<!--======进价跟踪=======-->
<define name="SysDeploy_update_InPriceTrack">
	<sql type="condition"> 
		<condition><select>select Setting as DisSetting from tblSysDeploy where sysCode='InDiscountTracke'</select></condition>
		<exec condition="'@SqlReturn:DisSetting'=='true'&amp;&amp;('@ValueofDB:tblSysDeploy_Setting'=='TaxPrice'||'@ValueofDB:tblSysDeploy_Setting'=='CurPrice')">
			<error>系统配置“启用进价折扣跟踪”已启用，不能同时启用含税单价或者外币单价跟踪</error>
		</exec>
	</sql>
	<sql type="condition"> 
		<!--condition&gt;<select>select COUNT(0) as BuyPriceC from tblCustomerPriceDet where BuyPrice!=0</select>&lt;/condition-->
		<!--exec condition="@SqlReturn:BuyPriceC&gt;0">
			<error>已经存在进价跟踪记录，不允许此操作</error>
		&lt;/exec-->
		<exec condition="'@ValueofDB:tblSysDeploy_Setting'=='Price'||'@ValueofDB:tblSysDeploy_Setting'=='PriceNo'">
			<sql>update tblDBFieldInfo set inputValue='GoodsBuy' where tableId=(select id from tblDBTableInfo where tableName='tblBuyInStockDet') and fieldName='GoodsCode'</sql>
		</exec>
		<exec condition="'@ValueofDB:tblSysDeploy_Setting'=='TaxPrice'">
			<sql>update tblDBFieldInfo set inputValue='GoodsBuyTaxPrice' where tableId=(select id from tblDBTableInfo where tableName='tblBuyInStockDet') and fieldName='GoodsCode'</sql>
		</exec>
		<exec condition="'@ValueofDB:tblSysDeploy_Setting'=='CurPrice'">
			<sql>update tblDBFieldInfo set inputValue='GoodsBuyCurPrice' where tableId=(select id from tblDBTableInfo where tableName='tblBuyInStockDet') and fieldName='GoodsCode'</sql>
		</exec>
	</sql>
	<sql type="condition">
		<exec condition="true">
			<sql>delete tblcustomerprice where id in (select f_ref from tblcustomerpriceDet where BuyPrice&gt;0)</sql>
		</exec>
	</sql>
</define>
<!--======运费分摊到成本=======-->
<define name="SysDeploy_update_freightToCost">
	<sql type="condition"> 
		<condition><select>select COUNT(0) as freightCount from tblBuyInStock where freightAmount!=0</select></condition>
		<exec condition="@SqlReturn:freightCount&gt;0">
			<error>采购入库单中已经存在运费记录，不允许此操作</error>
		</exec>
	</sql>
</define>
<!--======采购开票=======-->
<define name="SysDeploy_update_BuyInvoice">
	<sql type="condition"> 
		<condition>
			<select>select COUNT(0) as OrderCount from tblBuyInfoDet where BillType='tblBuyOrder'</select> 
			<select>select COUNT(0) as InCount from tblBuyInfoDet where BillType='tblBuyInStock'</select> 
		</condition>
		<exec condition="(@SqlReturn:OrderCount&gt;0&amp;&amp;'@ValueofDB:tblSysDeploy_Setting'=='InBill')">
			<error>采购开票中已经存在采购订单开票记录，不允许修改为按采购入库单开票</error>
		</exec>
		<exec condition="(@SqlReturn:InCount&gt;0&amp;&amp;'@ValueofDB:tblSysDeploy_Setting'=='OrderBill')">
			<error>采购开票中已经存在采购入库开票记录，不允许修改为按采购订单开票</error>
		</exec>
	</sql>
</define>
<!--======销售开票=======-->
<define name="SysDeploy_update_SalesInvoice">
	<sql type="condition"> 
		<condition>
			<select>select COUNT(0) as OrderCount from tblSalesInfoDet where BillType='tblSalesOrder'</select> 
			<select>select COUNT(0) as OutCount from tblSalesInfoDet where BillType='tblSalesOutStock'</select>
		</condition>
		<exec condition="(@SqlReturn:OrderCount&gt;0&amp;&amp;'@ValueofDB:tblSysDeploy_Setting'=='OutBill')">
			<error>销售开票中已经存在销售订单开票记录，不允许修改为按销售出库单开票</error>
		</exec>
		<exec condition="(@SqlReturn:OutCount&gt;0&amp;&amp;'@ValueofDB:tblSysDeploy_Setting'=='OrderBill')">
			<error>销售开票中已经存在销售出库开票记录，不允许修改为按销售订单开票</error>
		</exec>
	</sql>
</define>
<!--======商品开票=======-->
<define name="SysDeploy_update_BillTax">
	<sql type="condition"><!--如果启用商品开票，则修开票中商品的输入类型-->
		<exec condition="'@ValueofDB:tblSysDeploy_Setting'=='true'">
			<sql>update tblDBFieldInfo set inputType=2 where tableId in (select id from tblDBTableInfo where tableName in ('tblBuyInfoDet','tblSalesInfoDet')) and fieldName='GoodsCode'</sql>
		</exec>
		<exec condition="'@ValueofDB:tblSysDeploy_Setting'=='false'">
			<sql>update tblDBFieldInfo set inputType=3 where tableId in (select id from tblDBTableInfo where tableName in ('tblBuyInfoDet','tblSalesInfoDet')) and fieldName='GoodsCode'</sql>
		</exec>
	</sql>
</define>
<!--======单据含税=======-->
<define name="SysDeploy_update_BillTax">
	<sql type="condition"><!--如果启用单据含税，则发票税率、商品开票显示，否则这些系统配置隐藏-->
		<exec condition="'@ValueofDB:tblSysDeploy_Setting'=='true'">
			<sql>update tblSysDeploy set IsUsld=1 where SysCode in ('VATinvoice','Commoninvoice','GoodsInvoice','BuyInvoice','SalesInvoice')</sql>
		</exec>
		<exec condition="'@ValueofDB:tblSysDeploy_Setting'=='false'">
			<sql>update tblSysDeploy set IsUsld=0 where SysCode in ('VATinvoice','Commoninvoice','GoodsInvoice','BuyInvoice','SalesInvoice')</sql>
		</exec>
	</sql>
</define>
<!--======单据编号只读=======-->
<define name="SysDeploy_update_BillNoReadOnly">
	<sql type="condition">
		<exec condition="'@ValueofDB:tblSysDeploy_Setting'=='true'">
			<sql>update tblDBFieldInfo set inputType=8,inputTypeOld=8 from tblDBFieldInfo,tblBillNo where tableId=(select id from tblDBTableInfo where tableName=SUBSTRING([key],1,charindex('_',[key])-1)) and fieldName=SUBSTRING([key],charindex('_',[key])+1,LEN([key])) and inputType=0</sql>
		</exec>
		<exec condition="'@ValueofDB:tblSysDeploy_Setting'=='false'">
			<sql>update tblDBFieldInfo set inputType=0,inputTypeOld=0 from tblDBFieldInfo,tblBillNo where tableId=(select id from tblDBTableInfo where tableName=SUBSTRING([key],1,charindex('_',[key])-1)) and fieldName=SUBSTRING([key],charindex('_',[key])+1,LEN([key])) and inputType=8</sql>
		</exec>
	</sql>
</define>
<!--======启用条码管理=======-->
<define name="SysDeploy_update_BarCodeAuto">
	<sql type="condition">
		<condition><select>select COUNT(0) as code from tblShowSet where tableName='tblGoods' and fieldName='BarCode'</select></condition>
		<exec condition="'@ValueofDB:tblSysDeploy_Setting'=='true'&amp;&amp;@SqlReturn:code==0">
			<sql>insert into tblShowSet(tableName,fieldName,reportView,billView,popSel,keyword,popupView) values ('tblGoods','BarCode',1,1,1,1,1)</sql>
		</exec>
		<exec condition="'@ValueofDB:tblSysDeploy_Setting'=='false'&amp;&amp;@SqlReturn:code&gt;0">
			<sql>delete from tblShowSet where tableName='tblGoods' and fieldName='BarCode'</sql>
		</exec>
	</sql>
</define>
<!--======外币核算=======-->
<define name="SysDeploy_update_currency">
	<sql type="condition">
		<condition>
			<select>SELECT b.zh_CN AS AccName FROM tblAccTypeInfo a JOIN tblLanguage b ON a.AccName = b.id WHERE LEN(ISNULL(Currency,''))!=0</select>
		</condition>
		<exec condition="'@ValueofDB:tblSysDeploy_Setting'=='false'&amp;&amp;'@SqlReturn:AccName'!='null'&amp;&amp;'@SqlReturn:AccName'.length!=0">
			<error>SysDeploy.update.currency.error,@SqlReturn:AccName</error>
		</exec>
		<exec condition=" '@ValueofDB:tblSysDeploy_Setting'=='true' "><!-- 启用外币后，往来科目增加外币核算 -->
			<sql>update tblAccTypeInfo set IsForCur=1,isAdjustExchange=1 where AccNumber in ('1122','1123','2202','2203')</sql>
			<sql>update tblDBFieldInfo set inputType=8,inputTypeOld=8 where tableId in (select id from tblDBTableInfo where tableName in ('tblSaleReceiveDet','tblPaydet','tblAccAdjustDet','tblPayAdjustDet')) and fieldName in ('CurBillAmt','CurSettledAmt','CurWexeBalAmt') </sql>
		</exec>
		<exec condition=" '@ValueofDB:tblSysDeploy_Setting'=='false' "><!-- 关闭外币后，往来科目增加外币核算 -->
			<sql>update tblAccTypeInfo set IsForCur=2,isAdjustExchange=2 where AccNumber in ('1122','1123','2202','2203')</sql>
			<sql>update tblDBFieldInfo set inputType=3,inputTypeOld=3 where tableId in (select id from tblDBTableInfo where tableName in ('tblSaleReceiveDet','tblPaydet','tblAccAdjustDet','tblPayAdjustDet')) and fieldName in ('CurBillAmt','CurSettledAmt','CurWexeBalAmt') </sql>
		</exec>
	</sql>
</define>
<!--======配送流程=======-->
<define name="SysDeploy_update_SendFlow">
	<sql type="condition"> 
		<condition><select>select count(*) as RecordCount from tblSend</select></condition>
		<exec condition="'@SqlReturn:RecordCount' != '0' &amp;&amp; '@ValueofDB:tblSysDeploy_Setting'=='false'">				
			<error>SysDeploy.update.hasrecord.error2,&quot;配送流程&quot;</error>                  
		</exec>
		<exec condition="'@ValueofDB:tblSysDeploy_Setting'=='true'"> 
			<!--将采购申请单，采购申请汇总单，明细报表，配送分析报表等模块启用-->
			<sql>update tblModules set IsUsed=1 where linkAddress in ('/UserFunctionQueryAction.do?tableName=tblBuyApplication','/UserFunctionQueryAction.do?tableName=tblBuyApplicationTotal','/ReportDataAction.do?reportNumber=tblBuyApplicationDet','/ReportDataAction.do?reportNumber=ReportBuyApplicationTotal','/ReportDataAction.do?reportNumber=ReportSend','/ReportDataAction.do?reportNumber=ReportSendcheck','/ReportDataAction.do?reportNumber=ReportSendAnalyse')</sql>
			<!--将配送管理启用-->
			<sql>update tblModules set IsUsed=1 where id=(select a.id from tblModules a,tblLanguage b where a.modelName=b.id and b.zh_CN='配送管理')</sql>
			<!--采购申请汇总单，采购订单的申请单号,申请汇总单号改为关联表选择-->
			<sql>update tblDBFieldInfo set inputType=2,inputTypeOld=2 where tableId in (select id from tblDBTableInfo where tableName in ('tblBuyApplicationTotalDet','tblBuyOrderDet')) and fieldName in ('BuyApplyID','BuyAppTotalID')</sql>
			<sql>UPDATE tblBillNo SET statusId ='0' WHERE [KEY] = 'tblBuyApplication_BillNo'</sql>
			<sql>UPDATE tblBillNo SET statusId ='0' WHERE [KEY] = 'tblBuyApplicationTotal_BillNo'</sql>
			<sql>UPDATE tblBillNo SET statusId ='0' WHERE [KEY] = 'tblSend_BillNo'</sql>
			<sql>UPDATE tblBillNo SET statusId ='0' WHERE [KEY] = 'tblSendcheck_BillNo'</sql>
			<sql>UPDATE tblBillNo SET statusId ='0' WHERE [KEY] = 'tblSendReturn_BillNo'</sql>
			<!--配送流程相关枚举增加-->
			<sql>delete from tblDBEnumerationItem where enumId in(select id from tblDBEnumeration where enumName in('BillType','OutInType','TrackBillType')) and enumValue in('tblBuyApplication','tblBuyApplicationTotal','tblSend','tblSendcheck','tblSendReturn')</sql>
			<sql>insert into tblDBEnumerationItem (id,enumValue,printCount,languageId,enumOrder,enumId)select '707e3c39_1312032033127340069','tblBuyApplication','0','707e3c39_1312032033127340070','12',(select id from tblDBEnumeration where enumName='BillType')</sql>
			<sql>insert into tblDBEnumerationItem (id,enumValue,printCount,languageId,enumOrder,enumId)select '707e3c39_1312032033127340071','tblBuyApplicationTotal','0','707e3c39_1312032033127340072','12',(select id from tblDBEnumeration where enumName='BillType')</sql>
			<sql>insert into tblDBEnumerationItem (id,enumValue,printCount,languageId,enumOrder,enumId)select '707e3c39_1312032033127340073','tblSend','0','707e3c39_1312032033127340074','12',(select id from tblDBEnumeration where enumName='BillType')</sql>
			<sql>insert into tblDBEnumerationItem (id,enumValue,printCount,languageId,enumOrder,enumId)select '707e3c39_1312032033127340075','tblSendcheck','0','707e3c39_1312032033127340076','12',(select id from tblDBEnumeration where enumName='BillType')</sql>
			<sql>insert into tblDBEnumerationItem (id,enumValue,printCount,languageId,enumOrder,enumId)select '707e3c39_1312032033127340077','tblSendReturn','0','707e3c39_1312032033127340078','12',(select id from tblDBEnumeration where enumName='BillType')</sql>
			<sql>insert into tblDBEnumerationItem (id,enumValue,printCount,languageId,enumOrder,enumId)select '9b1b1ca3_1311141841249280355','tblSend','0','9b1b1ca3_1311141841249280356','1',(select id from tblDBEnumeration where enumName='OutInType')</sql>
			<sql>insert into tblDBEnumerationItem (id,enumValue,printCount,languageId,enumOrder,enumId)select '9b1b1ca3_1311141841249280357','tblSendcheck','0','9b1b1ca3_1311141841249280358','1',(select id from tblDBEnumeration where enumName='OutInType')</sql>
			<sql>insert into tblDBEnumerationItem (id,enumValue,printCount,languageId,enumOrder,enumId)select '9b1b1ca3_1311141841249280359','tblSendReturn','0','9b1b1ca3_1311141841249280360','1',(select id from tblDBEnumeration where enumName='OutInType')</sql>
			<sql>insert into tblDBEnumerationItem (id,enumValue,printCount,languageId,enumOrder,enumId)select 'daacd973_1110221146403900160','tblBuyApplication','0','daacd973_1110221146403900161','1',(select id from tblDBEnumeration where enumName='TrackBillType')</sql>
      <!--将审核流放出-->
      <sql>UPDATE OAWorkFlowTemplate SET statusId = '0' WHERE templateFile IN ('tblBuyApplication','tblBuyApplicationTotal','tblSend','tblSendcheck','tblSendReturn')</sql>
	  <sql>INSERT INTO tblImportData(id,NAME,targetTable,flag,createBy,createTime,statusId,finishTime) SELECT SUBSTRING(REPLACE(NEWID(),'-',''),1,28),'采购申请单','tblBuyApplication',1,1,'2013-12-20 11:19:41',0,'2013-12-20 11:19:41' UNION ALL SELECT SUBSTRING(REPLACE(NEWID(),'-',''),1,28),'申请汇总单','tblBuyApplicationTotal',1,1,'2013-12-20 11:19:41',0,'2013-12-20 11:19:41' UNION ALL SELECT SUBSTRING(REPLACE(NEWID(),'-',''),1,28),'配送单','tblSend',1,1,'2013-12-20 11:19:41',0,'2013-12-20 11:19:41' UNION ALL SELECT SUBSTRING(REPLACE(NEWID(),'-',''),1,28),'配送验收单','tblSendcheck',1,1,'2013-12-20 11:19:41',0,'2013-12-20 11:19:41' UNION ALL SELECT SUBSTRING(REPLACE(NEWID(),'-',''),1,28),'配送退货单','tblSendReturn',1,1,'2013-12-20 11:19:41',0,'2013-12-20 11:19:41'</sql>
		</exec>	
		<exec condition="'@ValueofDB:tblSysDeploy_Setting'=='false'"> 
			<!--将采购申请单，采购申请汇总单，明细报表，配送分析报表等模块启用-->
			<sql>update tblModules set IsUsed=2 where linkAddress in ('/UserFunctionQueryAction.do?tableName=tblBuyApplication','/UserFunctionQueryAction.do?tableName=tblBuyApplicationTotal','/ReportDataAction.do?reportNumber=tblBuyApplicationDet','/ReportDataAction.do?reportNumber=ReportBuyApplicationTotal','/ReportDataAction.do?reportNumber=ReportSend','/ReportDataAction.do?reportNumber=ReportSendcheck','/ReportDataAction.do?reportNumber=ReportSendAnalyse')</sql>
			<!--将配送管理启用-->
			<sql>update tblModules set IsUsed=2 where id=(select a.id from tblModules a,tblLanguage b where a.modelName=b.id and b.zh_CN='配送管理')</sql>
			<!--采购申请汇总单，采购订单的申请单号,申请汇总单号改为关联表选择-->
			<sql>update tblDBFieldInfo set inputType=3,inputTypeOld=3 where tableId in (select id from tblDBTableInfo where tableName in ('tblBuyApplicationTotalDet','tblBuyOrderDet')) and fieldName in ('BuyApplyID','BuyAppTotalID')</sql>
			<sql>UPDATE tblBillNo SET statusId ='-1' WHERE [KEY] = 'tblBuyApplication_BillNo'</sql>
			<sql>UPDATE tblBillNo SET statusId ='-1' WHERE [KEY] = 'tblBuyApplicationTotal_BillNo'</sql>
			<sql>UPDATE tblBillNo SET statusId ='-1' WHERE [KEY] = 'tblSend_BillNo'</sql>
			<sql>UPDATE tblBillNo SET statusId ='-1' WHERE [KEY] = 'tblSendcheck_BillNo'</sql>
			<sql>UPDATE tblBillNo SET statusId ='-1' WHERE [KEY] = 'tblSendReturn_BillNo'</sql>
			<!--配送流程相关枚举删除-->
			<sql>delete from tblDBEnumerationItem where enumId in(select id from tblDBEnumeration where enumName in('BillType','OutInType','TrackBillType')) and enumValue in('tblBuyApplication','tblBuyApplicationTotal','tblSend','tblSendcheck','tblSendReturn')</sql>
      <!--将审核流隐藏-->
      <sql>UPDATE OAWorkFlowTemplate SET statusId = '-1' WHERE templateFile IN ('tblBuyApplication','tblBuyApplicationTotal','tblSend','tblSendcheck','tblSendReturn')</sql>
	    <sql>DELETE FROM tblImportData WHERE targetTable IN ('tblBuyApplication','tblBuyApplicationTotal','tblSend','tblSendcheck','tblSendReturn')</sql>
		</exec>		
	</sql>			
</define>
<!--======销售换货流程=======-->
<define name="SysDeploy_update_tblSalesReplaceFlow">
	<sql type="condition"> 
		<condition><select>select count(*) as RecordCount from tblSalesReplace</select></condition>
		<exec condition="'@SqlReturn:RecordCount' != '0' &amp;&amp; '@ValueofDB:tblSysDeploy_Setting'=='false'">				
			<error>SysDeploy.update.hasrecord.error3,&quot;销售换货流程&quot;</error>                  
		</exec>
		<exec condition="'@ValueofDB:tblSysDeploy_Setting'=='true'"> 
			<!--将销售换货单，销售换货明细表模块启用-->
			<sql>update tblModules set IsUsed=1 where linkAddress in ('/UserFunctionQueryAction.do?tableName=tblSalesReplace','/ReportDataAction.do?reportNumber=tblSalesReplaceDet')</sql>
			<sql>UPDATE tblBillNo SET statusId ='0' WHERE [KEY] = 'tblSalesReplace_BillNo'</sql>
			<!--增加销售换货相关模板-->
			<sql>insert into tblDBEnumerationItem (id,enumValue,printCount,languageId,enumOrder,enumId)select 'CFC877D8C78044C390BF9F08C558','tblSalesReplace','0','1f118fa89_1008181622514060383','1',(select id from tblDBEnumeration where enumName='BillType')</sql>
			<sql>insert into tblDBEnumerationItem (id,enumValue,printCount,languageId,enumOrder,enumId)select '9b1b1ca3_1311141841249280353','tblSalesReplace','0','9b1b1ca3_1311141841249280354','1',(select id from tblDBEnumeration where enumName='OutInType')</sql>
			<sql>insert into tblDBEnumerationItem (id,enumValue,printCount,languageId,enumOrder,enumId)select '8b5ba973_1311251444085780013','tblSalesReplace','0','8b5ba973_1311251444085780014','2',(select id from tblDBEnumeration where enumName='SaleBillType')</sql>
			<sql>insert into tblDBEnumerationItem (id,enumValue,printCount,languageId,enumOrder,enumId)select 'qqq1f6bed011171104189840042','tblSalesReplace','0','qqq1f6bed11171104189840043','1',(select id from tblDBEnumeration where enumName='TrackBillType')</sql>
      <!--将审核流放出-->
      <sql>UPDATE OAWorkFlowTemplate SET statusId = '0' WHERE templateFile='tblSalesReplace'</sql>
	  <sql>INSERT INTO tblImportData(id,NAME,targetTable,flag,createBy,createTime,statusId,finishTime) SELECT SUBSTRING(REPLACE(NEWID(),'-',''),1,28),'销售换货单','tblSalesReplace',1,1,'2013-12-20 11:19:41',0,'2013-12-20 11:19:41'</sql>
		</exec>	
		<exec condition="'@ValueofDB:tblSysDeploy_Setting'=='false'"> 
			<!--将销售换货单，销售换货明细表模块停用-->
			<sql>update tblModules set IsUsed=2 where linkAddress in ('/UserFunctionQueryAction.do?tableName=tblSalesReplace','/ReportDataAction.do?reportNumber=tblSalesReplaceDet')</sql>
			<sql>UPDATE tblBillNo SET statusId ='-1' WHERE [KEY] = 'tblSalesReplace_BillNo'</sql>
			<!--将销售换货相关枚举删除-->
			<sql>delete from tblDBEnumerationItem where enumId in(select id from tblDBEnumeration where enumName in('BillType','BuyBillType','OutInType','SaleBillType','TrackBillType')) and enumValue='tblSalesReplace' </sql>
      <!--将审核流隐藏-->
      <sql>UPDATE OAWorkFlowTemplate SET statusId = '-1' WHERE templateFile='tblSalesReplace'</sql>
	  <sql>DELETE FROM tblImportData WHERE targetTable ='tblSalesReplace'</sql>
		</exec>
	</sql>			
</define>
<!--======采购换货流程=======-->
<define name="SysDeploy_update_tblBuyReplaceFlow">
	<sql type="condition"> 
		<condition><select>select count(*) as RecordCount from tblBuyReplace</select></condition>
		<exec condition="'@SqlReturn:RecordCount' != '0' &amp;&amp; '@ValueofDB:tblSysDeploy_Setting'=='false'">				
			<error>SysDeploy.update.hasrecord.error4,&quot;采购换货流程&quot;</error>                  
		</exec>
		<exec condition="'@ValueofDB:tblSysDeploy_Setting'=='true'"> 
			<!--将采购换货单，采购换货明细表模块启用-->
			<sql>update tblModules set IsUsed=1 where linkAddress in ('/UserFunctionQueryAction.do?tableName=tblBuyReplace','/ReportDataAction.do?reportNumber=tblBuyReplaceDet')</sql>
			<sql>UPDATE tblBillNo SET statusId ='0' WHERE [KEY] = 'tblBuyReplace_BillNo'</sql>
			<!--增加相关枚举值-->
			<sql>insert into tblDBEnumerationItem (id,enumValue,printCount,languageId,enumOrder,enumId)select 'df197cc5_1311221421318020076','tblBuyReplace','0','1f118fa89_1008181622514060381','1',(select id from tblDBEnumeration where enumName='BillType')</sql>
			<sql>insert into tblDBEnumerationItem (id,enumValue,printCount,languageId,enumOrder,enumId)select '8b5ba973_1311251448180310021','tblBuyReplace','0','8b5ba973_1311251448180310022','2',(select id from tblDBEnumeration where enumName='BuyBillType')</sql>
			<sql>insert into tblDBEnumerationItem (id,enumValue,printCount,languageId,enumOrder,enumId)select '9b1b1ca3_1311141841249280351','tblBuyReplace','0','9b1b1ca3_1311141841249280352','1',(select id from tblDBEnumeration where enumName='OutInType')</sql>
			<sql>insert into tblDBEnumerationItem (id,enumValue,printCount,languageId,enumOrder,enumId)select 'qqq1f6bed011171104189840036','tblBuyReplace','0','qqq1f6bed11171104189840037','1',(select id from tblDBEnumeration where enumName='TrackBillType')</sql>
      <!--将审核流放出-->
      <sql>UPDATE OAWorkFlowTemplate SET statusId = '0' WHERE templateFile='tblBuyReplace'</sql>
	  <sql>INSERT INTO tblImportData(id,NAME,targetTable,flag,createBy,createTime,statusId,finishTime) SELECT SUBSTRING(REPLACE(NEWID(),'-',''),1,28),'采购换货单','tblBuyReplace',1,1,'2013-12-20 11:19:41',0,'2013-12-20 11:19:41'</sql>
		</exec>	
		<exec condition="'@ValueofDB:tblSysDeploy_Setting'=='false'"> 
			<!--将采购换货单，采购换货明细表模块停用-->
			<sql>update tblModules set IsUsed=2 where linkAddress in ('/UserFunctionQueryAction.do?tableName=tblBuyReplace','/ReportDataAction.do?reportNumber=tblBuyReplaceDet')</sql>
			<sql>UPDATE tblBillNo SET statusId ='-1' WHERE [KEY] = 'tblBuyReplace_BillNo'</sql>
			<!--删除相关枚举值-->
			<sql>delete from tblDBEnumerationItem where enumId in(select id from tblDBEnumeration where enumName in('BillType','BuyBillType','OutInType','SaleBillType','TrackBillType')) and enumValue='tblBuyReplace'</sql>
      <!--将审核流隐藏-->
      <sql>UPDATE OAWorkFlowTemplate SET statusId = '-1' WHERE templateFile='tblBuyReplace'</sql>
	  <sql>DELETE FROM tblImportData WHERE targetTable ='tblBuyReplace'</sql>
		</exec>
	</sql>			
</define>
<!--======销售报价流程=======-->
<define name="SysDeploy_update_tblSalseQuoteFlow">
	<sql type="condition"> 
		<condition><select>select count(*) as RecordCount from tblSalseQuote</select></condition>
		<exec condition="'@SqlReturn:RecordCount' != '0' &amp;&amp; '@ValueofDB:tblSysDeploy_Setting'=='false'">				
			<error>SysDeploy.update.hasrecord.error5,&quot;销售报价流程&quot;</error>                  
		</exec>
		<exec condition="'@ValueofDB:tblSysDeploy_Setting'=='true'"> 
			<!--将销售报价单，销售报价单明细模块启用-->
			<sql>update tblModules set IsUsed=1 where linkAddress in ('/UserFunctionQueryAction.do?tableName=tblSalseQuote','/ReportDataAction.do?reportNumber=ReportSalseQuoteDet')</sql>
			<!--销售订单增加引用销售报价单的拓展按钮-->
			<sql>update tblDBTableInfo set extendButton=extendButton+'&lt;button type="quote&quot; operation=&quot;add&quot; value=&quot;tblSalseQuote:quote_tblSalseQuote&quot; name=&quot;tblSalesQuote">' where tableName='tblSalesOrder'</sql>
			<sql>UPDATE tblBillNo SET statusId ='0' WHERE [KEY] = 'tblSalseQuote_BillNo'</sql>
      <!--将审核流放出-->
      <sql>UPDATE OAWorkFlowTemplate SET statusId = '0' WHERE templateFile='tblSalseQuote'</sql>
	  <sql>INSERT INTO tblImportData(id,NAME,targetTable,flag,createBy,createTime,statusId,finishTime) SELECT SUBSTRING(REPLACE(NEWID(),'-',''),1,28),'销售报价','tblSalseQuote',1,1,'2013-12-20 11:19:41',0,'2013-12-20 11:19:41'</sql>
		</exec>	
		<exec condition="'@ValueofDB:tblSysDeploy_Setting'=='false'"> 
			<!--将销售报价单，销售报价单明细模块启用-->
			<sql>update tblModules set IsUsed=2 where linkAddress in ('/UserFunctionQueryAction.do?tableName=tblSalseQuote','/ReportDataAction.do?reportNumber=ReportSalseQuoteDet')</sql>
			<!--销售订单删除引用销售报价单的拓展按钮-->
			<sql>update tblDBTableInfo set extendButton=replace(extendButton,'&lt;button type="quote&quot; operation=&quot;add&quot; value=&quot;tblSalseQuote:quote_tblSalseQuote&quot; name=&quot;tblSalesQuote">','') where tableName='tblSalesOrder'</sql>
			<sql>UPDATE tblBillNo SET statusId ='-1' WHERE [KEY] = 'tblSalseQuote_BillNo'</sql>
      <!--将审核流隐藏-->
      <sql>UPDATE OAWorkFlowTemplate SET statusId = '-1' WHERE templateFile='tblSalseQuote'</sql>
	  <sql>DELETE FROM tblImportData WHERE targetTable ='tblSalseQuote'</sql>
		</exec>
	</sql>			
</define>
<define name="SysDeploy_update_CustomerCreditLimit">
	<sql type="condition">
		<exec condition="'@ValueofDB:tblSysDeploy_Setting'=='true'"> 
			<sql>INSERT INTO tblImportData(id,NAME,targetTable,flag,createBy,createTime,statusId,finishTime) SELECT SUBSTRING(REPLACE(NEWID(),'-',''),1,28),'临时额度申请','tblTempCreditApply',1,1,'2013-12-20 11:19:41',0,'2013-12-20 11:19:41'</sql>
		</exec>
		<exec condition="'@ValueofDB:tblSysDeploy_Setting'=='false'"> 
			<sql>DELETE FROM tblImportData WHERE targetTable ='tblTempCreditApply'</sql>
		</exec>
	</sql>
</define>
<!--======采购询价流程=======-->
<define name="SysDeploy_update_tblBuyAskPriceFlow">
	<sql type="condition"> 
		<condition><select>select count(*) as RecordCount from tblBuyAskPrice</select></condition>
		<exec condition="'@SqlReturn:RecordCount' != '0' &amp;&amp; '@ValueofDB:tblSysDeploy_Setting'=='false'">				
			<error>SysDeploy.update.hasrecord.error6,&quot;采购询价流程&quot;</error>                  
		</exec>
		<exec condition="'@ValueofDB:tblSysDeploy_Setting'=='true'"> 
			<!--将采购询价单，采购询价单明细模块启用-->
			<sql>update tblModules set IsUsed=1 where linkAddress in ('/UserFunctionQueryAction.do?tableName=tblBuyAskPrice','/ReportDataAction.do?reportNumber=ReportAskPrice')</sql>
			<!--采购订单增加引用采购询价单的拓展按钮
			<sql>update tblDBTableInfo set extendButton=extendButton+'&lt;button type="quote&quot; operation=&quot;add&quot; value=&quot;tblBuyAskPrice:tblBuyOrder_quote_tblBuyAskPrice&quot; name=&quot;BuyOrders">' where tableName='tblBuyOrder'</sql>
			采购入库单增加引用采购询价单的拓展按钮 
			<sql>update tblDBTableInfo set extendButton=extendButton+'&lt;button type="quote&quot; operation=&quot;add&quot; value=&quot;tblBuyAskPrice:tblBuyInStock_quote_tblBuyAskPrice&quot; name=&quot;BuyOrders">' where tableName='tblBuyInStock'</sql>-->
			<!--采购订单、入库单明细表、销售报价明细表的询价单号改为关联表选择-->
			<sql>update tblDBFieldInfo set inputType=2,inputTypeOld=2 where tableId in (select id from tblDBTableInfo where tableName in ('tblBuyOrderDet','tblBuyInStockDet')) and fieldName='BuyAskPriceID'</sql>
			<sql>update tblDBFieldInfo set inputType=2,inputTypeOld=2 where tableId in (select id from tblDBTableInfo where tableName in ('tblSalseQuoteDet')) and fieldName='BuyAskPriceDetID'</sql>
			<sql>UPDATE tblBillNo SET statusId ='0' WHERE [KEY] = 'tblBuyAskPrice_BillNo'</sql>
			<!--将审核流放出-->
			<sql>UPDATE OAWorkFlowTemplate SET statusId = '0' WHERE templateFile='tblBuyAskPrice'</sql>
			<sql>INSERT INTO tblImportData(id,NAME,targetTable,flag,createBy,createTime,statusId,finishTime)
SELECT SUBSTRING(REPLACE(NEWID(),'-',''),1,28),'采购询价单','tblBuyAskPrice',1,1,'2013-12-20 11:19:41',0,'2013-12-20 11:19:41'</sql>
		</exec>	
		<exec condition="'@ValueofDB:tblSysDeploy_Setting'=='false'"> 
			<!--将采购询价单，采购询价单明细模块停用-->
			<sql>update tblModules set IsUsed=2 where linkAddress in ('/UserFunctionQueryAction.do?tableName=tblBuyAskPrice','/ReportDataAction.do?reportNumber=ReportAskPrice')</sql>
			<!--采购订单删除引用采购询价单的拓展按钮
			<sql>update tblDBTableInfo set extendButton=replace(extendButton,'&lt;button type="quote&quot; operation=&quot;add&quot; value=&quot;tblBuyAskPrice:tblBuyOrder_quote_tblBuyAskPrice&quot; name=&quot;BuyOrders">','') where tableName='tblBuyOrder'</sql>
			采购入库单删除引用采购询价单的拓展按钮
			<sql>update tblDBTableInfo set extendButton=replace(extendButton,'&lt;button type="quote&quot; operation=&quot;add&quot; value=&quot;tblBuyAskPrice:tblBuyInStock_quote_tblBuyAskPrice&quot; name=&quot;BuyOrders">','') where tableName='tblBuyInStock'</sql>-->
			<!--采购订单、入库单明细表、销售报价明细表的询价单号改为关联表选择-->
			<sql>update tblDBFieldInfo set inputType=3,inputTypeOld=3 where tableId in (select id from tblDBTableInfo where tableName in ('tblBuyOrderDet','tblBuyInStockDet')) and fieldName='BuyAskPriceID'</sql>
			<sql>update tblDBFieldInfo set inputType=3,inputTypeOld=3 where tableId in (select id from tblDBTableInfo where tableName in ('tblSalseQuoteDet')) and fieldName='BuyAskPriceDetID'</sql>
			<sql>UPDATE tblBillNo SET statusId ='-1' WHERE [KEY] = 'tblBuyAskPrice_BillNo'</sql>
			<!--将审核流隐藏-->
      <sql>UPDATE OAWorkFlowTemplate SET statusId = '-1' WHERE templateFile='tblBuyAskPrice'</sql>
	  <sql>DELETE FROM tblImportData WHERE targetTable ='tblBuyAskPrice'</sql>
		</exec>
	</sql>			
</define>
<!--======增值税发票，普通发票=======-->
<define name="SysDeploy_update_Invoice">
	<sql type="condition"> 
		<exec condition="isNaN('@ValueofDB:tblSysDeploy_Setting')||'@ValueofDB:tblSysDeploy_Setting'&lt;0"> 
			<error>必须为大于等于0的数值</error> 
		</exec>	
	</sql>			
</define>
<!--======出库类单据保存时判断可用库存=======-->
<define name="SysDeploy_update_OutBillUseQtyCheck">
	
</define>
<!--======启用项目管理=======-->
<define name="SysDeploy_update_Project">
	<sql type="condition">
		<condition>
			<select>SELECT 'exist' AS exist FROM tblAccTypeInfo WHERE IsProject ='1'</select>
		</condition>
		<exec condition="'@SqlReturn:exist'=='exist'">
			<error>existdata.error</error>
		</exec> 
		<exec condition="'@ValueofDB:tblSysDeploy_Setting'=='true'">
			<sql>UPDATE tblModules SET IsHidden = '2' WHERE tblName = 'tblProject'</sql>
			<sql>UPDATE tblDBFieldInfo SET inputType = '2',inputValue = 'SelectProjectInfo' WHERE fieldName = 'ProjectCode' AND tableId IN (SELECT id FROM tblDBTableInfo WHERE tableName IN (SELECT DISTINCT a.tableName FROM tblDBTableInfo a JOIN sys.objects b ON a.tableName = b.name JOIN sys.[columns] c ON c.[object_id] = OBJECT_ID(a.tableName) JOIN tblModules d ON a.tableName = d.tblName WHERE a.MainModule = '1' AND a.tableType = 0 AND a.isView = 0 AND a.isBaseInfo!=1 AND a.tableName NOT IN ('tblCompanyDetTemp','tblCompanyIni','tblRepCompanyDetTemp','tblStockDet','tblAccDetailTemplete','tblAccDetailTempProfit','tblUserDefTraAcDet','tblIncomeDetl','tblExpenseDet') AND b.[type] = 'u' AND c.name = 'CompanyCode' AND d.IsUsed = '1'))</sql>
			<sql>UPDATE tblDBFieldInfo SET inputType = 1,refEnumerationName = 'YesNo' WHERE fieldName = 'IsProject' AND tableId = (SELECT id FROM tblDBTableInfo WHERE tableName = 'tblAccTypeInfo')</sql>
			<sql>DELETE FROM tblColConfig WHERE tableName IN (SELECT DISTINCT a.tableName FROM tblDBTableInfo a JOIN tblDBFieldInfo dd ON a.id =dd.tableId JOIN sys.objects b ON a.tableName = b.name JOIN sys.[columns] c ON c.[object_id] = OBJECT_ID(a.tableName) JOIN tblModules d ON a.tableName = d.tblName WHERE dd.fieldName ='ProjectCode' AND a.MainModule = '1' AND a.tableType = 0 AND a.isView = 0 AND a.isBaseInfo!=1 AND a.tableName NOT IN ('tblCompanyDetTemp','tblCompanyIni','tblRepCompanyDetTemp','tblStockDet','tblAccDetailTemplete','tblAccDetailTempProfit','tblUserDefTraAcDet','tblIncomeDetl','tblExpenseDet') AND b.[type] = 'u' AND c.name = 'CompanyCode' AND d.IsUsed = '1')</sql>
		</exec>
		<exec condition="'@ValueofDB:tblSysDeploy_Setting'=='false'">
			<sql>UPDATE tblModules SET IsHidden = '1' WHERE tblName = 'tblProject'</sql>
			<sql>UPDATE tblDBFieldInfo SET inputType = 3 WHERE fieldName = 'ProjectCode' AND tableId IN (SELECT id FROM tblDBTableInfo WHERE tableName IN (SELECT DISTINCT a.tableName FROM tblDBTableInfo a JOIN sys.objects b ON a.tableName = b.name JOIN sys.[columns] c ON c.[object_id] = OBJECT_ID(a.tableName) JOIN tblModules d ON a.tableName = d.tblName WHERE a.MainModule = '1' AND a.tableType = 0 AND a.isView = 0 AND a.isBaseInfo!=1 AND a.tableName NOT IN ('tblCompanyDetTemp','tblCompanyIni','tblRepCompanyDetTemp','tblStockDet','tblAccDetailTemplete','tblAccDetailTempProfit','tblUserDefTraAcDet','tblIncomeDetl','tblExpenseDet') AND b.[type] = 'u' AND c.name = 'CompanyCode' AND d.IsUsed = '1'))</sql>
			<sql>UPDATE tblDBFieldInfo SET inputType = 100 WHERE fieldName = 'IsProject' AND tableId = (SELECT id FROM tblDBTableInfo WHERE tableName = 'tblAccTypeInfo')</sql>
		</exec>		
	</sql>			
</define>
<!--======列表页每页显示行数=======-->
<define name="SysDeploy_update_PageSize">
	<sql type="condition"> 
		<exec condition="'@ValueofDB:tblSysDeploy_Setting'.search(new RegExp('^[0-9]*$'))&lt;=-1||@ValueofDB:tblSysDeploy_Setting&gt;1000||@ValueofDB:tblSysDeploy_Setting&lt;=0">
  		<error>必须为大于0且小于等于1000的整数</error> 
   	</exec>		
	</sql>			
</define>
<!--=========采购订单单价差异提醒==========-->
<define name="SysDeploy_update_DifferenceOfPriceInBuyOrder">
	<sql type="condition">
		<exec condition="@ValueofDB:tblSysDeploy_Setting&lt;0||@ValueofDB:tblSysDeploy_Setting&gt;100">
			<error>SysDeploy.update.DifferenceOfPriceInBuyOrder</error>
		</exec>
	</sql>
</define>
<!--======小数保留位数=======-->
<define name="SysDeploy_update_Digits">
	<sql type="condition"> 
		<condition>
			<select>select top 1 'ExistStockDet' AS ExistStockDet from tblstockdet </select>
			<select>select top 1 'ExistCompany' AS ExistCompany from tblCompanyIni </select>
			<select>select top 1 'ExistAccDetail' AS ExistAccDetail from tblAccDetail </select>
		</condition>
		<!--如果库存，往来，凭证中存在数据则不允许修改小数位数-->
		<exec condition="'@SqlReturn:ExistStockDet' == 'ExistStockDet'||'@SqlReturn:ExistCompany' == 'ExistCompany'||'@SqlReturn:ExistAccDetail' == 'ExistAccDetail'">
			<error>existdata.error</error>
		</exec>
		<!--必须输入0-8之前的整数-->
		<exec condition="('@ValueofDB:tblSysDeploy_Setting'.length!=1||'@ValueofDB:tblSysDeploy_Setting'.search(new RegExp('^[0-8]*$'))&lt;=-1)">
  		<error>必须为0-8之间的整数</error> 
   	</exec>		
   	<!-- 数量小数位数 -->
		<exec condition="'@ValueofDB:tblSysDeploy_SysCode'=='DigitsQty' ">
			<sql>update tblDBFieldInfo set digits=@ValueofDB:tblSysDeploy_Setting where fieldType='1' and fieldIdentityStr='Qty'</sql>
		</exec>
		<!-- 单价小数位数 -->
		<exec condition="'@ValueofDB:tblSysDeploy_SysCode'=='DigitsPrice'">
			<sql>update tblDBFieldInfo set digits=@ValueofDB:tblSysDeploy_Setting where fieldType='1' and fieldIdentityStr in ('priceIdentifier','SPriceIdentifier','Price')</sql>
		</exec>
		<!-- 金额小数位数 -->
		<exec condition="'@ValueofDB:tblSysDeploy_SysCode'=='DigitsAmount'">
			<sql>update tblDBFieldInfo set digits=@ValueofDB:tblSysDeploy_Setting where fieldType='1' and fieldIdentityStr in ('Amount','AmountIdentifier','SAmountIdentifier')</sql>
		</exec>
	</sql>			
</define>

<!--======商品销售核算价=======-->
<define name="SysDeploy_update_GoodsSalesAccountPrice">
	<sql type="condition"> 
		<exec condition="'@ValueofDB:tblSysDeploy_Setting'=='true'">
			<sql>update tbldbfieldinfo set inputTypeOld=0,InputType=0,isNull=1 where tableid in (select id from tbldbtableinfo where tablename in ('tblGoods')) and fieldname='AccountingPrice'</sql>
			<sql>update tbldbfieldinfo set inputTypeOld=8,InputType=8,isNull=1 where tableid in (select id from tbldbtableinfo where tablename in ('tblSalesOutStockDet','tblSalesReturnStockDet','tblSalesReplaceDet','tblSalesReplaceDetail')) and fieldname='AccountingPrice'</sql>
		</exec>			
		<exec condition="'@ValueofDB:tblSysDeploy_Setting'=='false'">
			<sql>update tbldbfieldinfo set inputTypeOld=100,InputType=100,isNull=0 where tableid in (select id from tbldbtableinfo where tablename in ('tblSalesOutStockDet','tblSalesReturnStockDet','tblGoods','tblSalesReplaceDet','tblSalesReplaceDetail')) and fieldname='AccountingPrice'</sql>
		</exec>		
	</sql>			
</define>

<!--======辅助单位=======-->
<define name="SysDeploy_update_AssUnit">
	<sql>delete from tblColConfig</sql>		
</define>

<!--======启用保质期=======-->
<define name="SysDeploy_update_Availably">
	<sql type="condition"> 
		<condition><select>select isUsed from tblGoodsPropInfo where propName='BatchNo'</select></condition>
		<exec condition="'@ValueofDB:tblSysDeploy_Setting'=='true' &amp;&amp; '@SqlReturn:isUsed' == '2'">
			<error>UsedBatchNo.NoUsed.error</error>
		</exec>
	</sql>			
</define>
<!--======采购订单录入到货日期=======-->
<define name="SysDeploy_update_DeliveryDate">
	<sql type="condition"> 
		<!-- 当系统配置启用采购订单必须录入到货日期时显示明细表到货日期-->
		<exec condition="'@ValueofDB:tblSysDeploy_Setting'=='true'">
			<sql>update tblDBFieldInfo set inputType='0',isNull=1 from tblDBFieldInfo f left join tblDBTableInfo t on t.id=f.tableId where tableName='tblBuyOrderDet' and fieldName='ArriveDate'</sql>
		</exec>		
		<!-- 当系统配置不启用采购订单必须录入到货日期时显示明细表到货日期-->
		<exec condition="'@ValueofDB:tblSysDeploy_Setting'=='false'">
			<sql>update tblDBFieldInfo set inputType='3',isNull=0 from tblDBFieldInfo f left join tblDBTableInfo t on t.id=f.tableId where tableName='tblBuyOrderDet' and fieldName='ArriveDate'</sql>
		</exec>	
	</sql>
</define>
<!--======销售订单录入发货日期=======-->
<define name="SysDeploy_update_ArrivalDate">
	<sql type="condition"> 
		<!-- 当系统配置启用销售订单必须录入发货日期时显示明细表发货日期-->
		<exec condition="'@ValueofDB:tblSysDeploy_Setting'=='true'">
			<sql>update tblDBFieldInfo set inputType='0',isNull=1 from tblDBFieldInfo f left join tblDBTableInfo t on t.id=f.tableId where tableName='tblSalesOrderDet' and fieldName='SendDate'</sql>
		</exec>
		<!-- 当系统配置不启用销售订单必须录入发货日期时显示明细表发货日期-->
		<exec condition="'@ValueofDB:tblSysDeploy_Setting'=='false'">
			<sql>update tblDBFieldInfo set inputType='3',isNull=0 from tblDBFieldInfo f left join tblDBTableInfo t on t.id=f.tableId where tableName='tblSalesOrderDet' and fieldName='SendDate'</sql>
		</exec>	
	</sql>
</define>

<!--======往来单位支持对应商品预设售价=======-->
<define name="SysDeploy_update_PresetPrice">
	<sql type="condition"> 
		<!-- 当系统配置禁用往来单位预设售价时，设预设售价为隐藏 -->
		<exec condition="'@ValueofDB:tblSysDeploy_Setting'=='false'">
			<sql>update tblDBFieldInfo set inputType='3' from tblDBFieldInfo f left join tblDBTableInfo t on t.id=f.tableId where tableName='tblCompany' and fieldName='ComSalesType'</sql>
		</exec>		
		<!-- 当系统配置启用往来单位预设售价时，设预设售价为隐藏可显示 -->
		<exec condition="'@ValueofDB:tblSysDeploy_Setting'=='true'">
			<sql>update tblDBFieldInfo set inputType='6' from tblDBFieldInfo f left join tblDBTableInfo t on t.id=f.tableId where tableName='tblCompany' and fieldName='ComSalesType'</sql>
		</exec>	
	</sql>
</define>
<!--======是否允许负库存过账=======-->
<define name="SysDeploy_update_NegativeStock">
	<sql type="condition"><!--如果修改的是负库存过账，并且成本计算方法为移动加权或者先进先出，不允许修改-->
		<condition><select>select count(0) as NeCount from tblSysDeploy where @ValueofDB:tblSysDeploy_Setting='true' and SysCode='GoodsCostingMethod' and (Setting='MWAM' or Setting='FIFO')</select></condition>	
		<exec condition="@SqlReturn:NeCount&gt;0">
			<error>tblSysDeploy.Negative.error</error> 
		</exec>
	</sql>
</define>

<!--======采购类单据多仓库=======-->
<define name="SysDeploy_update_ManyStockBuy">
	<sql type="condition">
		<condition>
			<select>SELECT b.BillNo BuyBillNo,'采购订单' BuyBillType FROM tblBuyOrderDet a JOIN tblBuyOrder b ON a.f_ref = b.id WHERE LEN(ISNULL(a.StockCode,''))!=0 AND LEN(ISNULL(b.StockCode,''))=0 UNION ALL SELECT b.BillNo,'采购入库单' BillType FROM tblBuyInStockDet a JOIN tblBuyInStock b ON a.f_ref = b.id WHERE LEN(ISNULL(a.StockCode,''))!=0 AND LEN(ISNULL(b.StockCode,''))=0 UNION ALL SELECT b.BillNo,'采购退货单' BillType FROM tblBuyOutStockDet a JOIN tblBuyOutStock b ON a.f_ref = b.id WHERE LEN(ISNULL(a.StockCode,''))!=0 AND LEN(ISNULL(b.StockCode,''))=0 UNION ALL SELECT b.BillNo,'采购换货单' BillType FROM tblBuyReplaceDet a JOIN tblBuyReplace b ON a.f_ref = b.id WHERE LEN(ISNULL(a.StockCode,''))!=0 AND LEN(ISNULL(b.StockCode,''))=0</select>
		</condition>
		<exec condition="'@ValueofDB:tblSysDeploy_Setting'=='false'&amp;&amp;'@SqlReturn:BuyBillNo'!='null'&amp;&amp;'@SqlReturn:BuyBillNo'.length!=0">
			<error>ManyStocks.isUsed.error,@SqlReturn:BuyBillType,@SqlReturn:BuyBillNo</error>
		</exec>
		<!--启用多仓库，隐藏主表仓库，显示明细表仓库-->
		<exec condition="'@ValueofDB:tblSysDeploy_Setting'=='true'">
			<sql>update tbldbfieldinfo set inputTypeOld=3,inputType=3,isnull=0 where tableid in (select id from tbldbtableinfo where tablename in ('tblBuyOrder','tblBuyInStock','tblBuyOutStock','tblBuyReplace','tblBuyChange')) and fieldname='StockCode'</sql>
			<sql>update tbldbfieldinfo set inputTypeOld=3,inputType=3,isnull=0 where tableid in  (select  id from tbldbtableinfo where tablename in ('tblBuyReplace')) and fieldname='InStockCode'</sql>
			<sql>update tbldbfieldinfo set inputTypeOld=2,inputType=2,isnull=1 where tableid in (select id from tbldbtableinfo where tablename in ('tblBuyInStockDet','tblBuyOutStockDet','tblBuyReplaceDet','tblBuyReplaceDetail','tblBuyChangeDet')) and fieldname='StockCode'</sql>
			<sql>update tbldbfieldinfo set inputTypeOld=2,inputType=2,isnull=0 where tableid in (select  id from tbldbtableinfo where tablename in ('tblBuyOrderDet')) and fieldname='StockCode'</sql>
			<!-- 删除列配置 -->	
			<sql>delete from tblColConfig where tablename in ('tblBuyOrder','tblBuyInStock','tblBuyOutStock','tblBuyReplace','tblBuyChange','tblBuyInStockDet','tblBuyPayAccount','tblBuyOutStockDet','tblBuyReplaceDet','tblBuyReplaceDetail','tblBuyChangeDet','tblBuyOrderDet')</sql>
		</exec>
		<!--单仓库，隐藏明细表仓库，启用主表仓库-->
		<exec condition="'@ValueofDB:tblSysDeploy_Setting'=='false'">
			<sql>update tbldbfieldinfo set inputTypeOld=2,inputType=2,isnull=1 where tableid in (select  id from tbldbtableinfo where tablename in ('tblBuyInStock','tblBuyOutStock','tblBuyReplace','tblBuyChange')) and fieldname='StockCode'</sql>
			<sql>update tbldbfieldinfo set inputTypeOld=2,inputType=2,isnull=0 where tableid in (select  id from tbldbtableinfo where tablename in ('tblBuyOrder')) and fieldname='StockCode'</sql>
			<sql>update tbldbfieldinfo set inputTypeOld=2,inputType=2,isnull=1 where tableid in (select  id from tbldbtableinfo where tablename in ('tblBuyReplace')) and fieldname='InStockCode'</sql>
			<sql>update tbldbfieldinfo set inputTypeOld=3,inputType=3,isnull=0 where tableid in (select  id from tbldbtableinfo where tablename in ('tblBuyOrderDet','tblBuyInStockDet','tblBuyOutStockDet','tblBuyReplaceDet','tblBuyReplaceDetail','tblBuyChangeDet')) and fieldname='StockCode'</sql>
			<!-- 删除列配置 -->	
			<sql>delete from tblColConfig where tablename in ('tblBuyOrder','tblBuyInStock','tblBuyOutStock','tblBuyReplace','tblBuyChange','tblBuyInStockDet','tblBuyPayAccount','tblBuyOutStockDet','tblBuyReplaceDet','tblBuyReplaceDetail','tblBuyChangeDet','tblBuyOrderDet')</sql>
		</exec>	
	</sql>
</define>
<!--======销售类单据多仓库=======-->
<define name="SysDeploy_update_ManyStockSales">
	<sql type="condition">
	<condition>
		<select>SELECT b.BillNo SalesBillNo,'销售订单' SalesBillType FROM tblSalesOrderDet a JOIN tblSalesOrder b ON a.f_ref = b.id WHERE LEN(ISNULL(a.StockCode,''))!=0 AND LEN(ISNULL(b.StockCode,''))=0 UNION ALL SELECT b.BillNo,'销售出库单' BillType FROM tblSalesOutStockDet a JOIN tblSalesOutStock b ON a.f_ref = b.id WHERE LEN(ISNULL(a.StockCode,''))!=0 AND LEN(ISNULL(b.StockCode,''))=0 UNION ALL SELECT b.BillNo,'销售退货单' BillType FROM tblSalesReturnStockDet a JOIN tblSalesReturnStock b ON a.f_ref = b.id WHERE LEN(ISNULL(a.StockCode,''))!=0 AND LEN(ISNULL(b.StockCode,''))=0 UNION ALL SELECT b.BillNo,'销售换货单' BillType FROM tblSalesReplaceDet a JOIN tblSalesReplace b ON a.f_ref = b.id WHERE LEN(ISNULL(a.StockCode,''))!=0 AND LEN(ISNULL(b.StockCode,''))=0</select>
	</condition>
	<exec condition="'@ValueofDB:tblSysDeploy_Setting'=='false'&amp;&amp;'@SqlReturn:SalesBillNo'!='null'&amp;&amp;'@SqlReturn:SalesBillNo'.length!=0">
			<error>ManyStocks.isUsed.error,@SqlReturn:SalesBillType,@SqlReturn:SalesBillNo</error>
		</exec>
	<!--启用多仓库，隐藏主表仓库，显示明细表仓库-->
	<exec condition="'@ValueofDB:tblSysDeploy_Setting'=='true'">
		<sql>update tbldbfieldinfo set inputTypeOld=3,inputType=3,isnull=0 where tableid in (select  id from tbldbtableinfo where tablename in ('tblSalesOrder','tblSalesOutStock','tblSalesReturnStock','tblSalesChange','tblSalesReplace')) and fieldname='StockCode'</sql>
		<sql>update tbldbfieldinfo set inputTypeOld=3,inputType=3,isnull=0 where tableid in (select  id from tbldbtableinfo where tablename in ('tblSalesReplace')) and fieldname='InStockCode'</sql>
		<sql>update tbldbfieldinfo set inputTypeOld=2,inputType=2,isnull=1 where tableid in (select  id from tbldbtableinfo where tablename in ('tblSalesOutStockDet','tblSalesReturnStockDet','tblSalesChangeDet','tblSalesReplaceDet','tblSalesReplaceDetail')) and fieldname='StockCode'</sql>
		<sql>update tbldbfieldinfo set inputTypeOld=2,inputType=2,isnull=0 where tableid in (select  id from tbldbtableinfo where tablename in ('tblSalesOrderDet')) and fieldname='StockCode'</sql>
		<!-- 删除列配置 -->	
		<sql>delete from tblColConfig where tablename in ('tblSalesOrder','tblSalesOutStock','tblSalesReturnStock','tblSalesChange','tblSalesReplace','tblSalesReplace','tblSalesOutStockDet','tblSalesReturnStockDet','tblSalesChangeDet','tblSalesReplaceDet','tblSalesReplaceDetail','tblSalesOrderDet','tblSalesRecAccount')</sql>
	</exec>
	<!--启用单仓库，隐藏明细表仓库，显示主表仓库-->
	<exec condition="'@ValueofDB:tblSysDeploy_Setting'=='false'">
		<sql>update tbldbfieldinfo set inputTypeOld=2,inputType=2,isnull=1 where tableid in (select  id from tbldbtableinfo where tablename in ('tblSalesOutStock','tblSalesReturnStock','tblSalesChange','tblSalesReplace')) and fieldname='StockCode'</sql>
		<sql>update tbldbfieldinfo set inputTypeOld=2,inputType=2,isnull=0 where tableid in (select  id from tbldbtableinfo where tablename in ('tblSalesOrder')) and fieldname='StockCode'</sql>
		<sql>update tbldbfieldinfo set inputTypeOld=2,inputType=2,isnull=1 where tableid in (select  id from tbldbtableinfo where tablename in ('tblSalesReplace')) and fieldname='InStockCode'</sql>
		<sql>update tbldbfieldinfo set inputTypeOld=3,inputType=3,isnull=0 where tableid in (select  id from tbldbtableinfo where tablename in ('tblSalesOrderDet','tblSalesOutStockDet','tblSalesReturnStockDet','tblSalesChangeDet','tblSalesReplaceDet','tblSalesReplaceDetail')) and fieldname='StockCode'</sql>
		<!-- 删除列配置 -->	
		<sql>delete from tblColConfig where tablename in ('tblSalesOrder','tblSalesOutStock','tblSalesReturnStock','tblSalesChange','tblSalesReplace','tblSalesReplace','tblSalesOutStockDet','tblSalesReturnStockDet','tblSalesChangeDet','tblSalesReplaceDet','tblSalesReplaceDetail','tblSalesOrderDet','tblSalesRecAccount')</sql>
	</exec>
	</sql>
</define>
<!--======仓库类单据多仓库=======-->
<define name="SysDeploy_update_ManyStockStore">
	<sql type="condition">
	<condition>
		<select>SELECT b.BillNo StockBillNO,'报损单' StockBillType FROM tblCheckDet a JOIN tblCheck b ON a.f_ref = b.id WHERE LEN(ISNULL(a.StockCode,''))!=0 AND LEN(ISNULL(b.StockCode,''))=0 UNION ALL SELECT b.BillNo,'同价调拨单' BillType FROM tblAllotDet a JOIN tblAllot b ON a.f_ref = b.id WHERE LEN(ISNULL(a.StockCode,''))!=0 AND LEN(ISNULL(b.StockCode,''))=0 UNION ALL SELECT b.BillNo,'变价调拨单' BillType FROM tblAllotChangeDet a JOIN tblAllotChange b ON a.f_ref = b.id WHERE LEN(ISNULL(a.StockCode,''))!=0 AND LEN(ISNULL(b.StockCode,''))=0 UNION ALL SELECT b.BillNo,'其他出库单' BillType FROM tblOtherOutDet a JOIN tblOtherOut b ON a.f_ref = b.id WHERE LEN(ISNULL(a.StockCode,''))!=0 AND LEN(ISNULL(b.StockCode,''))=0 UNION ALL SELECT b.BillNo,'其他入库单' BillType FROM tblOtherInDet a JOIN tblOtherIn b ON a.f_ref = b.id WHERE LEN(ISNULL(a.StockCode,''))!=0 AND LEN(ISNULL(b.StockCode,''))=0 UNION ALL SELECT b.BillNo,'调拨申请单' BillType FROM tblAllotApplicationDet a JOIN tblAllotApplication b ON a.f_ref = b.id WHERE LEN(ISNULL(a.StockCode,''))!=0 AND LEN(ISNULL(b.StockCode,''))=0 UNION ALL SELECT b.BillNo,'配送单' BillType FROM tblSendDet a JOIN tblSend b ON a.f_ref = b.id WHERE LEN(ISNULL(a.StockCode,''))!=0 AND LEN(ISNULL(b.StockCode,''))=0 UNION ALL SELECT b.BillNo,'配送验收单' BillType FROM tblSendcheckDet a JOIN tblSendcheck b ON a.f_ref = b.id WHERE LEN(ISNULL(a.StockCode,''))!=0 AND LEN(ISNULL(b.StockCode,''))=0 UNION ALL SELECT b.BillNo,'配送退货单' BillType FROM tblSendReturnDet a JOIN tblSendReturn b ON a.f_ref = b.id WHERE LEN(ISNULL(a.StockCode,''))!=0 AND LEN(ISNULL(b.StockCode,''))=0</select>
	</condition>
	<exec condition="'@ValueofDB:tblSysDeploy_Setting'=='false'&amp;&amp;'@SqlReturn:StockBillNO'!='null'&amp;&amp;'@SqlReturn:StockBillNO'.length!=0">
			<error>ManyStocks.isUsed.error,@SqlReturn:StockBillType,@SqlReturn:StockBillNO</error>
		</exec>
	</sql>
	<sql type="condition">
		<!--单仓库，将单据主表的仓库显示，明细表的仓库隐藏-->
		<exec condition="'@ValueofDB:tblSysDeploy_Setting'=='false'"> 
			<sql>update tbldbfieldinfo set inputTypeOld=2,inputType=2,isnull=1 where tableid in (select  id from tbldbtableinfo where tablename in ('tblCheck','tblAllot','tblAllotChange','tblAllotApplication','tblOtherOut','tblOtherIn','tblCheckReady','tblAttributeAdjust','tblSend','tblSendcheck','tblSendReturn')) and fieldname='StockCode'</sql>
			<sql>update tbldbfieldinfo set inputTypeOld=2,inputType=2,isnull=1 where tableid in (select  id from tbldbtableinfo where tablename in ('tblAllot','tblAllotChange','tblAllotApplication','tblSendReturn')) and fieldname='InStockCode'</sql>
			
			<sql>update tbldbfieldinfo set inputTypeOld=3,inputType=3,isnull=0 where tableid in (select  id from tbldbtableinfo where tablename in ('tblCheckDet','tblAllotDet','tblAllotChangeDet','tblOtherOutDet','tblOtherInDet','tblCheckReadyDet','tblAttributeAdjustDet','tblSendDet','tblSendcheckDet','tblAllotApplicationDet','tblSendReturnDet')) and fieldname='StockCode'</sql>
			<sql>update tbldbfieldinfo set inputTypeOld=3,inputType=3,isnull=0 where tableid in (select  id from tbldbtableinfo where tablename in ('tblAllotDet','tblAllotChangeDet','tblAllotApplicationDet','tblSendReturnDet')) and fieldname='InStockCode'</sql>
			<!-- 删除列配置 -->	
			<sql>delete from tblColConfig where tablename in ('tblCheck','tblAllot','tblAllotChange','tblOtherOut','tblSendcheck','tblOtherIn','tblCheckReady','tblAttributeAdjust','tblAllot','tblAllotChange','tblCheckDet','tblAllotDet','tblAllotChangeDet','tblOtherOutDet','tblOtherInDet','tblCheckReadyDet','tblSendcheckDet','tblAttributeAdjustDet')</sql>
		</exec>	
		<!--多仓库，将单据主表的仓库隐藏，明细表的仓库显示-->
		<exec condition="'@ValueofDB:tblSysDeploy_Setting'=='true'">	
			<sql>update tbldbfieldinfo set inputTypeOld=3,inputType=3,isnull=0 where tableid in (select  id from tbldbtableinfo where tablename in ('tblCheck','tblAllot','tblAllotChange','tblAllotApplication','tblOtherOut','tblOtherIn','tblCheckReady','tblAttributeAdjust','tblSend','tblSendcheck','tblSendReturn')) and fieldname='StockCode'</sql>
			<sql>update tbldbfieldinfo set inputTypeOld=3,inputType=3,isnull=0 where tableid in (select  id from tbldbtableinfo where tablename in ('tblAllot','tblAllotChange','tblAllotApplication','tblSendReturn')) and fieldname='InStockCode'</sql>

			<sql>update tbldbfieldinfo set inputTypeOld=2,inputType=2,isnull=1 where tableid in (select  id from tbldbtableinfo where tablename in ('tblCheckDet','tblAllotDet','tblAllotChangeDet','tblAllotApplicationDet','tblOtherOutDet','tblOtherInDet','tblCheckReadyDet','tblAttributeAdjustDet','tblSendDet','tblSendcheckDet','tblSendReturnDet')) and fieldname='StockCode'</sql>
			<sql>update tbldbfieldinfo set inputTypeOld=2,inputType=2,isnull=1 where tableid in (select  id from tbldbtableinfo where tablename in ('tblAllotDet','tblAllotChangeDet','tblAllotApplicationDet','tblSendReturnDet')) and fieldname='InStockCode'</sql>
			<!-- 删除列配置 -->	
			<sql>delete from tblColConfig where tablename in ('tblCheck','tblCheckMore','tblAdjustPrice','tblAllot','tblAllotChange','tblOtherOut','tblSendcheck','tblOtherIn','tblCheckReady','tblAttributeAdjust','tblAllot','tblAllotChange','tblCheckDet','tblAllotDet','tblSendcheckDet','tblAllotChangeDet','tblOtherOutDet','tblOtherInDet','tblCheckReadyDet','tblAttributeAdjustDet')</sql>			 
		</exec>	
	</sql>
</define>
<!--======商品编号，名称不允许重复=======-->
<define name="SysDeploy_update_GoodsUnique">
	<!--<sql type="condition">商品编号不允许重复  商品名称不允许重复 不能同时停用
		<condition><select>SELECT a.Setting AS GoodsNameSet,b.Setting AS GoodsNoSet FROM tblSysDeploy a,tblSysDeploy b WHERE a.SysCode = 'GoodsNameUnique' AND b.SysCode = 'GoodsNOUnique'</select></condition>
		<exec condition="'@SqlReturn:GoodsNameSet'=='@SqlReturn:GoodsNoSet'&amp;&amp;'@SqlReturn:GoodsNameSet'=='false'">
			<error>GoodsNameSet.IsSameFalseTo.GoodsNoSet</error>
		</exec>
	</sql>-->
	<sql type="condition"><!--如果将商品名称不允许重复改为是，判断商品表中是否已经存在重复商品名称--> 	
		<condition><select>select GoodsFullName from tblGoods where @ValueofDB:tblSysDeploy_SysCode='GoodsNOorNameUnique' and (@ValueofDB:tblSysDeploy_Setting='GoodsName' or @ValueofDB:tblSysDeploy_Setting='Both') group by GoodsFullName having count(GoodsFullName) &gt;1</select></condition>		
		<exec condition="'@SqlReturn:GoodsFullName'!= 'null'">
			<error>tblSysSetting.GoodsNameUnique.Same.error,@SqlReturn:GoodsFullName</error>
		</exec>
	</sql>
	<sql type="condition"><!--如果将商品编号不允许重复改为是，判断商品表中是否已经存在重复商品编号--> 	
		<condition><select>select GoodsNumber from tblGoods where @ValueofDB:tblSysDeploy_SysCode='GoodsNOorNameUnique' and (@ValueofDB:tblSysDeploy_Setting='GoodsNO' or @ValueofDB:tblSysDeploy_Setting='Both') group by GoodsNumber having count(GoodsNumber) &gt;1</select></condition>		
		<exec condition="'@SqlReturn:GoodsNumber'!= 'null'">
			<error>tblSysSetting.GoodsNOUnique.Same.error,@SqlReturn:GoodsNumber</error>
		</exec>
	</sql>
	<sql type="condition"><!--修改表结构中商品表的唯一标示-->
		<!--商品名称-->
		<exec condition="'@ValueofDB:tblSysDeploy_SysCode'=='GoodsNOorNameUnique'&amp;&amp;('@ValueofDB:tblSysDeploy_Setting'=='GoodsName'||'@ValueofDB:tblSysDeploy_Setting'=='Both')">
			<sql>update tblDBFieldInfo set isUnique='1' where fieldName='GoodsFullName' and tableId=(select id from tblDBTableInfo where tableName='tblGoods')</sql>
		</exec>
		<exec condition="'@ValueofDB:tblSysDeploy_SysCode'=='GoodsNOorNameUnique'&amp;&amp;'@ValueofDB:tblSysDeploy_Setting'=='GoodsNO'">
			<sql>update tblDBFieldInfo set isUnique='0' where fieldName='GoodsFullName' and tableId=(select id from tblDBTableInfo where tableName='tblGoods')</sql>
		</exec>
		<!--商品编号-->
		<exec condition="'@ValueofDB:tblSysDeploy_SysCode'=='GoodsNOorNameUnique'&amp;&amp;('@ValueofDB:tblSysDeploy_Setting'=='GoodsNO'||'@ValueofDB:tblSysDeploy_Setting'=='Both')">
			<sql>update tblDBFieldInfo set isUnique='1' where fieldName='GoodsNumber' and tableId=(select id from tblDBTableInfo where tableName='tblGoods')</sql>
		</exec>
		<exec condition="'@ValueofDB:tblSysDeploy_SysCode'=='GoodsNOorNameUnique'&amp;&amp;'@ValueofDB:tblSysDeploy_Setting'=='GoodsName'">
			<sql>update tblDBFieldInfo set isUnique='0' where fieldName='GoodsNumber' and tableId=(select id from tblDBTableInfo where tableName='tblGoods')</sql>
		</exec>
	</sql>
</define>
<!--======往来编号，名称不允许重复=======-->
<define name="SysDeploy_update_ComUnique">
	<!--<sql type="condition">往来编号不允许重复  往来名称不允许重复 不能同时停用
		<condition><select>SELECT a.Setting AS ComNameSet,b.Setting AS ComNoSet FROM tblSysDeploy a,tblSysDeploy b WHERE a.SysCode = 'ComNameUnique' AND b.SysCode = 'ComNoUnique'</select></condition>
		<exec condition="'@SqlReturn:ComNameSet'=='@SqlReturn:ComNoSet'&amp;&amp;'@SqlReturn:ComNameSet'=='false'">
			<error>ComNameSet.IsSameFalseTo.ComNoSet</error>
		</exec>
	</sql>-->
	<sql type="condition"><!--检查是否已经存在重复记录-->
		<condition>
			<select>select ComFullName as Supplier from tblCompany where ClientFlag=1 group by ComFullName having count(0) &gt; 1</select>
			<select>select ComFullName as Client from tblCompany where ClientFlag=2 group by ComFullName having count(0) &gt; 1</select>
			<select>select ComFullName as SupplierClient from tblCompany where ClientFlag=3 group by ComFullName having count(0)&gt;1</select>
			<select>select ComNumber as SupplierNo from tblCompany where ClientFlag=1 group by ComNumber having count(0) &gt; 1</select>
			<select>select ComNumber as ClientNo from tblCompany where ClientFlag=2 group by ComNumber having count(0) &gt; 1</select>
			<select>select ComNumber as SupplierClientNo from tblCompany where ClientFlag=3 group by ComNumber having count(0) &gt; 1</select>
		</condition>	
		<!--供应商已有重复的单位名称-->
		<exec condition="'@ValueofDB:tblSysDeploy_SysCode'=='ComNoorNameUnique'&amp;&amp;('@ValueofDB:tblSysDeploy_Setting'=='ComName'||'@ValueofDB:tblSysDeploy_Setting'=='Both')&amp;&amp;'@SqlReturn:Supplier' != 'null'">
		<error>SameName.SysSetting.error,@SqlReturn:Supplier</error>
		</exec>		
		<!--客户已有重复的单位名称-->
		<exec condition="'@ValueofDB:tblSysDeploy_SysCode'=='ComNoorNameUnique'&amp;&amp;('@ValueofDB:tblSysDeploy_Setting'=='ComName'||'@ValueofDB:tblSysDeploy_Setting'=='Both')&amp;&amp;'@SqlReturn:Client' != 'null'">
		<error>SameNameC.SysSetting.error,@SqlReturn:Client</error>
		</exec>	
		<!--客户供应商已有重复的单位名称-->
		<exec condition="'@ValueofDB:tblSysDeploy_SysCode'=='ComNoorNameUnique'&amp;&amp;('@ValueofDB:tblSysDeploy_Setting'=='ComName'||'@ValueofDB:tblSysDeploy_Setting'=='Both')&amp;&amp;'@SqlReturn:SupplierClient' != 'null'">
		<error>SameNameSC.SysSetting.error,@SqlReturn:SupplierClient</error>
		</exec>	
		<!--供应商已有重复的单位编号-->
		<exec condition="'@ValueofDB:tblSysDeploy_SysCode'=='ComNoorNameUnique'&amp;&amp;('@ValueofDB:tblSysDeploy_Setting'=='ComNO'||'@ValueofDB:tblSysDeploy_Setting'=='Both')&amp;&amp;'@SqlReturn:SupplierNo' != 'null'">
		<error>SameNoS.SysSetting.error,@SqlReturn:SupplierNo</error>
		</exec>	
		<!--客户已有重复的单位编号-->
		<exec condition="'@ValueofDB:tblSysDeploy_SysCode'=='ComNoorNameUnique'&amp;&amp;('@ValueofDB:tblSysDeploy_Setting'=='ComNO'||'@ValueofDB:tblSysDeploy_Setting'=='Both')&amp;&amp;'@SqlReturn:ClientNo' != 'null'">
		<error>SameNoC.SysSetting.error,@SqlReturn:ClientNo</error>
		</exec>	
		<!--客户供应商已有重复的单位编号-->
		<exec condition="'@ValueofDB:tblSysDeploy_SysCode'=='ComNoorNameUnique'&amp;&amp;('@ValueofDB:tblSysDeploy_Setting'=='ComNO'||'@ValueofDB:tblSysDeploy_Setting'=='Both')&amp;&amp;'@SqlReturn:SupplierClientNo'!= 'null'">
		<error>SameNoSC.SysSetting.error,@SqlReturn:SupplierClientNo</error>
		</exec>	
	</sql>
	<sql type="condition"><!--修改往来单位表结构中的唯一标示-->
		<!--往来单位名称:唯一-->
		<exec condition="'@ValueofDB:tblSysDeploy_SysCode'=='ComNoorNameUnique'&amp;&amp;('@ValueofDB:tblSysDeploy_Setting'=='ComName'||'@ValueofDB:tblSysDeploy_Setting'=='Both')">
			<sql>update tblDBFieldInfo set isUnique='1' where fieldName='ComFullName' and tableId=(select id from tblDBTableInfo where  tableName='tblCompany')</sql>
		</exec>	
		<!--往来单位名称：不唯一-->
		<exec condition="'@ValueofDB:tblSysDeploy_SysCode'=='ComNoorNameUnique'&amp;&amp;'@ValueofDB:tblSysDeploy_Setting'=='ComNO'">
			<sql>update tblDBFieldInfo set isUnique='0' where fieldName='ComFullName' and tableId=(select id from tblDBTableInfo where  tableName='tblCompany')</sql>
		</exec>			
		<!--往来单位编号：唯一-->
		<exec condition="'@ValueofDB:tblSysDeploy_SysCode'=='ComNoorNameUnique'&amp;&amp;('@ValueofDB:tblSysDeploy_Setting'=='ComNO'||'@ValueofDB:tblSysDeploy_Setting'=='Both')">
			<sql>update tblDBFieldInfo set isUnique='1' where fieldName='ComNumber' and tableId=(select id from tblDBTableInfo where tableName='tblCompany')</sql>
		</exec>
		<!--往来单位编号：不唯一-->
		<exec condition="'@ValueofDB:tblSysDeploy_SysCode'=='ComNoorNameUnique'&amp;&amp;'@ValueofDB:tblSysDeploy_Setting'=='ComName'">
			<sql>update tblDBFieldInfo set isUnique='0' where fieldName='ComNumber' and tableId=(select id from tblDBTableInfo where tableName='tblCompany')</sql>
		</exec>		
	</sql>	
</define>
<!--======是否允许录入销售价=======-->
<define name="SysDeploy_update_admitinputsaleprice">
	<sql type="condition">
		<!--不允许录入销售价，要将有字段标识的字段的inputOld设置值，否启用了这些系统配置，将会是输入类型-->
		<exec condition="'@ValueofDB:tblSysDeploy_Setting'=='false'">
			<sql>update tbldbFieldInfo set inputType = '8' where tableId in(select id from tblDBTableInfo where tableName in('tblSalesOutStockDet','tblSalesReplaceDetail')) and fieldName IN( 'Price','Amount','DisPrice','DisAmount','DisBackAmt','TaxPrice','TaxAmount')</sql>
			<sql>update tbldbFieldInfo set inputType = '8',inputTypeOld='8' where tableId in(select id from tblDBTableInfo where tableName in('tblSalesOutStockDet','tblSalesReplaceDetail')) and fieldName in ('UnitPrice','CurAmount','CurDisPrice','CurDiscAmount','CurDisBackAmt','CurTaxPrice','CurTaxAmount')
			</sql>
		</exec>
		<!--允许录入销售价-->
		<exec condition="'@ValueofDB:tblSysDeploy_Setting'=='true'">
			<sql>update tbldbFieldInfo set inputType = InputTypeOld where tableId in(select id from tblDBTableInfo where tableName in('tblSalesOutStockDet','tblSalesReplaceDetail')) and fieldName = 'Price'</sql>
			<sql>update tbldbFieldInfo set inputType = '0',inputTypeOld='0'  where tableId in(select id from tblDBTableInfo where tableName in('tblSalesOutStockDet','tblSalesReplaceDetail')) and fieldName in ('Amount','UnitPrice','CurAmount','CurDisPrice','CurDiscAmount','CurDisBackAmt','CurTaxPrice','CurTaxAmount')</sql>
			<sql>update tbldbFieldInfo set inputType = '6'  where tableId in(select id from tblDBTableInfo where tableName in('tblSalesOutStockDet','tblSalesReplaceDetail')) and fieldName in('DisPrice','DisAmount','DisBackAmt','TaxPrice','TaxAmount')</sql>
		</exec>
	</sql>
</define>
<!--======启用商品开票=======-->
<define name="SysDeploy_update_GoodsInvoice">
	<sql type="condition">
		<exec condition="'@ValueofDB:tblSysDeploy_Setting'=='true'">
			<sql> UPDATE tbldbfieldinfo SET inputType = '2' WHERE tableId in (SELECT id FROM tblDBTableInfo tdi WHERE tablename in('tblBuyInfoDet','tblSalesInfoDet')) AND fieldName='GoodsCode'</sql>			
		</exec>
		<exec condition="'@ValueofDB:tblSysDeploy_Setting'=='false'">
			<sql>UPDATE tbldbfieldinfo SET inputType = '3' WHERE tableId in (SELECT id FROM tblDBTableInfo tdi WHERE tablename in ('tblBuyInfoDet','tblSalesInfoDet')) AND fieldName='GoodsCode'</sql>
		</exec>
	</sql>
</define>
<!--======凭证字=======-->
<define name="SysDeploy_update_AccNumberType">	
	<sql type="condition"><!--判断凭证字的字符不能大于一个-->
		<exec condition="'@ValueofDB:tblSysDeploy_Setting'.length&gt;1">
  		<error>tblSysDeploy.AccNumberType.DataError</error> 
   	</exec>
	</sql>
	<sql type="condition"><!--修改系统参数中的凭证字与选项数据中同步 -->
		<condition>
			<select>select count(0) as count from tblDBEnumerationItem where id=@ValueofDB:tblSysDeploy_id</select>
			<select>SELECT id as enumid FROM tblDBEnumeration WHERE enumName='CredTypeID'</select>
		</condition>	
		<exec condition="@SqlReturn:count==1">
			<sql>update tblDBEnumerationItem set enumValue=@ValueofDB:tblSysDeploy_Setting,languageid='a'+@ValueofDB:tblSysDeploy_id where id=@ValueofDB:tblSysDeploy_id</sql>
			<sql>delete tblLanguage where id=(select languageid from tblDBEnumerationItem where id=@ValueofDB:tblSysDeploy_id)</sql>
			<sql>delete tblLanguage where id='a'+@ValueofDB:tblSysDeploy_id</sql>
			<sql>INSERT INTO tblLanguage(id,zh_CN,zh_TW,zh_HK,en) VALUES('a'+@ValueofDB:tblSysDeploy_id,@ValueofDB:tblSysDeploy_Setting,@ValueofDB:tblSysDeploy_Setting,@ValueofDB:tblSysDeploy_Setting,@ValueofDB:tblSysDeploy_Setting)</sql>
		</exec>
		<exec condition="@SqlReturn:count==0">
			<sql>INSERT INTO tblDBEnumerationItem(id,enumValue,enumId,languageid) VALUES(@ValueofDB:tblSysDeploy_id,@ValueofDB:tblSysDeploy_Setting,@SqlReturn:enumid,'a'+@ValueofDB:tblSysDeploy_id)</sql>
			<sql>delete tblLanguage where id=(select languageid from tblDBEnumerationItem where id=@ValueofDB:tblSysDeploy_id)</sql>
			<sql>delete tblLanguage where id='a'+@ValueofDB:tblSysDeploy_id</sql>
			<sql>INSERT INTO tblLanguage(id,zh_CN,zh_TW,zh_HK,en) VALUES('a'+@ValueofDB:tblSysDeploy_id,@ValueofDB:tblSysDeploy_Setting,@ValueofDB:tblSysDeploy_Setting,@ValueofDB:tblSysDeploy_Setting,@ValueofDB:tblSysDeploy_Setting)</sql>
		</exec>
	</sql>
</define>
<!--======商品成本计算方法=======-->
<define name="SysDeploy_update_GoodsCostingMethod">	
	<sql type="condition"><!--如果修改的是商品成本计算方法，并有影响库存，不允许修改-->
		<condition><select>select count(0) as stockCount from tblStockDet</select></condition>	
		<exec condition="@SqlReturn:stockCount&gt;0">
			<error>tblSysDeploy.GoodsCostingMethod.error</error> 
		</exec>
	</sql>	
	<sql type="condition"><!--如果改后的系统配置是全月一次平均，隐藏变价调拨，存货调价。否则启用--> 
		<exec condition="'@ValueofDB:tblSysDeploy_Setting'=='MONTH'">
			<sql>update tblModules set IsHidden=1 where linkAddress like '%?tableName=tblAdjustPrice%' or linkAddress like '%?tableName=tblAllotChange%'or linkAddress like '%reportNumber=ReportAdjustPrice%' or linkAddress like '%?reportNumber=ReportAllotChange%'</sql>
			<sql>update tblModules set IsHidden=2 where linkAddress like '%SysAccAction.do?type=reCalculate%'</sql>
		</exec>
		<exec condition="'@ValueofDB:tblSysDeploy_Setting'!='MONTH'">
			<sql>update tblModules set IsHidden=2 where linkAddress like '%?tableName=tblAdjustPrice%' or linkAddress like '%?tableName=tblAllotChange%' or  linkAddress like '%reportNumber=ReportAdjustPrice%' or linkAddress like '%?reportNumber=ReportAllotChange%'</sql>
			<sql>update tblModules set IsHidden=1 where linkAddress like '%SysAccAction.do?type=reCalculate%'</sql>
		</exec>
	</sql>
</define>

<!--已经存在固定资产数据，不允许停用此选项-->
<define name="SysDeploy_update_FixedAsset">
	<sql type="condition">
		<condition><select>select count(a.id) as data from (select id from tblFixedAssetAdd union all select id from tblFixedAssetDepreciate union all select id from tblFixedAssetChange union all select id from tblFixedAssetDevalue union all select id from tblFixedAssetClean) a</select></condition>
		<exec condition="@SqlReturn:data &gt; 0">
			<error>com.FixedAsset.SysDeploy</error>
   		</exec>
		<exec condition="'@ValueofDB:tblSysDeploy_Setting'=='true'">
			<sql>INSERT INTO tblImportData(id,NAME,targetTable,flag,createBy,createTime,statusId,finishTime) SELECT SUBSTRING(REPLACE(NEWID(),'-',''),1,28),'固定资产增加','tblFixedAssetAdd',1,1,'2013-12-20 11:19:41',0,'2013-12-20 11:19:41' UNION ALL SELECT SUBSTRING(REPLACE(NEWID(),'-',''),1,28),'固定资产变更','tblFixedAssetChange',1,1,'2013-12-20 11:19:41',0,'2013-12-20 11:19:41' UNION ALL SELECT SUBSTRING(REPLACE(NEWID(),'-',''),1,28),'固定资产清理','tblFixedAssetClean',1,1,'2013-12-20 11:19:41',0,'2013-12-20 11:19:41' UNION ALL SELECT SUBSTRING(REPLACE(NEWID(),'-',''),1,28),'固定资产减值','tblFixedAssetDevalue',1,1,'2013-12-20 11:19:41',0,'2013-12-20 11:19:41'</sql>
			<sql>UPDATE OAWorkFlowTemplate SET statusId = '0' WHERE templateFile in ('tblFixedAssetDevalue','tblFixedAssetClean','tblFixedAssetChange','tblFixedAssetAdd')</sql>
		</exec>
		<exec condition="'@ValueofDB:tblSysDeploy_Setting'=='false'">
			<sql>DELETE FROM tblImportData WHERE targetTable IN ('tblFixedAssetAdd','tblFixedAssetChange','tblFixedAssetClean','tblFixedAssetDevalue')</sql>
			<sql>UPDATE OAWorkFlowTemplate SET statusId = '-1' WHERE templateFile in ('tblFixedAssetDevalue','tblFixedAssetClean','tblFixedAssetChange','tblFixedAssetAdd')</sql>
		</exec>
	</sql>			
</define>

<!--启用自动产生凭证，生成业务凭证模块不启用-->
<define name="SysDeploy_update_autoGenerateAcc">
	<sql type="condition">
		<exec condition="true">
			<sql type="procedure">{call proc_BillIsUsed(@Sess:Local,retCode,retVal)}</sql>
		</exec>
		<exec condition="'@ProcReturn:retVal'!=''">
			<error>@ProcReturn:retVal</error>
		</exec>
		<exec condition="'@ValueofDB:tblSysDeploy_Setting'=='false'">
			<sql>update tblModules SET IsUsed = '1',IsHidden='2' WHERE linkAddress='/GenCertificateAction.do' </sql>
   	</exec>
   	<exec condition="'@ValueofDB:tblSysDeploy_Setting'=='true'">
			<sql>update tblModules SET IsUsed = '2',IsHidden='2' WHERE linkAddress='/GenCertificateAction.do' </sql>
   	</exec>
	</sql>			
</define>

<!--预收预付转应收应付的系统配置-->
<define name="SysDeploy_update_prerecvpaymarktoneedrecvpay">
	<sql type="condition">
		<condition>
			<select>select count(*) as RecordCount from tblTransferSale1</select>
			<select>select count(*) as RecordCount2 from tblTransferSale3</select>
			<select>SELECT COUNT(*) AS RecordCount3 from tblAccBalance WHERE SubCode IN (SELECT AccNumber FROM tblAccTypeInfo WHERE  classCode LIKE (SELECT classCode FROM tblAccTypeInfo WHERE AccNumber='1123')+'%' OR classCode LIKE (SELECT classCode FROM tblAccTypeInfo WHERE AccNumber='2203')+'%') AND period = -1 and (CurrYIniBase!=0 or CurrYIniBalaBase!=0)</select>
      	<select>SELECT COUNT(*) AS RecordCount4 FROM tblAccDetail where AccCode IN (SELECT AccNumber FROM tblAccTypeInfo WHERE  classCode LIKE (SELECT classCode FROM tblAccTypeInfo WHERE AccNumber='1123')+'%' OR classCode LIKE (SELECT classCode FROM tblAccTypeInfo WHERE AccNumber='2203')+'%') </select>
		</condition>
		<exec condition="('@SqlReturn:RecordCount' != '0' || '@SqlReturn:RecordCount2' != '0' || '@SqlReturn:RecordCount3' != '0' || '@SqlReturn:RecordCount4' != '0') &amp;&amp; '@ValueofDB:tblSysDeploy_Setting'=='true'">				
			<error>SysDeploy.update.hasrecord.error,&quot;预收预付记应收应付&quot;</error>                  
		</exec>
		<exec condition="'@ValueofDB:tblSysDeploy_Setting'=='true'">
			<sql>update certificateTemplate set accCode='2202' where tableName='tblBuyOrder' and dirc=1</sql>
			<sql>update certificateTemplate set accCode='1122' where tableName='tblSalesOrder' and dirc=2</sql>
			<!--付款单更新凭证模板-->
			<sql>delete from certificateTemplate where tableName='tblPay' and (accCode='1123'or accCode='2202')</sql>
			<sql>INSERT INTO certificateTemplate(id,tableName,accCode,dirc,fieldName,companyCode,departmentCode,employee,stockCode,goodsCode,f_ref,currency,ProjectCode,comment,CurrencyRate,CurFieldName) values(SUBSTRING(REPLACE(NEWID(),'-',''),1,28),'tblPay','2202',1,'(case tblPay.PaytypeID when ''Pay'' then 1 when ''RetrunPay'' then -1 when ''ReturnReceive'' then -1 when ''PrePay'' then 1 else 0 end)*tblPay.SettleAmt','tblPay.CompanyCode','tblPay.DepartmentCode','tblPay.EmployeeID','','tblPay.CompanyCode','86caa739_1311071432416150019','tblPay.Currency','tblPay.ProjectCode','付款-[往来单位]','tblPay.CurrencyRate','(case tblPay.PaytypeID when ''Pay'' then 1 when ''RetrunPay'' then -1 when ''ReturnReceive''then -1 when ''PrePay'' then 0 else 0 end)*tblPay.CurrencyAmt')</sql>
			<!--收款单更新凭证模板-->
			<sql>delete from certificateTemplate where tableName='tblSaleReceive' and (accCode='1122'or accCode='2203')</sql>
			<sql>INSERT INTO certificateTemplate(id,tableName,accCode,dirc,fieldName,companyCode,departmentCode,employee,stockCode,goodsCode,f_ref,currency,ProjectCode,comment,CurrencyRate,CurFieldName) values(SUBSTRING(REPLACE(NEWID(),'-',''),1,28),'tblSaleReceive','1122',2,'case tblSaleReceive.AcceptTypeID when ''PreReceive'' then tblSaleReceive.ExeBalAmt when ''Receive'' then tblSaleReceive.ExeBalAmt when ''ReturnPay'' then -tblSaleReceive.ExeBalAmt when ''RetrunReceive'' then -tblSaleReceive.ExeBalAmt when ''DeputyRec'' then tblSaleReceive.ExeBalAmt else 0 end','tblSaleReceive.CompanyCode','tblSaleReceive.DepartmentCode','tblSaleReceive.EmployeeID','','tblSaleReceive.CompanyCode','b0db0efa_1311071512399210059','tblSaleReceive.Currency','tblSaleReceive.ProjectCode','收款-[部门]-[经手人]','tblSaleReceive.CurrencyRate','case tblSaleReceive.AcceptTypeID when ''PreReceive'' then tblSaleReceive.BillFcAmt when ''Receive'' then tblSaleReceive.BillFcAmt when ''ReturnPay'' then -tblSaleReceive.BillFcAmt when ''RetrunReceive'' then -tblSaleReceive.BillFcAmt when ''DeputyRec'' then tblSaleReceive.BillFcAmt else 0 end')</sql>
			
			<sql>UPDATE tblAccTypeInfo SET statusId ='-1' WHERE AccNumber ='1123' OR AccNumber ='2203'</sql>
			<sql>update tblModules set IsUsed=2  where linkAddress='/UserFunctionQueryAction.do?tableName=tblCompanybeginning&amp;moduleType=3&amp;BeginningType=3'</sql>
			<sql>update tblModules set IsUsed=2  where linkAddress='/UserFunctionQueryAction.do?tableName=tblCompanybeginning&amp;moduleType=4&amp;BeginningType=4'</sql>
			<sql>update tblModules set IsUsed=2  where linkAddress='/UserFunctionQueryAction.do?tableName=tblTransferSale1'</sql>
			<sql>update tblModules set IsUsed=2  where linkAddress='/UserFunctionQueryAction.do?tableName=tblTransferSale3'</sql>
			<sql>update tblModules set IsUsed=2  where linkAddress='/ReportDataAction.do?reportNumber=IniReportpreReceive'</sql>
			<sql>update tblModules set IsUsed=2  where linkAddress='/ReportDataAction.do?reportNumber=IniReportprePay'</sql>
      <sql>DELETE FROM tblImportData WHERE NAME IN ('预收转应收','预付转应付')</sql>
      <!--将审核流隐藏-->
      <sql>UPDATE OAWorkFlowTemplate SET statusId = '-1' WHERE templateFile IN ('tblTransferSale1','tblTransferSale3')</sql>
	  <sql>DELETE FROM tblLanguage WHERE id IN (SELECT languageId FROM tblDBEnumerationItem WHERE (enumValue ='tblTransferSale1' OR enumValue ='tblTransferSale3') AND enumId =(SELECT id FROM tblDBEnumeration WHERE enumName ='BillType'))</sql>
	  <sql>DELETE FROM tblDBEnumerationItem WHERE (enumValue ='tblTransferSale1' OR enumValue ='tblTransferSale3') AND enumId =(SELECT id FROM tblDBEnumeration WHERE enumName ='BillType')</sql>
   	</exec>
   	<exec condition="'@ValueofDB:tblSysDeploy_Setting'=='false'">
   		<sql>update certificateTemplate set accCode='1123' where tableName='tblBuyOrder' and dirc=1</sql>
			<sql>update certificateTemplate set accCode='2203' where tableName='tblSalesOrder' and dirc=2</sql>
			<!--付款单更新凭证模板-->
			<sql>delete from certificateTemplate where tableName='tblPay' and (accCode='1123'or accCode='2202')</sql>
			<sql>INSERT INTO certificateTemplate(id,tableName,accCode,dirc,fieldName,companyCode,departmentCode,employee,stockCode,goodsCode,f_ref,currency,ProjectCode,comment,CurrencyRate,CurFieldName) values(SUBSTRING(REPLACE(NEWID(),'-',''),1,28),'tblPay','1123',1,'(case tblPay.PaytypeID when ''PrePay'' then 1 else 0 end)*tblPay.SettleAmt','tblPay.CompanyCode','tblPay.DepartmentCode','tblPay.EmployeeID','','tblPay.CompanyCode','86caa739_1311071432416150019','tblPay.Currency','tblPay.ProjectCode','付款-[往来单位]','tblPay.CurrencyRate','(case tblPay.PaytypeID when ''PrePay'' then 1 else 0 end)*tblPay.CurrencyAmt')</sql>
			<sql>INSERT INTO certificateTemplate(id,tableName,accCode,dirc,fieldName,companyCode,departmentCode,employee,stockCode,goodsCode,f_ref,currency,ProjectCode,comment,CurrencyRate,CurFieldName) values(SUBSTRING(REPLACE(NEWID(),'-',''),1,28),'tblPay','2202',1,'(case tblPay.PaytypeID when ''Pay'' then 1 when ''RetrunPay'' then -1 when ''ReturnReceive'' then -1 else 0 end)*tblPay.SettleAmt','tblPay.CompanyCode','tblPay.DepartmentCode','tblPay.EmployeeID','','tblPay.CompanyCode','86caa739_1311071432416150019','tblPay.Currency','tblPay.ProjectCode','付款-[往来单位]','tblPay.CurrencyRate','(case tblPay.PaytypeID when ''Pay'' then 1 when ''RetrunPay'' then -1 when ''ReturnReceive''then -1 else 0 end)*tblPay.CurrencyAmt')</sql>
			<!--收款单更新凭证模板-->
			<sql>delete from certificateTemplate where tableName='tblSaleReceive' and (accCode='1122'or accCode='2203')</sql>
			<sql>INSERT INTO certificateTemplate(id,tableName,accCode,dirc,fieldName,companyCode,departmentCode,employee,stockCode,goodsCode,f_ref,currency,ProjectCode,comment,CurrencyRate,CurFieldName) values(SUBSTRING(REPLACE(NEWID(),'-',''),1,28),'tblSaleReceive','1122',2,'case tblSaleReceive.AcceptTypeID when ''Receive'' then tblSaleReceive.ExeBalAmt when ''ReturnPay'' then -tblSaleReceive.ExeBalAmt when ''RetrunReceive'' then -tblSaleReceive.ExeBalAmt when ''DeputyRec'' then tblSaleReceive.ExeBalAmt else 0 end','tblSaleReceive.CompanyCode','tblSaleReceive.DepartmentCode','tblSaleReceive.EmployeeID','','tblSaleReceive.CompanyCode','b0db0efa_1311071512399210059','tblSaleReceive.Currency','tblSaleReceive.ProjectCode','收款-[部门]-[经手人]','tblSaleReceive.CurrencyRate','case tblSaleReceive.AcceptTypeID when ''Receive'' then tblSaleReceive.BillFcAmt when ''ReturnPay'' then -tblSaleReceive.BillFcAmt when ''RetrunReceive'' then -tblSaleReceive.BillFcAmt when ''DeputyRec'' then tblSaleReceive.BillFcAmt else 0 end')</sql>
			<sql>INSERT INTO certificateTemplate(id,tableName,accCode,dirc,fieldName,companyCode,departmentCode,employee,stockCode,goodsCode,f_ref,currency,ProjectCode,comment,CurrencyRate,CurFieldName) values(SUBSTRING(REPLACE(NEWID(),'-',''),1,28),'tblSaleReceive','2203',2,'case tblSaleReceive.AcceptTypeID when ''PreReceive'' then tblSaleReceive.ExeBalAmt else 0 end','tblSaleReceive.CompanyCode','tblSaleReceive.DepartmentCode','tblSaleReceive.EmployeeID','','tblSaleReceive.CompanyCode','b0db0efa_1311071512399210059','tblSaleReceive.Currency','tblSaleReceive.ProjectCode','收款-[部门]-[经手人]','tblSaleReceive.CurrencyRate','case tblSaleReceive.AcceptTypeID when ''PreReceive'' then tblSaleReceive.BillFcAmt else 0 end')</sql>
			<sql>UPDATE tblAccTypeInfo SET statusId =0 WHERE AccNumber ='1123' OR AccNumber ='2203'</sql>
			<sql>update tblModules set IsUsed=1  where linkAddress='/UserFunctionQueryAction.do?tableName=tblCompanybeginning&amp;moduleType=3&amp;BeginningType=3'</sql>
			<sql>update tblModules set IsUsed=1  where linkAddress='/UserFunctionQueryAction.do?tableName=tblCompanybeginning&amp;moduleType=4&amp;BeginningType=4'</sql>
			<sql>update tblModules set IsUsed=1  where linkAddress='/UserFunctionQueryAction.do?tableName=tblTransferSale1'</sql>
			<sql>update tblModules set IsUsed=1  where linkAddress='/UserFunctionQueryAction.do?tableName=tblTransferSale3'</sql>
			<sql>update tblModules set IsUsed=1  where linkAddress='/ReportDataAction.do?reportNumber=IniReportpreReceive'</sql>
			<sql>update tblModules set IsUsed=1  where linkAddress='/ReportDataAction.do?reportNumber=IniReportprePay'</sql>
      <sql>DELETE FROM tblImportData WHERE NAME IN ('预收转应收','预付转应付')</sql>
      <sql>INSERT INTO tblImportData(id,name,targetTable,flag,createBy,statusId,moduleType,moduleParam)VALUES('e8b96cc6_1009101750111560083','预收转应收','tblTransferSale1','1','1','0','','')</sql>
      <sql>INSERT INTO tblImportData(id,name,targetTable,flag,createBy,statusId,moduleType,moduleParam)VALUES('e8b96cc6_1009101801263750123','预付转应付','tblTransferSale3','1','1','0','','')</sql>
      <!--将审核流放出-->
      <sql>UPDATE OAWorkFlowTemplate SET statusId = '0' WHERE templateFile IN ('tblTransferSale1','tblTransferSale3')</sql>
	  <sql>INSERT INTO tblDBEnumerationItem(id,enumValue,enumId,printCount,languageId,enumOrder)
SELECT SUBSTRING(REPLACE(NEWID(),'-',''),1,28),'tblTransferSale1',id,0,SUBSTRING(REPLACE(NEWID(),'-',''),1,28),0 FROM tblDBEnumeration WHERE enumName ='BillType'
UNION ALL
SELECT SUBSTRING(REPLACE(NEWID(),'-',''),1,28),'tblTransferSale3',id,0,SUBSTRING(REPLACE(NEWID(),'-',''),1,28),0 FROM tblDBEnumeration WHERE enumName ='BillType'</sql>
		<sql>INSERT INTO tblLanguage(id,zh_CN) SELECT languageId,'预收转应收' FROM tblDBEnumerationItem WHERE enumValue = 'tblTransferSale1' AND enumId =(SELECT id FROM tblDBEnumeration WHERE enumName ='BillType')
UNION ALL SELECT languageId,'预付转应付' FROM tblDBEnumerationItem WHERE enumValue = 'tblTransferSale3' AND enumId =(SELECT id FROM tblDBEnumeration WHERE enumName ='BillType')</sql>
   	</exec>
	</sql>			
</define>

<!--启用MAC地址过滤-->
<define name="SysDeploy_update_MACFilter">
	<sql type="condition">
		<exec condition="'@ValueofDB:tblSysDeploy_Setting'=='true'">
			<sql>update tblModules set IsHidden=2  where linkAddress='/UserFunctionQueryAction.do?tableName=tblmacfilter'</sql>
   	</exec>
   	<exec condition="'@ValueofDB:tblSysDeploy_Setting'=='false'">
			<sql>update tblModules set IsHidden=1  where linkAddress='/UserFunctionQueryAction.do?tableName=tblmacfilter'</sql>
   	</exec>
	</sql>			
</define>

<!--除ERP外的其他系统配置（CRM,电子商务等）-->
<define name="SysDeploy_update_OtherDeploy">
	<sql type="condition"> 	
		<condition>
			<select>select statusid,scompanyid,accperiod from tblaccperiod where  statusid='1'  and scompanyID=@Sess:SCompanyID</select>
		<!--距下次拜访时间时长不超过(天)  目标客户数默认值,回归客户池时长（天）,意向客户数默认值,的设置值只能为数字 -->
		<select>select 'exists' as SpecialSign where @ValueofDB:tblSysDeploy_Setting like '%[^0-9]%' and @ValueofDB:tblSysDeploy_SysCode in ('ReturnPoolTime','WillQtyDefault','DistanceNextVisit','ObjectQtyDefault')</select>
		</condition>
		
		<!-- 距下次拜访时间时长不超过(天)  目标客户数默认值,回归客户池时长（天）,意向客户数默认值,的设置值只能为数字 -->
		<exec condition="'@SqlReturn:SpecialSign'=='exists'">
			<error>tblSysParameter.error.SpecialSign</error>
		</exec>
		<!-- 调用 现金积分兑换判断 -->
		<exec condition="'@ValueofDB:tblSysDeploy_SysCode'=='CashIntegralConvert'">
			<sql type="define">tblSysDeploy_CashIntegralConvert_Validate</sql>
		</exec>
		<!-- 根据系统参数设置 更新 会员卡积分充值 中的 积分现金兑换比例 -->
		<exec condition="'@ValueofDB:tblSysDeploy_SysCode'=='CashIntegralConvert'">
			<sql>update tblDBFieldInfo set defaultValue=@ValueofDB:tblSysDeploy_Setting from tblDBFieldInfo f left join tblDBTableInfo t on t.id=f.tableId where tableName='tblVipCardIntegral' and fieldName='ConversionRate'</sql>
		</exec>
	</sql>
	<sql type="condition">
		<exec condition="'@ValueofDB:tblSysDeploy_SysCode'=='aioshop' &amp;&amp; '@ValueofDB:tblSysDeploy_Setting'=='false'">
  			<sql>update tblModules set IsUsed=2,IsHidden=1 where modelName in (select id from tblLanguage where zh_CN='AIOSHOP')</sql> 
   		</exec>
    	<exec condition="'@ValueofDB:tblSysDeploy_SysCode'=='aioshop' &amp;&amp; '@ValueofDB:tblSysDeploy_Setting'=='true'">
  			<sql>update tblModules set IsUsed=1,IsHidden=2 where modelName in (select id from tblLanguage where zh_CN='AIOSHOP')</sql> 
	    </exec>
	</sql>
	
	<sql type="condition"> 	
		<condition>
			<select>select statusid as statAcc,scompanyid,accperiod from tblaccperiod where  statusid='1' and scompanyID=@Sess:SCompanyID</select>
			<select>select SysCode,Setting,statusid as stat from tblSysDeploy where id=@ValueofDB:id</select>
			
			<select>select SysCode as updateSysCode from tblSysDeploy where id=@ValueofDB:tblSysDeploy_id</select>
			<select>select setting as updateProduceBySalesorder from tblSysDeploy where SysCode='ProduceBySalesorder'</select>			
					
		</condition>
		
		<exec condition="'@SqlReturn:stat' == '-1'&amp;&amp;'@SqlReturn:statAcc' == '1'">
		<error>tblSysSetting.statusid.error</error>
		</exec>
		<exec condition="'@ValueofDB:tblSysDeploy_SysCode'=='aioshop' &amp;&amp; '@ValueofDB:tblSysDeploy_Setting'=='false'">
  			<sql>update tblModules set IsUsed=2,IsHidden=1 where modelName in (select id from tblLanguage where zh_CN='AIOSHOP')</sql> 
   		</exec>
    	<exec condition="'@ValueofDB:tblSysDeploy_SysCode'=='aioshop' &amp;&amp; '@ValueofDB:tblSysDeploy_Setting'=='true'">
  			<sql>update tblModules set IsUsed=1,IsHidden=2 where modelName in (select id from tblLanguage where zh_CN='AIOSHOP')</sql> 
	    </exec>
		<!-- 当系统配置 启用必须输入客户关键字时，客户关键字为非空 -->
		<exec condition="'@SqlReturn:Setting'=='true'&amp;&amp;'@SqlReturn:SysCode'=='InputKeyword'">
			<sql>update tblDBFieldInfo set isNull='1' from tblDBFieldInfo f left join tblDBTableInfo t on t.id=f.tableId where tableName='CRMClientInfo' and fieldName='Keywords'</sql>
		</exec>
		<!-- 当系统配置 禁用必须输入客户关键字时，客户关键字可为空 -->
		<exec condition="'@SqlReturn:Setting'=='false'&amp;&amp;'@SqlReturn:SysCode'=='InputKeyword'">
			<sql>update tblDBFieldInfo set isNull='0' from tblDBFieldInfo f left join tblDBTableInfo t on t.id=f.tableId where tableName='CRMClientInfo' and fieldName='Keywords'</sql>
		</exec>	
			<!-- 当系统配置 启用启用职员管辖区域控制时，业务区域为非空 -->
		<exec condition="'@SqlReturn:Setting'=='true'&amp;&amp;'@SqlReturn:SysCode'=='ManageDistrict'">
			<sql>update tblDBFieldInfo set isNull='1' from tblDBFieldInfo f left join tblDBTableInfo t on t.id=f.tableId where tableName='CRMClientInfo' and fieldName='BusinessDistrict'</sql>
		</exec>
		<!-- 当系统配置 禁用职员管辖区域控制时，业务区域可为空 -->
		<exec condition="'@SqlReturn:Setting'=='false'&amp;&amp;'@SqlReturn:SysCode'=='ManageDistrict'">
			<sql>update tblDBFieldInfo set isNull='0' from tblDBFieldInfo f left join tblDBTableInfo t on t.id=f.tableId where tableName='CRMClientInfo' and fieldName='BusinessDistrict'</sql>
		</exec>	
		<!-- 当系统配置 启用必须录入关键字时，客户资料关键字为非空 -->
		<exec condition="'@SqlReturn:Setting'=='true'&amp;&amp;'@SqlReturn:SysCode'=='InputKeyword'">
			<sql>update tblDBFieldInfo set isNull='1' from tblDBFieldInfo f left join tblDBTableInfo t on t.id=f.tableId where tableName='CRMClientInfo' and fieldName='Keywords'</sql>
		</exec>
		<!-- 当系统配置 启用必须录入关键字时，客户资料关键字可为空 -->
		<exec condition="'@SqlReturn:Setting'=='false'&amp;&amp;'@SqlReturn:SysCode'=='InputKeyword'">
			<sql>update tblDBFieldInfo set isNull='0' from tblDBFieldInfo f left join tblDBTableInfo t on t.id=f.tableId where tableName='CRMClientInfo' and fieldName='Keywords'</sql>
		</exec>
		<!--启用ERP收款单关联CRM销售合同：启用-->
		<exec condition="'@SqlReturn:Setting'=='true'&amp;&amp;'@SqlReturn:SysCode'=='ReceiveCRMContract'">
		<!--显示合同相关字段-->
		<sql>update tblDBFieldInfo set inputType=2,inputTypeOld=2,inputValue='SelectCRMContractNo' where tableId=(select id from tblDBTableInfo where tableName='tblSaleReceive') and fieldName='ContractNo'</sql>
		<sql>update tblDBFieldInfo set inputType=8,inputTypeOld=8 where tableId=(select id from tblDBTableInfo where tableName='tblSaleReceive') and fieldName='ContractAmt'</sql>
		<!--隐藏CRM中的收款单-->
		<sql>update tblModules set IsUsed=2 where linkAddress='/UserFunctionQueryAction.do?parentTableName=CRMClientInfo&amp;tableName=CRMSaleReceive'</sql>
		<!--隐藏CRM报表中心根据CRM销售收款统计的职员回款统计表-->
		<sql>update tblModules set IsUsed=2 where linkAddress='/ReportDataAction.do?reportNumber=ReportCRMSalesReceive'</sql>
		<!--启用CRM报表中心根据ERP销售收款统计的职员回款统计表-->
		<sql>update tblModules set IsUsed=1 where linkAddress='/ReportDataAction.do?reportNumber=ReportReceiveTotal'</sql>
		<!--从邻居表设置中去掉CRM收款单-->
		<sql>update tblNeighbourDetail set DetailName='ViewCRMReceive' where f_ref=(select id from tblNeighbourMain where MainName='CRMClientInfo') and DetailName='CRMSaleReceive'</sql>
		</exec>	
		
		<!--启用ERP收款单关联CRM销售合同：不启用-->
		<exec condition="'@SqlReturn:Setting'=='false'&amp;&amp;'@SqlReturn:SysCode'=='ReceiveCRMContract'">
		
		<!--隐藏合同相关字段-->
		<sql>update tblDBFieldInfo set inputType=100,inputTypeOld=2,inputValue='SelectCRMContractNo' where tableId=(select id from tblDBTableInfo where tableName='tblSaleReceive') and fieldName='ContractNo'</sql>
		<sql>update tblDBFieldInfo set inputType=100,inputTypeOld=8 where tableId=(select id from tblDBTableInfo where tableName='tblSaleReceive') and fieldName='ContractAmt'</sql>
		
		<!--启用CRM中的收款单-->
		<sql>update tblModules set IsUsed=1 where linkAddress='/UserFunctionQueryAction.do?parentTableName=CRMClientInfo&amp;tableName=CRMSaleReceive'</sql>
		<!--启用CRM报表中心根据CRM销售收款统计的职员回款统计表-->
		<sql>update tblModules set IsUsed=1 where linkAddress='/ReportDataAction.do?reportNumber=ReportCRMSalesReceive'</sql>
		<!--不启用CRM报表中心根据ERP销售收款统计的职员回款统计表-->
		<sql>update tblModules set IsUsed=2 where linkAddress='/ReportDataAction.do?reportNumber=ReportReceiveTotal'</sql>
		<!--从邻居表设置中去掉ERP收款单-->
		<sql>update tblNeighbourDetail set DetailName='CRMSaleReceive' where f_ref=(select id from tblNeighbourMain where MainName='CRMClientInfo') and DetailName='ViewCRMReceive'</sql>
		</exec>	
			
		<!--显示ERP销售记录-->
		<exec condition="'@SqlReturn:Setting'=='true' &amp;&amp; '@SqlReturn:SysCode'=='CRMDisplaySalesSign'">	
		<sql>insert into tblNeighbourDetail(id,f_ref,DetailName,OrderBy,SCompanyID) select substring(replace(newid(),'-',''),1,28) as id,id as f_ref,'tblViewCrm' as DetailName,11 as OrderBy,'00001' as SCompanyID from tblNeighbourMain where MainName='CRMClientInfo'</sql>
		<sql>update tblModules set IsUsed=1 where tblName='tblViewCrm'</sql>
		</exec>	
		
		<!--隐藏ERP销售记录-->
		<exec condition="'@SqlReturn:Setting'=='false' &amp;&amp; '@SqlReturn:SysCode'=='CRMDisplaySalesSign'">	
		<sql>delete from tblNeighbourDetail where f_ref=(select id from tblNeighbourMain where MainName='CRMClientInfo') and DetailName='tblViewCrm'</sql>
		<sql>update tblModules set IsUsed=0 where tblName='tblViewCrm'</sql>
		</exec>	
				<!-- 当系统配置启用KPI自动关联销售跟单 -->
		<exec condition="'@SqlReturn:Setting'=='true'&amp;&amp;'@SqlReturn:SysCode'=='KPIAssFollow'">
			<sql>update tbldbfieldinfo set inputType=1 where tableid=
(select id from tbldbtableinfo where tablename='CRMSaleFollowUp') and fieldname in
('KPIItem')</sql>
    <sql>update tbldbfieldinfo set inputType=8 where tableid=
(select id from tbldbtableinfo where tablename='tblDayWorkPlan') and fieldname in
('KPIComplete','KPIScale')</sql>
			
		</exec>	
							<!-- 当系统配置启用KPI自动关联销售跟单 -->
		<exec condition="'@SqlReturn:Setting'=='false'&amp;&amp;'@SqlReturn:SysCode'=='KPIAssFollow'">
			<sql>update tbldbfieldinfo set inputType=3 where tableid=
(select id from tbldbtableinfo where tablename='CRMSaleFollowUp') and fieldname in
('KPIItem')</sql>
    <sql>update tbldbfieldinfo set inputType=0 where tableid=
(select id from tbldbtableinfo where tablename='tblDayWorkPlan') and fieldname in
('KPIComplete','KPIScale')</sql>
			
		</exec>	
					<!-- 当系统配置启用销售目标自动关联销售合同-->
		<exec condition="'@SqlReturn:Setting'=='true'&amp;&amp;'@SqlReturn:SysCode'=='SalesAssContract'">
    <sql>update tbldbfieldinfo set inputType=8 where tableid=
(select id from tbldbtableinfo where tablename='tblDayWorkPlan') and fieldname in
('SalesComplete','SalesScale')</sql>
    <sql>update tbldbfieldinfo set inputType=0 where tableid=
(select id from tbldbtableinfo where tablename='tblDayWorkPlan') and fieldname in
('SalesAmt')</sql>
    <sql>update tblSysDeploy set Setting='false' where SysCode='SalesAssERP'</sql>			
		</exec>	
							<!-- 当系统配置启用销售目标自动关联销售合同-->
		<exec condition="'@SqlReturn:Setting'=='false'&amp;&amp;'@SqlReturn:SysCode'=='SalesAssContract'">
    <sql>update tbldbfieldinfo set inputType=0 where tableid=
(select id from tbldbtableinfo where tablename='tblDayWorkPlan') and fieldname in
('SalesComplete','SalesScale')</sql>
<sql>update tbldbfieldinfo set inputType=6 where tableid=
(select id from tbldbtableinfo where tablename='tblDayWorkPlan') and fieldname in
('SalesAmt')</sql>
			
		</exec>	
		
							<!-- 当系统配置启用销售目标自动关联ERP-->
		<exec condition="'@SqlReturn:Setting'=='true'&amp;&amp;'@SqlReturn:SysCode'=='SalesAssERP'">
    <sql>update tbldbfieldinfo set inputType=8 where tableid=
(select id from tbldbtableinfo where tablename='tblDayWorkPlan') and fieldname in
('SalesComplete','SalesScale','ReComplete','ReScale')</sql>
   <sql>update tbldbfieldinfo set inputType=0 where tableid=
(select id from tbldbtableinfo where tablename='tblDayWorkPlan') and fieldname in
('SalesAmt')</sql>
    <sql>update tblSysDeploy set Setting='false' where SysCode='SalesAssContract'</sql>			
		</exec>
		
									<!-- 当系统配置启用销售目标自动关联ERP-->
		<exec condition="'@SqlReturn:Setting'=='false'&amp;&amp;'@SqlReturn:SysCode'=='SalesAssERP'">
    <sql>update tbldbfieldinfo set inputType=0 where tableid=
(select id from tbldbtableinfo where tablename='tblDayWorkPlan') and fieldname in
('SalesComplete','SalesScale','ReComplete','ReScale')</sql>
   <sql>update tbldbfieldinfo set inputType=6 where tableid=
(select id from tbldbtableinfo where tablename='tblDayWorkPlan') and fieldname in
('SalesAmt')</sql>
			
		</exec>	
		
		<!-- 当系统配置启用销售目标自动关联销售收款-->
		<exec condition="'@SqlReturn:Setting'=='true'&amp;&amp;'@SqlReturn:SysCode'=='SalesAssReceive'">
    <sql>update tbldbfieldinfo set inputType=8 where tableid=
(select id from tbldbtableinfo where tablename='tblDayWorkPlan') and fieldname in
('ReComplete','ReScale')</sql>
			
		</exec>
		
		<!-- 当系统配置启用销售目标自动关联销售收款-->
		<exec condition="'@SqlReturn:Setting'=='false'&amp;&amp;'@SqlReturn:SysCode'=='SalesAssReceive'">
    <sql>update tbldbfieldinfo set inputType=0 where tableid=
(select id from tbldbtableinfo where tablename='tblDayWorkPlan') and fieldname in
('ReComplete','ReScale')</sql>
			
		</exec>	
	</sql>
</define>
<!--======================================================以上代码：系统配置=============================================-->




<!--特价申请单-->
<define name="tblSpecialApply_Add">
	<!--单据日期要小于等于开始日期， 结束日期要大于等于开始日期-->
	<sql type="condition">
		<exec condition="'@ValueofDB:tblSpecialApply_BillDate' &gt; '@ValueofDB:tblSpecialApply_StartDate' || '@ValueofDB:tblSpecialApply_EndDate' &lt; '@ValueofDB:tblSpecialApply_StartDate'">
			<error>SpecialApplyDate.Set.error</error>
		</exec>
	</sql>
	<!--主表折扣不能为负数-->
	<sql type="condition">
		<exec condition="@ValueofDB:tblSpecialApply_Discount &lt;0 ">
			<error>SpecialApplyDate.Discount.error</error>
		</exec>
	</sql>
	<!--特价申请表中不能重复出现同一个客户，重复时间段的记录-->
	<sql type="condition">
		<condition>
			<select>SELECT StartDate FROM tblSpecialApply WHERE id != @ValueofDB:tblSpecialApply_id AND ((CompanyCode = @ValueofDB:tblSpecialApply_CompanyCode AND StockCode = '' AND CompanyCode !='') OR (StockCode = @ValueofDB:tblSpecialApply_StockCode AND StockCode!='' AND CompanyCode = '') OR (CompanyCode!='' AND StockCode!='' AND CompanyCode = @ValueofDB:tblSpecialApply_CompanyCode AND StockCode = @ValueofDB:tblSpecialApply_StockCode) OR (CompanyCode = '' AND StockCode = '')) AND ((@ValueofDB:tblSpecialApply_StartDate BETWEEN StartDate AND EndDate) OR (StartDate &lt;= @ValueofDB:tblSpecialApply_StartDate AND EndDate &gt;= @ValueofDB:tblSpecialApply_EndDate) OR (@ValueofDB:tblSpecialApply_EndDate BETWEEN StartDate AND EndDate))</select>
		</condition>
		<exec condition="'@SqlReturn:StartDate' != 'null' &amp;&amp;'@SqlReturn:StartDate'.length != 0">
			<error>ClientRecord.repetitive.error</error>
		</exec>
	</sql>
	<sql type="condition"><!--同一个申请单中不允许重复录入同一个商品-->
		<condition>
			<select>SELECT b.GoodsFullName FROM tblSpecialApplyDet a JOIN tblGoods b ON a.GoodsCode = b.classCode WHERE f_ref = @ValueofDB:tblSpecialApply_id GROUP BY a.GoodsCode,b.GoodsFullName HAVING COUNT(*) &gt; 1</select>
		</condition>
		<exec condition="'@SqlReturn:GoodsFullName' != 'null' &amp;&amp;'@SqlReturn:GoodsFullName'.length != 0">
			<error>SpecialApply.Goosis.error,@SqlReturn:GoodsFullName</error>
		</exec>
	</sql>
	<!--明细数量不能为负数-->
	<sql type="condition">
		<condition>
			<select>select GoodsFullName as QtyZeroGoods from tblSpecialApplyDet a left join tblGoods b on a.GoodsCode=b.classCode where a.Qty &lt; 0 and a.f_ref=@ValueofDB:tblSpecialApply_id</select>
		</condition>
		<exec condition="'@SqlReturn:QtyZeroGoods' != 'null' &amp;&amp; '@SqlReturn:QtyZeroGoods'.length != 0 ">
		<error>negtive.qty.error</error>
		</exec>
	</sql>
	<sql type="condition">
		<condition>
			<select>SELECT GoodsCode,SpecialType,Qty,Price,Discount AS DetDiscount,OutQty FROM tblSpecialApplyDet WHERE f_ref = @ValueofDB:tblSpecialApply_id and Qty&lt;OutQty</select>
		</condition>
		<!--用户修改时如果明细中数量小于出库数量，不允许修改-->
		<exec condition="'@SqlReturn:GoodsCode' != 'null'">
			<error>amountToout-stock.smaller.error</error>
		</exec>
	</sql>
	<sql type="condition">
		<condition>
			<select>SELECT GoodsCode,SpecialType,Qty,Price,Discount AS DetDiscount,OutQty FROM tblSpecialApplyDet WHERE f_ref = @ValueofDB:tblSpecialApply_id</select>
			<select>SELECT GoodsCode AS GoodsCode1,Price,Discount AS DetDiscount1 FROM tblSpecialApplyDet WHERE f_ref = @ValueofDB:tblSpecialApply_id AND SpecialType = 0 AND ((Price &lt; 0 OR Price = 0) OR Discount != 0)</select>
			<select>SELECT GoodsCode AS GoodsCode2,Price AS Price1,Discount AS DetDiscount FROM tblSpecialApplyDet WHERE f_ref = @ValueofDB:tblSpecialApply_id AND SpecialType = 1 AND ((Discount &lt;= 0 OR Discount &gt;= 1) OR Price != 0)</select>
			<select>SELECT Discount FROM tblSpecialApply WHERE id = @ValueofDB:tblSpecialApply_id</select>
		</condition>
		<!--如果没有一条商品记录，必须输入折扣，并且折扣必须大于0小于1-->
		<exec condition="'@SqlReturn:GoodsCode' == 'null' &amp;&amp; (@SqlReturn:Discount &lt;=0|| @SqlReturn:Discount &gt;= 1)">
			<error>DiscountNoGoods.mustSet.error</error>
		</exec>
		<!--选择促销价时价格必须大于0，折扣必须等于0-->
		<exec condition="'@SqlReturn:GoodsCode1' != 'null'">
			<error>SpecialType.isSalespromotionPrice.error</error>
		</exec>
		<!--选择促销折扣时折扣必须大于0小于1，价格必须等于0-->
		<exec condition="'@SqlReturn:GoodsCode2' != 'null'">
			<error>SpecialType.isSalespromotionDiscount.error</error>
		</exec>
	</sql>
	<!--不启用审核流-->
	<sql type="condition">
		<exec condition="'@MEM:tblSpecialApply_IsStatart' == '0'">
			<sql type="define">tblSpecialApply_Add_One</sql>
		</exec>
	</sql>
</define>
<!--特价申请单-->
<define name="tblSpecialApply_Add_One">
	<sql type="condition">
		<exec condition="'@ValueofDB:tblSpecialApply_StockCode'!=''">
			<!--用销售出库单，销售退货单，销售换货单回填特价申请的出库数量-->
			<sql>update tblSpecialApplyDet set OutQty=(select isnull(sum(Qty),0) from tblSalesOutStock a,tblSalesOutStockDet b where a.id=b.f_ref and a.BillDate&gt;=@ValueofDB:tblSpecialApply_StartDate and a.BillDate&lt;=@ValueofDB:tblSpecialApply_EndDate and b.goodsCode=tblSpecialApplyDet.goodsCode and b.Price=tblSpecialApplyDet.Price and b.StockCode=@ValueofDB:tblSpecialApply_StockCode)+(select isnull(sum(Qty),0) from tblSalesReplace a,tblSalesReplaceDetail b where a.id=b.f_ref and a.BillDate&gt;=@ValueofDB:tblSpecialApply_StartDate and a.BillDate&lt;=@ValueofDB:tblSpecialApply_EndDate and b.goodsCode=tblSpecialApplyDet.goodsCode and b.Price=tblSpecialApplyDet.Price and b.StockCode=@ValueofDB:tblSpecialApply_StockCode)-(select isnull(sum(Qty),0) from tblSalesReturnStock a,tblSalesReturnStockDet b where a.id=b.f_ref and a.BillDate&gt;=@ValueofDB:tblSpecialApply_StartDate and a.BillDate&lt;=@ValueofDB:tblSpecialApply_EndDate and b.goodsCode=tblSpecialApplyDet.goodsCode and b.Price=tblSpecialApplyDet.Price and b.StockCode=@ValueofDB:tblSpecialApply_StockCode)-(select isnull(sum(Qty),0) from tblSalesReplace a,tblSalesReplaceDet b where a.id=b.f_ref and a.BillDate&gt;=@ValueofDB:tblSpecialApply_StartDate and a.BillDate&lt;=@ValueofDB:tblSpecialApply_EndDate and b.goodsCode=tblSpecialApplyDet.goodsCode and b.Price=tblSpecialApplyDet.Price and b.StockCode=@ValueofDB:tblSpecialApply_StockCode) where f_ref=@ValueofDB:tblSpecialApply_id and SpecialType=0</sql>
			<!--用销售出库单，销售退货单，销售换货单回填特价申请的出库数量-->
			<sql>update tblSpecialApplyDet set OutQty=(select isnull(sum(Qty),0) from tblSalesOutStock a,tblSalesOutStockDet b where a.id=b.f_ref and a.BillDate&gt;=@ValueofDB:tblSpecialApply_StartDate and a.BillDate&lt;=@ValueofDB:tblSpecialApply_EndDate and b.goodsCode=tblSpecialApplyDet.goodsCode and b.Discount=tblSpecialApplyDet.Discount and b.StockCode=@ValueofDB:tblSpecialApply_StockCode)+(select isnull(sum(Qty),0) from tblSalesReplace a,tblSalesReplaceDetail b where a.id=b.f_ref and a.BillDate&gt;=@ValueofDB:tblSpecialApply_StartDate and a.BillDate&lt;=@ValueofDB:tblSpecialApply_EndDate and b.goodsCode=tblSpecialApplyDet.goodsCode and b.Discount=tblSpecialApplyDet.Discount and b.StockCode=@ValueofDB:tblSpecialApply_StockCode)-(select isnull(sum(Qty),0) from tblSalesReturnStock a,tblSalesReturnStockDet b where a.id=b.f_ref and a.BillDate&gt;=@ValueofDB:tblSpecialApply_StartDate and a.BillDate&lt;=@ValueofDB:tblSpecialApply_EndDate and b.goodsCode=tblSpecialApplyDet.goodsCode and b.Discount=tblSpecialApplyDet.Discount and b.StockCode=@ValueofDB:tblSpecialApply_StockCode)-(select isnull(sum(Qty),0) from tblSalesReplace a,tblSalesReplaceDet b where a.id=b.f_ref and a.BillDate&gt;=@ValueofDB:tblSpecialApply_StartDate and a.BillDate&lt;=@ValueofDB:tblSpecialApply_EndDate and b.goodsCode=tblSpecialApplyDet.goodsCode and b.Discount=tblSpecialApplyDet.Discount and b.StockCode=@ValueofDB:tblSpecialApply_StockCode) where f_ref=@ValueofDB:tblSpecialApply_id and SpecialType=1</sql>
		</exec>	
		<exec condition="'@ValueofDB:tblSpecialApply_StockCode'==''">
			<!--用销售出库单，销售退货单，销售换货单回填特价申请的出库数量-->
			<sql>update tblSpecialApplyDet set OutQty=(select isnull(sum(Qty),0) from tblSalesOutStock a,tblSalesOutStockDet b where a.id=b.f_ref and a.BillDate&gt;=@ValueofDB:tblSpecialApply_StartDate and a.BillDate&lt;=@ValueofDB:tblSpecialApply_EndDate and b.goodsCode=tblSpecialApplyDet.goodsCode and b.Price=tblSpecialApplyDet.Price)+(select isnull(sum(Qty),0) from tblSalesReplace a,tblSalesReplaceDetail b where a.id=b.f_ref and a.BillDate&gt;=@ValueofDB:tblSpecialApply_StartDate and a.BillDate&lt;=@ValueofDB:tblSpecialApply_EndDate and b.goodsCode=tblSpecialApplyDet.goodsCode and b.Price=tblSpecialApplyDet.Price )-(select isnull(sum(Qty),0) from tblSalesReturnStock a,tblSalesReturnStockDet b where a.id=b.f_ref and a.BillDate&gt;=@ValueofDB:tblSpecialApply_StartDate and a.BillDate&lt;=@ValueofDB:tblSpecialApply_EndDate and b.goodsCode=tblSpecialApplyDet.goodsCode and b.Price=tblSpecialApplyDet.Price)-(select isnull(sum(Qty),0) from tblSalesReplace a,tblSalesReplaceDet b where a.id=b.f_ref and a.BillDate&gt;=@ValueofDB:tblSpecialApply_StartDate and a.BillDate&lt;=@ValueofDB:tblSpecialApply_EndDate and b.goodsCode=tblSpecialApplyDet.goodsCode and b.Price=tblSpecialApplyDet.Price ) where f_ref=@ValueofDB:tblSpecialApply_id and SpecialType=0</sql>
			<!--用销售出库单，销售退货单，销售换货单回填特价申请的出库数量-->
			<sql>update tblSpecialApplyDet set OutQty=(select isnull(sum(Qty),0) from tblSalesOutStock a,tblSalesOutStockDet b where a.id=b.f_ref and a.BillDate&gt;=@ValueofDB:tblSpecialApply_StartDate and a.BillDate&lt;=@ValueofDB:tblSpecialApply_EndDate and b.goodsCode=tblSpecialApplyDet.goodsCode and b.Discount=tblSpecialApplyDet.Discount )+(select isnull(sum(Qty),0) from tblSalesReplace a,tblSalesReplaceDetail b where a.id=b.f_ref and a.BillDate&gt;=@ValueofDB:tblSpecialApply_StartDate and a.BillDate&lt;=@ValueofDB:tblSpecialApply_EndDate and b.goodsCode=tblSpecialApplyDet.goodsCode and b.Discount=tblSpecialApplyDet.Discount )-(select isnull(sum(Qty),0) from tblSalesReturnStock a,tblSalesReturnStockDet b where a.id=b.f_ref and a.BillDate&gt;=@ValueofDB:tblSpecialApply_StartDate and a.BillDate&lt;=@ValueofDB:tblSpecialApply_EndDate and b.goodsCode=tblSpecialApplyDet.goodsCode and b.Discount=tblSpecialApplyDet.Discount )-(select isnull(sum(Qty),0) from tblSalesReplace a,tblSalesReplaceDet b where a.id=b.f_ref and a.BillDate&gt;=@ValueofDB:tblSpecialApply_StartDate and a.BillDate&lt;=@ValueofDB:tblSpecialApply_EndDate and b.goodsCode=tblSpecialApplyDet.goodsCode and b.Discount=tblSpecialApplyDet.Discount ) where f_ref=@ValueofDB:tblSpecialApply_id and SpecialType=1</sql>
		</exec>	
	</sql>
</define>



	<!--客户报价，客户的增加之前-->
	<define name="tblCustomerPrice_add_before">
		<sql type="condition">
			<condition>
				<select>select tblCustomerPrice.CompanyCode as CompanyCode,tblCompany.ComNumber,tblCompany.ComFullName as ComFullName from tblCustomerPrice left join tblCompany on tblCompany.classCode=tblCustomerPrice.CompanyCode where CompanyCode=@ValueofDB:tblCustomerPrice_CompanyCode</select>
			</condition>
			
			<exec condition="'@SqlReturn:CompanyCode'!='null'">
				<error>tblCustomerPrice.error.add,@SqlReturn:ComNumber,@SqlReturn:ComFullName</error>
			</exec>
		</sql>
	</define>
		
	<!--客户报价，客户的增加-->
	<define name="tblCustomerPrice_add">
		<sql type="condition">
			<condition>
				<select>select Count(*) as GoodsNum,tblGoods.GoodsNumber as GoodsNumber,tblGoods.GoodsFullName as GoodsFullName from tblCustomerPrice left join tblCustomerPriceDet on tblCustomerPriceDet.f_ref=tblCustomerPrice.id left join tblGoods on tblGoods.classCode=tblCustomerPriceDet.GoodsCode where tblCustomerPrice.CompanyCode=@ValueofDB:tblCustomerPrice_CompanyCode group by tblCustomerPriceDet.GoodsCode,tblGoods.GoodsNumber,tblGoods.GoodsFullName having Count(*)&gt;1</select>
			</condition>
			
			<exec condition="@SqlReturn:GoodsNum&gt;1">
				<error>tblCustomerPrice.error.goods.add,@SqlReturn:GoodsNumber,@SqlReturn:GoodsFullName</error>
			</exec>
		</sql>
	</define>

<!-- 商品属性项 添加操作 -->
<define name="tblGoodsPropItem_add">
	<sql type="condition">
		<condition>
			<select>select 'Exist' as HuePropItemIDCount from tblGoodsPropItem where PropName='Hue' group by PropItemID having count(*)&gt;1</select>
			<select>select 'Exist' as HuePropItemNameCount from tblGoodsPropItem where PropName='Hue' group by PropItemName having count(*)&gt;1</select>
			<select>select 'Exist' as yearNoPropItemIDCount from tblGoodsPropItem where PropName='yearNo' group by PropItemID having count(*)&gt;1</select>
			<select>select 'Exist' as yearNoPropItemNameCount from tblGoodsPropItem where PropName='yearNo' group by PropItemName having count(*)&gt;1</select>
			<select>select id as HueID from tblGoodsOfProp where PropName='Hue' and GoodsCode=''</select>
			<select>select id as yearNoID from tblGoodsOfProp where PropName='yearNo' and isnull(GoodsCode,'')=''</select>
		</condition>
		<!-- 属性值不可重复 -->
		<exec condition="'@ValueofDB:tblGoodsPropItem_PropName'=='Hue'&amp;&amp;'@SqlReturn:HuePropItemIDCount'=='Exist'">
			<error>tblGoodsOfProp.add.PropItemID</error>
		</exec>
		<!-- 属性值名不可重复 -->
		<exec condition="'@ValueofDB:tblGoodsPropItem_PropName'=='Hue'&amp;&amp;'@SqlReturn:HuePropItemNameCount'=='Exist'">
			<error>tblGoodsOfProp.add.PropItemName</error>
		</exec>
		<!-- 属性值不可重复 -->
		<exec condition="'@ValueofDB:tblGoodsPropItem_PropName'=='yearNo'&amp;&amp;'@SqlReturn:yearNoPropItemIDCount'=='Exist'">
			<error>tblGoodsOfProp.add.PropItemID</error>
		</exec>
		<!-- 属性值名不可重复 -->
		<exec condition="'@ValueofDB:tblGoodsPropItem_PropName'=='yearNo'&amp;&amp;'@SqlReturn:yearNoPropItemNameCount'=='Exist'">
			<error>tblGoodsOfProp.add.PropItemName</error>
		</exec>
		<exec condition="'@SqlReturn:HueID'=='null'">
			<sql>insert into tblGoodsOfProp (id,workFlowNode,workFlowNodeName,PropID,PropItemID,createBy,lastUpdateBy,createTime,lastUpdateTime,statusId,SCompanyID,isRelGoods,PropName,moduleType,GoodsCode) values (lower(substring(replace(newid(),'-',''),1,28)),'-1','finish','430b5096_1006041531436870001','','1','1','2010-06-12 11:28:46','2010-06-12 11:28:46',0,'00001',2,'Hue','Hue','')</sql>
		</exec>
		<exec condition="'@SqlReturn:yearNoID'=='null'">
			<sql>insert into tblGoodsOfProp (id,workFlowNode,workFlowNodeName,PropID,PropItemID,createBy,lastUpdateBy,createTime,lastUpdateTime,statusId,SCompanyID,isRelGoods,PropName,moduleType,GoodsCode) values (lower(substring(replace(newid(),'-',''),1,28)),'-1','finish','13784063_0907011020470780005','','1','1','2010-06-12 11:28:46','2010-06-12 11:28:46',0,'00001',2,'yearNo','yearNo','')</sql>
		</exec>
	</sql>
	<sql type="condition">
		<condition>
			<select>select id as HueID from tblGoodsOfProp where PropName='Hue' and isnull(GoodsCode,'')=''</select>
			<select>select id as yearNoID from tblGoodsOfProp where PropName='yearNo' and isnull(GoodsCode,'')=''</select>
		</condition>
		<!-- 若为yearNo 向表 tblGoodsOfPropDet 插入相应记录 -->
		<exec condition="'@ValueofDB:tblGoodsPropItem_PropName'=='yearNo'">
			<sql>insert into tblGoodsOfPropDet(id,f_ref,PropItemID,PropItemNum,PropItemName,SCompanyID,languageId,PropID) values(lower(substring(replace(newid(),'-',''),1,28)),@SqlReturn:yearNoID,@ValueofDB:tblGoodsPropItem_PropItemID,@ValueofDB:id,@ValueofDB:tblGoodsPropItem_PropItemName,'00001','','yearNO')</sql>
		</exec>
		<!-- 若为Hue 向表 tblGoodsOfPropDet 插入相应记录 -->
		<exec condition="'@ValueofDB:tblGoodsPropItem_PropName'=='Hue'">
			<sql>insert into tblGoodsOfPropDet(id,f_ref,PropItemID,PropItemNum,PropItemName,SCompanyID,languageId,PropID) values(lower(substring(replace(newid(),'-',''),1,28)),@SqlReturn:HueID,@ValueofDB:tblGoodsPropItem_PropItemID,@ValueofDB:id,@ValueofDB:tblGoodsPropItem_PropItemName,'00001','','Hue')</sql>
		</exec>
	</sql>
</define>

<!-- 商品属性项 删除操作 -->
<define name="tblGoodsPropItem_delete">
	<sql type="condition">
		<condition>
			<select>select PropName,PropItemID from tblGoodsPropItem where id=@ValueofDB:tblGoodsPropItem_id</select>
			<select>select 'Used' as HuePropItemUsed from tblStockDet where Hue=(select PropItemID from tblGoodsPropItem where PropName='Hue' and id=@ValueofDB:tblGoodsPropItem_id)</select>
			<select>select 'Used' as YearNoPropItemUsed from tblStockDet where yearNo=(select PropItemID from tblGoodsPropItem where PropName='yearNo' and id=@ValueofDB:tblGoodsPropItem_id)</select>
		</condition>
		<!-- 颜色Hue 是否已被引用 -->
		<exec condition="'@SqlReturn:PropName'=='Hue'&amp;&amp;'@SqlReturn:HuePropItemUsed'=='Used'">
			<error>tblGoodsOfProp.operate.Used</error>
		</exec>
		<!-- 厚度yearNo 是否已被引用 -->
		<exec condition="'@SqlReturn:PropName'=='yearNo'&amp;&amp;'@SqlReturn:YearNoPropItemUsed'=='Used'">
			<error>tblGoodsOfProp.operate.Used</error>
		</exec>
		<!-- 若为Hue 从表 tblGoodsOfPropDet 删除相应记录 -->
		<exec condition="true">
			<sql>delete from tblGoodsOfPropDet where PropItemNum=@ValueofDB:tblGoodsPropItem_id</sql>
		</exec>
	</sql>
</define>

<!-- 商品属性项 修改前操作 -->
<define name="tblGoodsPropItem_update_before">
	<sql type="condition">
		<condition>
			<select>select 'Used' as HuePropItemUsed from tblStockDet where Hue=(select PropItemID from tblGoodsPropItem where id=@ValueofDB:tblGoodsPropItem_id)</select>
			<select>select 'Used' as YearNoPropItemUsed from tblStockDet where yearNo=(select PropItemID from tblGoodsPropItem where id=@ValueofDB:tblGoodsPropItem_id)</select>
		</condition>
		<!-- 颜色Hue 是否已被引用 -->
		<exec condition="'@ValueofDB:tblGoodsPropItem_PropName'=='Hue'&amp;&amp;'@SqlReturn:HuePropItemUsed'=='Used'">
			<error>tblGoodsOfProp.operate.Used</error>
		</exec>
		<!-- 厚度yearNo 是否已被引用 -->
		<exec condition="'@ValueofDB:tblGoodsPropItem_PropName'=='yearNo'&amp;&amp;'@SqlReturn:YearNoPropItemUsed'=='Used'">
			<error>tblGoodsOfProp.operate.Used</error>
		</exec>
	</sql>
</define>

<!-- 商品属性项 修改后操作 -->
<define name="tblGoodsPropItem_update">
	<sql type="condition">
		<condition>
			<select>select 'Exist' as HuePropItemIDCount from tblGoodsPropItem where PropName='Hue' group by PropItemID having count(*)&gt;1</select>
			<select>select 'Exist' as HuePropItemNameCount from tblGoodsPropItem where PropName='Hue' group by PropItemName having count(*)&gt;1</select>
			<select>select 'Exist' as yearNoPropItemIDCount from tblGoodsPropItem where PropName='yearNo' group by PropItemID having count(*)&gt;1</select>
			<select>select 'Exist' as yearNoPropItemNameCount from tblGoodsPropItem where PropName='yearNo' group by PropItemName having count(*)&gt;1</select>
		</condition>
		<!-- 属性值不可重复 -->
		<exec condition="'@ValueofDB:tblGoodsPropItem_PropName'=='Hue'&amp;&amp;'@SqlReturn:HuePropItemIDCount'=='Exist'">
			<error>tblGoodsOfProp.add.PropItemID</error>
		</exec>
		<!-- 属性值名不可重复 -->
		<exec condition="'@ValueofDB:tblGoodsPropItem_PropName'=='Hue'&amp;&amp;'@SqlReturn:HuePropItemNameCount'=='Exist'">
			<error>tblGoodsOfProp.add.PropItemName</error>
		</exec>
		<!-- 属性值不可重复 -->
		<exec condition="'@ValueofDB:tblGoodsPropItem_PropName'=='yearNo'&amp;&amp;'@SqlReturn:yearNoPropItemIDCount'=='Exist'">
			<error>tblGoodsOfProp.add.PropItemID</error>
		</exec>
		<!-- 属性值名不可重复 -->
		<exec condition="'@ValueofDB:tblGoodsPropItem_PropName'=='yearNo'&amp;&amp;'@SqlReturn:yearNoPropItemNameCount'=='Exist'">
			<error>tblGoodsOfProp.add.PropItemName</error>
		</exec>
		<!-- 若为Hue 从表 tblGoodsOfPropDet 更新相应记录 -->
		<exec condition="'@ValueofDB:tblGoodsPropItem_PropName'=='Hue'">
			<sql>update tblGoodsOfPropDet set PropItemID=@ValueofDB:tblGoodsPropItem_PropItemID,PropItemName=@ValueofDB:tblGoodsPropItem_PropItemName,PropID='Hue' where PropItemNum=@ValueofDB:id</sql>
		</exec>
		<!-- 若为yearNo 从表 tblGoodsOfPropDet 更新相应记录 -->
		<exec condition="'@ValueofDB:tblGoodsPropItem_PropName'=='yearNo'">
			<sql>update tblGoodsOfPropDet set PropItemID=@ValueofDB:tblGoodsPropItem_PropItemID,PropItemName=@ValueofDB:tblGoodsPropItem_PropItemName,PropID='yearNO' where PropItemNum=@ValueofDB:id</sql>
		</exec>
	</sql>
</define>

<!--商品属性值维护添加操作-->
<define name="tblGoodsOfProp_Add">
	<sql type="condition">
		<condition>
			<select>select count(groupName) AS RepeatNum from tblGoodsOfProp where groupName IN (select groupName from tblGoodsOfProp where id=@ValueofDB:tblGoodsOfProp_id) and  moduleType IN (select moduleType from tblGoodsOfProp where id=@ValueofDB:tblGoodsOfProp_id)</select>
			<select>select count(languageId) AS RepeatName from tblGoodsOfPropDet where f_ref=@ValueofDB:tblGoodsOfProp_id GROUP BY languageId HAVING count(*)&gt;1</select>
		</condition>
		<exec condition="'@SqlReturn:RepeatNum' &gt; 1">
		    <error>tblGoodsOfProp.Delete.repeatnames.error</error>
		</exec>
		<exec condition="'@SqlReturn:RepeatName' &gt; 1">
		    <error>tblGoodsOfProp.add.duplicate.attr.name.error</error>
		</exec>
	</sql>
</define>
<!--商品属性值维护删除操作-->
<define name="tblGoodsOfProp_Delete">
	<sql type="condition">
		<condition>
			<select>SELECT count(tg.classCode) AS UseNum FROM tblGoods tg WHERE tg.HueGroup IN (select groupName from tblGoodsOfProp where id=@ValueofDB:tblGoodsOfProp_id) OR tg.YearNoGroup IN (select groupName from tblGoodsOfProp where id=@ValueofDB:tblGoodsOfProp_id)</select>
		</condition>
		<exec condition="'@SqlReturn:UseNum' &gt; 0">
		    <error>tblGoodsOfProp.Delete.usedbygoods.error</error>
		</exec>
	</sql>
</define>
<!--商品属性值维护修改前操作-->
<define name="tblGoodsOfProp_Update">
	<sql type="condition">
		<condition><select>SELECT groupName as groupNameOld from tblGoodsOfProp where id=@ValueofDB:tblGoodsOfProp_id</select></condition>
		<exec condition="'@ValueofDB:moduleType'=='Hue'">
			<sql>update tblGoods set HueGroup=@ValueofDB:groupName where HueGroup=@SqlReturn:groupNameOld</sql>
		</exec>
		<exec condition="'@ValueofDB:moduleType'=='yearNo'">
			<sql>update tblGoods set yearNoGroup=@ValueofDB:groupName where yearNoGroup=@SqlReturn:groupNameOld</sql>
		</exec>
	</sql>
</define>


<define name="tblGoodsAttribute_Update">
	<sql type="condition">
		<!-- 修改系统配置必须重启系统，否则不允许修改 -->
		<exec condition="'@Sess:BillOper'=='update'">
			<confirm yesDefine="tblGoodsAttribute_System_Restart" noDefine="tblGoodsAttribute_System_NoRestart">tblSysDeploy.update.Alert</confirm>
		</exec>
	</sql>
</define>
	<!-- 修改后 不重启 -->
	<define name="tblGoodsAttribute_System_NoRestart">
		<!-- 修改define -->
		<sql type="condition">
			<exec condition="true">
				<sql type="define">tblGoodsAttribute_System_define</sql>
			</exec>
		</sql>
	</define>
<!--===========================商品属性启用=============================-->
<define name="tblGoodsAttribute_Open">
	<sql type="condition">
		<exec condition="true">
			<confirm yesDefine="tblGoodsAttribute_System_RestartO" noDefine="tblGoodsAttribute_System_NoRestartO">tblSysDeploy.update.Alert</confirm>
		</exec>
	</sql>
</define>
<!--========启用提示是否后执行的代码====-->
<define name="tblGoodsAttribute_System_RestartO">
	<sql type="condition">
		<exec condition="true">
			<sql>update tblGoodsAttribute set isUsed=1 where id=@ValueofDB:id</sql>
			<sql>update tblGoodsPropInfo set isUsed=1 where propName=(select propName from tblGoodsAttribute where id=@ValueofDB:id)</sql>
			<sql type="define">tblGoodsAttribute_System_define</sql>
		</exec>
	</sql>
	<sql type="condition">
		<exec condition="true"><sql type="define">System_Restart</sql></exec>
	</sql>
</define>

<define name="tblGoodsAttribute_System_NoRestartO">
	<sql type="condition">
		<exec condition="true">
			<sql>update tblGoodsAttribute set isUsed=1 where id=@ValueofDB:id</sql>
			<sql>update tblGoodsPropInfo set isUsed=1 where propName=(select propName from tblGoodsAttribute where id=@ValueofDB:id)</sql>
			<sql type="define">tblGoodsAttribute_System_define</sql>
		</exec>
	</sql>
</define>
<!--==========================商品属性停用=============================-->
<define name="tblGoodsAttribute_Stop">
	<sql type="condition">
		<exec condition="true">
			<confirm yesDefine="tblGoodsAttribute_System_RestartS" noDefine="tblGoodsAttribute_System_NoRestartS">tblSysDeploy.update.Alert</confirm>
		</exec>
	</sql>
</define>
<!--========启用提示是否后执行的代码====-->
<define name="tblGoodsAttribute_System_RestartS">
	<sql type="condition">
		<exec condition="true">
			<sql>update tblGoodsAttribute set isUsed=2 where id=@ValueofDB:id</sql>
			<sql>update tblGoodsPropInfo set isUsed=2 where propName=(select propName from tblGoodsAttribute where id=@ValueofDB:id)</sql>
			<sql type="define">tblGoodsAttribute_System_define</sql>
		</exec>
	</sql>
	<sql type="condition">
		<exec condition="true"><sql type="define">System_Restart</sql></exec>
	</sql>
</define>

<define name="tblGoodsAttribute_System_NoRestartS">
	<sql type="condition">
		<exec condition="true">
			<sql>update tblGoodsAttribute set isUsed=2 where id=@ValueofDB:id</sql>
			<sql>update tblGoodsPropInfo set isUsed=2 where propName=(select propName from tblGoodsAttribute where id=@ValueofDB:id)</sql>
			<sql type="define">tblGoodsAttribute_System_define</sql>
		</exec>
	</sql>
</define>


	<!-- 修改后 重启 -->
	<define name="tblGoodsAttribute_System_Restart">
		<!-- 修改define -->
		<sql type="condition">
			<exec condition="true">
				<sql type="define">tblGoodsAttribute_System_define</sql>
			</exec>
		</sql>
		<!-- 重启系统 -->
		<sql type="condition">
			<exec condition="true">
				<sql type="define">System_Restart</sql>
			</exec>
		</sql>
	</define>
	
	

<!--商品属性设置-->
<define name="tblGoodsAttribute_System_define">
	<sql type="condition"> 	
		<condition>
			<select>select propName,propName as AttributeName,languageId as ChineseCN from tblGoodsAttribute where id=@ValueofDB:id</select>
			<select>select isUsed as Aused,isCalculate as Acal,languageid  from tblGoodsAttribute where id=@ValueofDB:tblGoodsAttribute_id</select>
			<select>select isUsed,isCalculate,joinTable from tblGoodsPropInfo where propName=@SqlReturn:propName</select>
			<select>select Count(isUsed) as UseNum from tblGoodsAttribute where isUsed=1</select>
			<select>select languageId as Exist from tblGoodsAttribute where id!=@ValueofDB:id and languageId=@SqlReturn:ChineseCN</select>
		</condition>
		<exec condition="'@SqlReturn:Exist'!='null'&amp;&amp;'@SqlReturn:Exist'.length!=0">
			<error>AttributName.IsUsed.error,@SqlReturn:Exist</error>
		</exec>
			<!--有启用属性刚启用商品属性调整单 没有则不启用-->
		<exec condition="@SqlReturn:UseNum&gt;0">
			<!--相关的模块也启用-->
			<sql>update tblmodules set isUsed=1 where linkAddress='/UserFunctionQueryAction.do?tableName=tblAttributeAdjust'</sql>
		</exec>
			<!--有启用属性刚启用商品属性调整单 没有则不启用-->
		<exec condition="@SqlReturn:UseNum==0">
			<!--相关的模块也启用-->
			<sql>update tblmodules set isUsed=2 where linkAddress='/UserFunctionQueryAction.do?tableName=tblAttributeAdjust'</sql>
		</exec>
		<!-- 判断属性有没有被使用，若有，则不允许被修改 -->
		<exec condition="true">
			<sql type="procedure">
			{call proc_AttributeIsUsed(@SqlReturn:propName,retCode,flag)}
			</sql>
		</exec>
		<exec condition="@ProcReturn:flag==1">
			<error>goodsAttribute.edite.error</error>
		</exec>
			<!--启用序列号时，则启用序列号管理模块-->
		<exec condition="'@SqlReturn:propName'=='Seq'&amp;&amp; @SqlReturn:Aused == 1">
			<sql>update tblModules set IsHidden=2 where modelName in(select id from tblLanguage where zh_CN='序列号管理')</sql>
			<sql>UPDATE tblSysDeploy SET Setting = '3' WHERE SysCode='scanType'</sql>
		</exec>
		<!--停用用序列号时，则隐藏序列号管理模块-->
		<exec condition="'@SqlReturn:propName'=='Seq'&amp;&amp; @SqlReturn:Aused == 2">
			<sql>update tblModules set IsHidden=1 where modelName in(select id from tblLanguage where zh_CN='序列号管理')</sql>
			<sql>UPDATE tblSysDeploy SET Setting = '0' WHERE SysCode='scanType'</sql>
		</exec>
		<!--修改是否启用项为是-->
		<exec condition="@ProcReturn:flag==0 &amp;&amp; @SqlReturn:isUsed != @SqlReturn:Aused &amp;&amp; @SqlReturn:Aused== 1">
			<sql>update tblGoodsPropInfo set isUsed=@SqlReturn:Aused where propName=@SqlReturn:propName</sql>
			<sql>update tblDBFieldInfo set inputType=a.TypeOld from(select tblDBfieldinfo.inputTypeOld as TypeOld,tblDBfieldinfo.fieldname as fieldname,tblDBfieldinfo.tableid as tableid from tblDBfieldinfo where  tblDBfieldinfo.fieldname=@SqlReturn:propName)a where tblDBFieldInfo.fieldname=a.fieldname and tblDBFieldInfo.tableid=a.tableid</sql>
			<!--启用颜色属性，相关的模块也启用-->
			<sql>update tblmodules set isUsed=1 where linkAddress in ('/UserFunctionQueryAction.do?tableName=tblGoodsPropItem&amp;PropName=Hue','/UserFunctionQueryAction.do?tableName=tblGoodsOfProp&amp;PropName=Hue') and @SqlReturn:propName='Hue'</sql>
			<!--启用厚度属性，相关的模块也启用-->
			<sql>update tblmodules set isUsed=1 where linkAddress in ('/UserFunctionQueryAction.do?tableName=tblGoodsPropItem&amp;PropName=yearNo','/UserFunctionQueryAction.do?tableName=tblGoodsOfProp&amp;PropName=yearNo') and @SqlReturn:propName='yearNo'</sql>
		</exec>
		<!--修改是否启用项为否-->
		<exec condition="@ProcReturn:flag==0 &amp;&amp; @SqlReturn:isUsed != @SqlReturn:Aused &amp;&amp; @SqlReturn:Aused== 2">
			<sql>update tblGoodsPropInfo set isUsed=@SqlReturn:Aused where propName=@ValueofDB:tblGoodsOfProp_propName</sql>
			<sql>update tblDBFieldInfo set inputTypeOld=a.Type,inputType=3 from(select tblDBfieldinfo.inputType as Type,tblDBfieldinfo.fieldname as fieldname,tblDBfieldinfo.tableid as tableid from tblDBfieldinfo where  tblDBfieldinfo.fieldname=@ValueofDB:tblGoodsOfProp_propName)a where tblDBFieldInfo.fieldname=a.fieldname and tblDBFieldInfo.tableid=a.tableid</sql>
			<!--不启用颜色属性，相关的模块也不启用-->
			<sql>update tblmodules set isUsed=2 where linkAddress in ('/UserFunctionQueryAction.do?tableName=tblGoodsPropItem&amp;PropName=Hue','/UserFunctionQueryAction.do?tableName=tblGoodsOfProp&amp;PropName=Hue') and @SqlReturn:propName='Hue'</sql>
			<!--不启用厚度属性，相关的模块也不启用-->
			<sql>update tblmodules set isUsed=2 where linkAddress in ('/UserFunctionQueryAction.do?tableName=tblGoodsPropItem&amp;PropName=yearNo','/UserFunctionQueryAction.do?tableName=tblGoodsOfProp&amp;PropName=yearNo') and @SqlReturn:propName='yearNo'</sql>
		</exec>
		<!--修改是否启用项为是且属性是关联商品表-->
		<exec condition="@ProcReturn:flag==0 &amp;&amp; @SqlReturn:isUsed != @SqlReturn:Aused &amp;&amp; @SqlReturn:Aused==1 &amp;&amp; @SqlReturn:joinTable==1">
			<sql>update tblDBtableInfo set tableType=1,perantTableName='tblGoods' where tableName='tblGoodsProp_'+@SqlReturn:propName</sql>
		</exec>
		<!--修改是否启用项为否且属性是关联商品表-->
		<exec condition="@ProcReturn:flag==0 &amp;&amp; @SqlReturn:isUsed != @SqlReturn:Aused &amp;&amp; @SqlReturn:Aused==2 &amp;&amp; @SqlReturn:joinTable==1">
			<sql>update tblDBtableInfo set tableType=0,perantTableName='' where tableName='tblGoodsProp_'+@SqlReturn:propName</sql>
		</exec>
		<!--修改是否进行成本计算-->
		<exec condition="@ProcReturn:flag==0">
			<sql>update tblGoodsPropInfo set isCalculate=@SqlReturn:Acal where propName=@SqlReturn:propName</sql>
		</exec>
		<!-- 修改相应模块，字段，属性管理的多语言 -->
		<exec condition="true">
			<!-- 属性管理名 -->
			<sql>update tblLanguage set zh_CN=@SqlReturn:ChineseCN,zh_TW=@SqlReturn:ChineseTW,en=@SqlReturn:English from tblGoodsPropInfo a left join tblLanguage l on l.id=a.languageId where a.propName=@SqlReturn:AttributeName</sql>
			<!-- 属性关联设置模块名 -->
			<sql>update tblLanguage set zh_CN='商品'+@SqlReturn:ChineseCN+'关联设置',zh_TW='商品'+@SqlReturn:ChineseTW+'??设置',en='Goods '+@SqlReturn:English+' Relation Setting' from tblModules a left join tblLanguage l on l.id=a.modelName where a.linkAddress like '/UserFunctionQueryAction.do?tableName=tblGoodsOfProp&amp;PropName='+@SqlReturn:AttributeName</sql>
			<!-- 属性设置模块名 -->
			<sql>update tblLanguage set zh_CN=@SqlReturn:ChineseCN+'设置',zh_TW=@SqlReturn:ChineseTW+'设置',en=@SqlReturn:English+' Setting' from tblModules a left join tblLanguage l on l.id=a.modelName where a.linkAddress like '/UserFunctionQueryAction.do?tableName=tblGoodsPropItem&amp;PropName='+@SqlReturn:AttributeName</sql>
			<!-- 字段名 -->
			<sql>update tblLanguage set zh_CN=@SqlReturn:ChineseCN,zh_TW=@SqlReturn:ChineseTW,en=@SqlReturn:English from tblDBFieldInfo f left join tblLanguage l on l.Id=f.languageId where f.fieldName=@SqlReturn:AttributeName</sql>
			
			<!-- 删除列配置 -->
			<sql>delete from tblColConfig</sql>
		</exec>
		<!-- 系统配置启用保质期处理 -->
		<exec condition="'@SqlReturn:propName'=='Availably' &amp;&amp; @SqlReturn:Aused== 1">
			<sql>update tblDBFieldInfo set inputType=inputTypeOld where tableId=(select id from tblDBTableInfo where tableName='tblGoods') and fieldName in ('Validity','AvailablyType')</sql>
			<sql>update tblModules set IsUsed=1 where linkAddress='/ReportDataAction.do?reportNumber=ReportStockValidity'</sql>
		</exec>
		<exec condition="'@SqlReturn:propName'=='Availably' &amp;&amp; @SqlReturn:Aused!= 1">
			<sql>update tblDBFieldInfo set inputType=3 where tableId=(select id from tblDBTableInfo where tableName='tblGoods') and fieldName in ('Validity','AvailablyType')</sql>
			<sql>update tblModules set IsUsed=2 where linkAddress='/ReportDataAction.do?reportNumber=ReportStockValidity'</sql>
		</exec>
	</sql>
	<sql type="define">tblGoodsAttribute_updateModule</sql>
</define>

<define name="tblGoodsAttribute_updateModule">
	<sql type="condition"> 	
		<condition><select>select propName,isUsed from tblGoodsAttribute where id=@ValueofDB:tblGoodsAttribute_id</select>
							 <select>select isUsed as ProDateUsed from tblGoodsAttribute where propName='ProDate'</select>
							 <select>select isUsed as AvailablyUsed from tblGoodsAttribute where propName='Availably'</select></condition>
		<!--启用序列号设置模块-->
		<exec condition="'@SqlReturn:propName'=='Seq'&amp;&amp;'@SqlReturn:isUsed'=='1'">
			<sql>update tblDBFieldInfo set inputType=inputTypeOld where tableId=(select id from tblDBTableInfo where tableName='tblGoods') and fieldName in ('seqIsUsed','seqDigit')</sql>
			<sql>update tblModules set IsUsed=1 where  linkAddress in(
							'/ReportDataAction.do?reportNumber=ReportSeqDispose',
							'/ReportDataAction.do?reportNumber=ReportSeqGoods','/ReportDataAction.do?reportNumber=ReportStockAge')</sql>

		</exec>
		<!--停用序列号设置模块-->
		<exec condition="'@SqlReturn:propName'=='Seq'&amp;&amp;'@SqlReturn:isUsed'=='2'">
			<sql>update tblDBFieldInfo set inputType=3 where tableId=(select id from tblDBTableInfo where tableName='tblGoods') and fieldName in ('seqIsUsed','seqDigit')</sql>
			<sql>update tblModules set IsUsed=2 where  linkAddress in(
							'/ReportDataAction.do?reportNumber=ReportStoreGoodsSeq',
							'/ReportDataAction.do?reportNumber=ReportSeqDispose',
							'/ReportDataAction.do?reportNumber=ReportSeqOutStockDetail',
							'/ReportDataAction.do?reportNumber=ReportSeqGoods','/ReportDataAction.do?reportNumber=ReportStockAge')</sql>
			
		</exec>
		
		<!--启用颜色设置模块-->
		<exec condition="'@SqlReturn:propName'=='Hue'&amp;&amp;'@SqlReturn:isUsed'=='1'">			<sql>update tblModules set IsUsed=1 where linkAddress='/UserFunctionQueryAction.do?tableName=tblGoodsPropItem&amp;moduleType=Hue&amp;PropName=Hue'</sql>
			<sql>update tblModules set IsUsed=1 where linkAddress='/UserFunctionQueryAction.do?tableName=tblGoodsOfProp&amp;moduleType=Hue'</sql>
      <sql>UPDATE tblDBFieldInfo SET inputType = '16',inputTypeOld='16' WHERE fieldName='HueGroup' AND tableId IN (SELECT id FROM tblDBTableInfo tdi2 WHERE tdi2.tableName='tblGoods')</sql>
		</exec>
		<!--停用颜色设置模块-->
		<exec condition="'@SqlReturn:propName'=='Hue'&amp;&amp;'@SqlReturn:isUsed'=='2'">
			<sql>update tblModules set IsUsed=2 where linkAddress='/UserFunctionQueryAction.do?tableName=tblGoodsOfProp&amp;moduleType=Hue'</sql>
      <sql>UPDATE tblDBFieldInfo SET inputType = '3',inputTypeOld='3' WHERE fieldName='HueGroup' AND tableId IN (SELECT id FROM tblDBTableInfo tdi2 WHERE tdi2.tableName='tblGoods')</sql>
		</exec>
		<!--启用厚度设置模块-->
		<exec condition="'@SqlReturn:propName'=='yearNO'&amp;&amp;'@SqlReturn:isUsed'=='1'">
			<sql>update tblModules set IsUsed=1 where linkAddress='/UserFunctionQueryAction.do?tableName=tblGoodsOfProp&amp;moduleType=yearNo'</sql>
      <sql>UPDATE tblDBFieldInfo SET inputType = '16',inputTypeOld='16' WHERE fieldName='YearNoGroup' AND tableId IN (SELECT id FROM tblDBTableInfo tdi2 WHERE tdi2.tableName='tblGoods')</sql>
		</exec>
		<!--停用厚度设置模块-->
		<exec condition="'@SqlReturn:propName'=='yearNO'&amp;&amp;'@SqlReturn:isUsed'=='2'">
			<sql>update tblModules set IsUsed=2 where linkAddress='/UserFunctionQueryAction.do?tableName=tblGoodsOfProp&amp;moduleType=yearNo'</sql>
      <sql>UPDATE tblDBFieldInfo SET inputType = '3',inputTypeOld='3' WHERE fieldName='YearNoGroup' AND tableId IN (SELECT id FROM tblDBTableInfo tdi2 WHERE tdi2.tableName='tblGoods')</sql>
		</exec>
	</sql>
</define>

	<!--价格控制增加时-->
	<define name="tblPriceControl_Add">
		<sql type="condition">
			<condition>
				<select>
SELECT c.GoodsFullName FROM tblPriceControl a , tblPriceControlDet b ,tblGoods c WHERE a.id=b.f_ref AND b.GoodsCode=c.classCode AND (CASE b.LowestPrice WHEN 'FacePrice' THEN c.FacePrice WHEN 'ProSalesPrice' THEN c.ProSalesPrice WHEN 'ProSalesPrice2' THEN c.ProSalesPrice2 WHEN 'ProSalesPrice3' THEN c.ProSalesPrice3 WHEN 'ProSalesPrice4' THEN c.ProSalesPrice4 WHEN 'ProjectPrice' THEN c.ProjectPrice WHEN 'ProSalesPrice5' THEN c.ProSalesPrice5 WHEN 'ProSalesPrice6' THEN c.ProSalesPrice6 WHEN 'ProSalesPrice7' THEN c.ProSalesPrice7 WHEN 'ProSalesPrice8' THEN c.ProSalesPrice8 ELSE c.ProSalesPrice9 END)&lt;=0 AND (CASE b.Highest WHEN 'FacePrice' THEN c.FacePrice WHEN 'ProSalesPrice' THEN c.ProSalesPrice WHEN 'ProSalesPrice2' THEN c.ProSalesPrice2 WHEN 'ProSalesPrice3' THEN c.ProSalesPrice3 WHEN 'ProSalesPrice4' THEN c.ProSalesPrice4 WHEN 'ProjectPrice' THEN c.ProjectPrice WHEN 'ProSalesPrice5' THEN c.ProSalesPrice5 WHEN 'ProSalesPrice6' THEN c.ProSalesPrice6 WHEN 'ProSalesPrice7' THEN c.ProSalesPrice7 WHEN 'ProSalesPrice8' THEN c.ProSalesPrice8 ELSE c.ProSalesPrice9 END)&lt;=0 and b.f_Ref = @ValueofDB:tblPriceControl_id</select>
			</condition>
			<exec condition="'@SqlReturn:GoodsFullName' != 'null'">				
				<error>tblPriceControl.Price11.error,@SqlReturn:GoodsFullName</error>
			</exec>
		</sql>

		<sql type="condition">
			<condition>
				<select>select Count(UserID) as CountNum,UserID,EmpFullName,Type from tblPriceControl left join tblEmployee on tblEmployee.id=tblPriceControl.UserID group by UserID,Type,EmpFullName having Count(UserID)&gt;1</select>
				<select>select Count(GoodsCode) as CountGoods,GoodsCode,GoodsFullName from tblPriceControlDet left join tblGoods on tblGoods.classCode=tblPriceControlDet.GoodsCode where f_ref=@ValueofDB:tblPriceControl_id group by GoodsCode,GoodsFullName</select>
				<select>SELECT GoodsCode AS PCDGoods FROM tblPriceControlDet WHERE f_ref = @ValueofDB:tblPriceControl_id</select>
			</condition>
			<exec condition="@SqlReturn:CountNum&gt;1">
				<error>tblPriceControl.add.user.error,@SqlReturn:EmpFullName</error>
			</exec>
			<exec condition="@SqlReturn:CountGoods&gt;1">
				<error>tblPriceControl.add.goods.error,@SqlReturn:GoodsFullName</error>
			</exec>
			<exec condition="'@SqlReturn:PCDGoods'=='null'">
				<error>tblPriceControl.add.goods.error1</error>
			</exec>
		</sql>
	</define>
	

	
	<define name="tblCheckDet_GoodsSeqSet">
		<sql type="condition">
			<condition>
				<select>select seqIsUsed as isUsed from tblGoods where classCode=@ValueofDB:tblCheckDet_GoodsCode</select>
			</condition>
			<exec condition="@SqlReturn:isUsed == 0">
				<error>goodsseq.set.res</error>
			</exec>
		</sql>
	</define>
	
	<define name="tblOtherInDet_GoodsSeqSet">
		<sql type="condition">
			<condition>
				<select>select seqIsUsed as isUsed from tblGoods where classCode=@ValueofDB:tblOtherInDet_GoodsCode</select>
			</condition>
			<exec condition="@SqlReturn:isUsed == 0">
				<error>goodsseq.set.res</error>
			</exec>
		</sql>
	</define>
	
	<define name="tblAllotDet_GoodsSeqSet">
		<sql type="condition">
			<condition>
				<select>select seqIsUsed as isUsed from tblGoods where classCode=@ValueofDB:tblAllotDet_GoodsCode</select>
			</condition>
			<exec condition="@SqlReturn:isUsed == 0">
				<error>goodsseq.set.res</error>
			</exec>
		</sql>
	</define>
	
	<define name="tblAllotChangeDet_GoodsSeqSet">
		<sql type="condition">
			<condition>
				<select>select seqIsUsed as isUsed from tblGoods where classCode=@ValueofDB:tblAllotChangeDet_GoodsCode</select>
			</condition>
			<exec condition="@SqlReturn:isUsed == 0">
				<error>goodsseq.set.res</error>
			</exec>
		</sql>
	</define>
	
	<define name="tblGoodsSplitForm_GoodsSeqSet">
		<sql type="condition">
			<condition>
				<select>select seqIsUsed as isUsed from tblGoods where classCode=@ValueofDB:tblGoodsSplitForm_GoodsCode</select>
			</condition>
			<exec condition="@SqlReturn:isUsed == 0">
				<error>goodsseq.set.res</error>
			</exec>
		</sql>
	</define>
	
	<define name="tblGoodsSplitFormDet_GoodsSeqSet">
		<sql type="condition">
			<condition>
				<select>select seqIsUsed as isUsed from tblGoods where classCode=@ValueofDB:tblGoodsSplitFormDet_GoodsCode</select>
			</condition>
			<exec condition="@SqlReturn:isUsed == 0">
				<error>goodsseq.set.res</error>
			</exec>
		</sql>
	</define>
	
	<define name="tblGoodsAssemblyDet_GoodsSeqSet">
		<sql type="condition">
			<condition>
				<select>select seqIsUsed from tblGoods where classCode=@ValueofDB:tblGoodsAssemblyDet_GoodsCode</select>
			</condition>
			<exec condition="@SqlReturn:seqIsUsed == 0">
				<error>goodsseq.set.res</error>
			</exec>
		</sql>
	</define>
	

	
	<define name="tblBuyOutStockDet_GoodsSeqSet">
		<sql type="condition">
			<condition>
				<select>select seqIsUsed from tblGoods where classCode=@ValueofDB:tblBuyOutStockDet_GoodsCode</select>
			</condition>
			<exec condition="@SqlReturn:seqIsUsed == 0">
				<error>goodsseq.set.res</error>
			</exec>
		</sql>
	</define>

	<define name="tblOtherOutDet_GoodsSeqSet">
		<sql type="condition">
			<condition>
				<select>select seqIsUsed from tblGoods where classCode=@ValueofDB:tblOtherOutDet_GoodsCode</select>
			</condition>
			<exec condition="@SqlReturn:seqIsUsed == 0">
				<error>goodsseq.set.res</error>
			</exec>
		</sql>	
	</define>
	<define name="tblSendDet_GoodsSeqSet">
		<sql type="condition">
			<condition>
				<select>select seqIsUsed from tblGoods where classCode=@ValueofDB:tblSendDet_GoodsCode</select>
			</condition>
			<exec condition="@SqlReturn:seqIsUsed == 0">
				<error>goodsseq.set.res</error>
			</exec>
		</sql>		
	</define>
	<define name="tblSendcheckDet_GoodsSeqSet">
		<sql type="condition">
			<condition>
				<select>select seqIsUsed from tblGoods where classCode=@ValueofDB:tblSendcheckDet_GoodsCode</select>
			</condition>
			<exec condition="@SqlReturn:seqIsUsed == 0">
				<error>goodsseq.set.res</error>
			</exec>
		</sql>		
	</define>	
	<define name="tblSendReturnDet_GoodsSeqSet">
		<sql type="condition">
			<condition>
				<select>select seqIsUsed from tblGoods where classCode=@ValueofDB:tblSendReturnDet_GoodsCode</select>
			</condition>
			<exec condition="@SqlReturn:seqIsUsed == 0">
				<error>goodsseq.set.res</error>
			</exec>
		</sql>		
	</define>	
	<!--办公用品采购前-->
	<define name="OA_add_Buy_bef">
		<sql type="condition">
			<condition>
			<select>select GoodsNumber as GoodsNumber,BaseUnit as Unit from OAOfficeBuy where GoodsCode = @ValueofDB:OAOfficeBuy_GoodsCode</select>
				<select>select GoodsNumber as GoodsNumbers,GoodsCode as Codes from OAOfficeStat where GoodsCode = @ValueofDB:OAOfficeBuy_GoodsCode</select>
			</condition>
			<exec condition="@ValueofDB:OAOfficeBuy_GoodsNumber&lt;=0 || '@ValueofDB:OAOfficeBuy_GoodsCode' == 'null'">
				<error>OAOffice.adds.error</error>
			</exec>
			<exec condition="'@SqlReturn:Codes'=='null'">
				<sql>
					insert into OAOfficeStat(id,GoodsCode,GoodsNumber,createBy,lastUpdateBy,createTime,lastUpdateTime,statusId,SCompanyID) values(lower(substring(replace(newid(),'-',''),1,28)),@ValueofDB:OAOfficeBuy_GoodsCode,@ValueofDB:OAOfficeBuy_GoodsNumber,@ValueofDB:OAOfficeBuy_createBy,@ValueofDB:OAOfficeBuy_lastUpdateBy,@ValueofDB:OAOfficeBuy_createTime,@ValueofDB:OAOfficeBuy_lastUpdateTime,@ValueofDB:OAOfficeBuy_statusId,@ValueofDB:OAOfficeBuy_SCompanyID)
					</sql>
					</exec>
				</sql>
				</define>
	
	<!--办公用品采购-->
	<define name="OA_add_Buy">
		<sql type="condition">
			<condition>
				<select>select min(number) as number from OAOfficeBuyDet</select>
				</condition>
				<exec condition="@SqlReturn:number&lt;=0">
					<error>OAOffice.adds.error</error>
				</exec>
			<exec condition="true">
				<sql type="procedure">
        {call proc_iterateExeProc(select OAOfficeBuyDet.GoodsCode as GoodsCode@SPFieldLink:OAOfficeBuyDet.Number as Number@SPFieldLink:OAOfficeBuyDet.id as id@SPFieldLink:OAOfficeBuyDet.f_ref as rid@SPFieldLink:OAOfficeBuyDet.SCompanyId as SCompanyId from OAOfficeBuyDet where f_ref='@ValueofDB:OAOfficeBuy_id',proc_insert,
'OAOfficeStat'@ParamLink:'id='+@id+'@SPFieldLink:GoodsNumber='+@Number+'@ParamNum:@SPFieldLink:GoodsCode='+@GoodsCode+'@SPFieldLink:createBy=1@SPFieldLink:rid='+@rid+'@SPFieldLink:SCompanyId='+@SCompanyId,retCode,retVal)}
		</sql>
			</exec>
		</sql>
	</define>
	
	<!--办公用品采购修改前-->
	<define name="OA_update_Buy_bef">
		<sql type="condition">
			<condition>
				
			</condition>
			<exec condition="true">
				<sql>delete OAOfficeStat where rid = @ValueofDB:OAOfficeBuy_id
				</sql>
			</exec>
		</sql>
	</define>
	<!--办公用品采购-->
	<define name="OA_update_Buy">
		<sql type="condition">
			<condition>
				<select>select min(number) as number from OAOfficeBuyDet</select>
				</condition>
				<exec condition="@SqlReturn:number &lt;0">
					<error>OAOffice.adds.error</error>
				</exec>
				<exec condition="true">
				<sql type="procedure">
        {call proc_iterateExeProc(select OAOfficeBuyDet.GoodsCode as GoodsCode@SPFieldLink:OAOfficeBuyDet.Number as Number@SPFieldLink:OAOfficeBuyDet.id as id@SPFieldLink:OAOfficeBuyDet.f_ref as rid@SPFieldLink:OAOfficeBuyDet.SCompanyId as SCompanyId from OAOfficeBuyDet where f_ref='@ValueofDB:OAOfficeBuy_id',proc_insert,
'OAOfficeStat'@ParamLink:'id='+@id+'@SPFieldLink:GoodsNumber='+@Number+'@ParamNum:@SPFieldLink:GoodsCode='+@GoodsCode+'@SPFieldLink:createBy=1@SPFieldLink:rid='+@rid+'@SPFieldLink:SCompanyId='+@SCompanyId,retCode,retVal)}
		</sql>
			</exec>
		</sql>
	</define>
	
	<!--办公用品采购删除前-->
	<define name="Buy_Delete">
		<sql type="condition">
			<condition>
				<select>select (isnull(max(GoodsNumber),0) + 1) as number from OAOfficeBorrow left join OAOfficeBuyDet on OAOfficeBuyDet.GoodsCode = OAOfficeBorrow.GoodsCode where OAOfficeBuyDet.f_ref = @ValueofDB:OAOfficeBuy_id</select>
				<select>select GoodsNumber from OAOfficeBorrow left join OAOfficeBuyDet on OAOfficeBuyDet.GoodsCode = OAOfficeBorrow.GoodsCode  where OAOfficeBuyDet.f_ref = @ValueofDB:OAOfficeBuy_id</select>
			</condition>
			<exec condition="@SqlReturn:number &gt;1">
				<error>OAOfficeBorrows.adds.error</error>
			</exec>
			<exec condition="true">
				<sql>delete OAOfficeStat where rid = @ValueofDB:OAOfficeBuy_id
				</sql>
			</exec>
		</sql>
	</define>
	
	<!--办公用品领用前-->
	<define name="OA_add_Borrow_bef">
		<sql type="condition">
			<condition>
				<select>select GoodsCode as Code,isnull(sum(GoodsNumber),0) as GoodsNumbers from OAOfficeStat where GoodsCode = @ValueofDB:OAOfficeBorrow_GoodsCode group by GoodsCode</select>
			</condition>
			<exec condition="'@SqlReturn:Code' == 'null'">
				<error>OAOfficeBorrow.adds.error</error>
			</exec>
			<exec condition="'@ValueofDB:OAOfficeBorrow_GoodsNumber' == ''">
				<error>OAOfficeBorrow.adds.error</error>
			</exec>
			<exec condition="@ValueofDB:OAOfficeBorrow_GoodsNumber &gt;@SqlReturn:GoodsNumbers">
				<error>OAOfficeBorrow.adds.error</error>
			</exec>
		</sql>
	</define>
	
	<!--办公用品领用-->
	<define name="OA_add_Borrow">
		<sql type="condition">
			<condition>
				<select>select (isnull(sum(s.GoodsNumber),0) - b.GoodsNumber) as GoodsNumbers from OAOfficeStat s,OAOfficeBorrow b where s.GoodsCode = @ValueofDB:OAOfficeBorrow_GoodsCode and b.id = @ValueofDB:OAOfficeBorrow_id group by b.GoodsCode,s.GoodsCode,b.GoodsNumber</select>
				<select>select id from OAOfficeBuyDet where GoodsCode = @ValueofDB:OAOfficeBorrow_GoodsCode</select>
				<select>select sum(GoodsNumber) as Number from OAOfficeBorrow where GoodsCode = @ValueofDB:OAOfficeBorrow_GoodsCode</select>
			</condition>
			<exec condition="@ValueofDB:OAOfficeBorrow_GoodsNumber &lt;= 0 &amp;&amp; @SqlReturn:GoodsNumbers &gt;= 0">
				<error>OAOfficeBorrow.add.error</error>
			</exec>
			<exec condition="@SqlReturn:GoodsNumbers &gt;= 0">
				<sql>update OAOfficeStat set GoodsNumber = @SqlReturn:GoodsNumbers where id = @SqlReturn:id and GoodsCode =  @ValueofDB:OAOfficeBorrow_GoodsCode
				</sql>
				<sql>delete OAOfficeStat where GoodsCode =  @ValueofDB:OAOfficeBorrow_GoodsCode and id != @SqlReturn:id
				</sql>
				<sql>update OAOfficeBorrow set GoodsNumber = @SqlReturn:Number where id = @ValueofDB:OAOfficeBorrow_id 
				</sql>
				<sql>delete OAOfficeBorrow where id != @ValueofDB:OAOfficeBorrow_id and GoodsCode =  @ValueofDB:OAOfficeBorrow_GoodsCode
				</sql>
			</exec>
		</sql>
	</define>
	<!--办公用品领用修改前-->
	<define name="OA_update_Borrow_bef">
		<sql type="condition">
			<condition>
				<select>select isNull((isnull(sum(s.GoodsNumber),0) + isNull(b.GoodsNumber,0)),0) as GoodsNumbers from OAOfficeStat s,OAOfficeBorrow b,OAOfficeBuyDet bd where bd.GoodsCode = s.GoodsCode and b.id = @ValueofDB:OAOfficeBorrow_id group by bd.GoodsCode,b.GoodsCode,s.GoodsCode,b.GoodsNumber</select>
				<select>select id from OAOfficeBuyDet where id = @ValueofDB:OAOfficeBorrow_id</select>
			</condition>
			<exec condition="@SqlReturn:GoodsNumbers &gt;= 0">
				<sql>update OAOfficeStat set GoodsNumber = @SqlReturn:GoodsNumbers where id = @SqlReturn:id 
				</sql>
			</exec>
		</sql>
	</define>
	<!--办公用品领用修改-->
	<define name="OA_update_Borrow">
		<sql type="condition">
			<condition>
				<select>select isNull((isnull(sum(s.GoodsNumber),0) - isNull(b.GoodsNumber,0)),0) as GoodsNumbers from OAOfficeStat s,OAOfficeBorrow b,OAOfficeBuyDet bd where bd.GoodsCode = s.GoodsCode  and b.id = @ValueofDB:OAOfficeBorrow_id group by bd.GoodsCode,b.GoodsCode,s.GoodsCode,b.GoodsNumber</select>
				<select>select id from OAOfficeBuyDet where id = @ValueofDB:OAOfficeBorrow_id</select>
			</condition>
			<exec condition="@SqlReturn:GoodsNumbers &lt; 0">
				<error>OAOfficeBorrow.update.error</error>
			</exec>
			<exec condition="@SqlReturn:GoodsNumbers &gt;= 0">
				<sql>update OAOfficeStat set GoodsNumber = @SqlReturn:GoodsNumbers where id = @SqlReturn:id
				</sql>
			</exec>
		</sql>
	</define>
	
	<!--办公用品领用删除前-->
	<define name="Borrow_Delete">
		<sql type="condition">
			<condition>
			<select>select (isnull(sum(s.GoodsNumber),0) + b.GoodsNumber) as GoodsNumbers,b.GoodsNumber as GoodsNumber from OAOfficeStat s,OAOfficeBorrow b,OAOfficeBuyDet bd where bd.GoodsCode = s.GoodsCode and s.GoodsCode = (select GoodsCode from OAOfficeBorrow where id = @ValueofDB:OAOfficeBorrow_id) and b.id = @ValueofDB:OAOfficeBorrow_id group by bd.GoodsCode,b.GoodsCode,s.GoodsCode,b.GoodsNumber</select>
			<select>select id,GoodsCode,f_ref from OAOfficeBuyDet where GoodsCode = (select GoodsCode from OAOfficeBorrow where id = @ValueofDB:OAOfficeBorrow_id)</select>
			<select>select s.id as sid,(isnull((s.GoodsNumber),0) + b.GoodsNumber) as sNumber from OAOfficeStat s,OAOfficeBorrow b where s.id = @ValueofDB:OAOfficeBorrow_id and b.id = @ValueofDB:OAOfficeBorrow_id</select>
			</condition>
			<exec condition="@SqlReturn:GoodsNumbers == null">
			</exec>
			<exec condition="@SqlReturn:GoodsNumbers &gt;= 0 &amp;&amp; '@SqlReturn:GoodsCode' != 'null' &amp;&amp; '@SqlReturn:sid' == 'null'">
				<sql>insert into OAOfficeStat(id,GoodsCode,rid,GoodsNumber,createBy,ScompanyID)values(@ValueofDB:OAOfficeBorrow_id,@SqlReturn:GoodsCode,@SqlReturn:f_ref,@SqlReturn:GoodsNumber,1,'00001')
				</sql>
			</exec>
			<exec condition="'@SqlReturn:sid' != 'null'">
				<sql>update OAOfficeStat set GoodsNumber = @SqlReturn:sNumber where id = @ValueofDB:OAOfficeBorrow_id
				</sql>
			</exec>
			<exec condition="@SqlReturn:GoodsNumbers &lt; 0 &amp;&amp; '@SqlReturn:GoodsCode' != 'null'">
				<error>OAOfficeBorrow.Delete.error</error>
			</exec>
		</sql>
	</define>
	
	<!--办公用品归还前-->
	<define name="OA_add_Returns_bef">
		<sql type="condition">
			<condition>
				<select>select GoodsNumber as GoodsNumbers,EmployeeCode as EmployeeCodes,GoodsCode as Code,BaseUnit as Unit from OAOfficeBorrow where GoodsCode = @ValueofDB:GoodsCode</select>
			</condition>
			<exec condition="'@SqlReturn:Code' == 'null'">
				<error>OAOfficeReturns.add.error</error>
			</exec>
		</sql>
	</define>
	<!--办公用品归还增加-->
	<define name="OA_add_Returns">
		<sql type="condition">
			<condition>
				<select>select cast(s.GoodsNumber + @ValueofDB:OAOfficeReturn_GoodsNumber as decimal(10,0)) as GoodsNumbers,s.Goodscode as Code from OAOfficeStat s,OAOfficeReturns r where s.GoodsCode = @ValueofDB:OAOfficeReturn_GoodsCode  and r.GoodsCode =  @ValueofDB:OAOfficeReturn_GoodsCode</select>
				<select>select cast(b.GoodsNumber - @ValueofDB:OAOfficeReturn_GoodsNumber as decimal(10,0)) as GoodsNumberes,sum(b.GoodsNumber) as number,r.GoodsCode as rCode from OAOfficeReturns r,OAOfficeBorrow b  where r.GoodsCode = @ValueofDB:OAOfficeReturn_GoodsCode  and b.GoodsCode =  @ValueofDB:OAOfficeReturn_GoodsCode group by b.GoodsNumber,r.GoodsCode,b.GoodsCode</select>
				<select>select max(GoodsNumber) as mGoodsNumber,id as bid from OAOfficeBorrow where GoodsCode = @ValueofDB:OAOfficeReturn_GoodsCode group by id,GoodsNumber,GoodsCode</select>
				<select>select GoodsFullName from tblGoods where id = @ValueofDB:OAOfficeReturn_GoodsCode</select>
				<select>select id as id from OAOfficeStat where GoodsCode = @ValueofDB:OAOfficeReturn_GoodsCode</select>
				<select>select sum(GoodsNumber) as sNumber from OAOfficeReturns where GoodsCode = @ValueofDB:OAOfficeReturns_GoodsCode</select>
			</condition>
			<exec condition="@SqlReturn:GoodsNumberes &lt; 0">
				<error>OAOfficeReturns.adds.error,@SqlReturn:mGoodsNumber,@SqlReturn:GoodsFullName,@ValueofDB:OAOfficeReturn_GoodsNumber</error>
			</exec>
			<exec condition="@SqlReturn:GoodsNumberes &gt;= 0">
				<sql>update OAOfficeStat set GoodsNumber = @SqlReturn:GoodsNumbers where GoodsCode = @SqlReturn:Code and id = @SqlReturn:id
				</sql>
				<sql>update OAOfficeBorrow set GoodsNumber = @SqlReturn:GoodsNumberes where GoodsCode = @SqlReturn:rCode and id = @SqlReturn:bid
				</sql>
				<sql>delete OAOfficeBorrow where GoodsNumber = 0</sql>
				<sql>update OAOfficeReturns set GoodsNumber = @SqlReturn:sNumber where id = @ValueofDB:OAOfficeReturn_id
				</sql>
				<sql>delete OAOfficeReturns where id != @ValueofDB:OAOfficeReturn_id
				</sql>
			</exec>
		</sql>
	</define>
	<!--办公用品归还修改前-->
	<define name="OA_update_Returns_bef">
		<sql type="condition">
			<condition>
				<select>select (isnull(cast(GoodsNumber - @ValueofDB:OAOfficeReturn_GoodsNumber as decimal(10,0)),0) + 0) as GoodsNumbers from OAOfficeReturns where id =  @ValueofDB:OAOfficeReturn_id</select>
				<select>select (GoodsNumber) as GoodsNumber from OAOfficeBorrow where GoodsCode = @ValueofDB:OAOfficeReturn_GoodsCode</select>
				<select>select isnull(cast(GoodsNumber + @SqlReturn:GoodsNumbers as decimal(10,0)),0) as GoodsNumberses from OAOfficeBorrow where GoodsCode = @ValueofDB:OAOfficeReturn_GoodsCode</select>
				<select>select (sum(Number) - @SqlReturn:GoodsNumbers) as mGoodsNumber from OAOfficeBuyDet where GoodsCode = @ValueofDB:OAOfficeReturn_GoodsCode</select>
				<select>select (sum(Number)-@SqlReturn:GoodsNumbers) as mGoodsNumbers from OAOfficeBuyDet where GoodsCode = @ValueofDB:OAOfficeReturn_GoodsCode</select>
				<select>select GoodsFullName from tblGoods where id = @ValueofDB:OAOfficeReturn_GoodsCode</select>
				<select>select id as id from OAOfficeStat where GoodsCode = @ValueofDB:OAOfficeReturn_GoodsCode</select>
			</condition> 
			<exec condition="('@SqlReturn:GoodsNumber' == 'null' || @SqlReturn:GoodsNumber == 0) &amp;&amp; @SqlReturn:GoodsNumbers &lt; 0 ">
				<error>OAOfficeReturns.adds.error1</error>
			</exec>
			<exec condition="('@SqlReturn:GoodsNumber' == 'null' || @SqlReturn:GoodsNumber == 0) &amp;&amp; @SqlReturn:GoodsNumbers &gt;= 0 ">
				<sql>delete OAOfficeBorrow where GoodsNumber = 0</sql>
				<sql>INSERT INTO  OAOfficeBorrow(workFlowNodeName,id,GoodsCode,EmployeeCode,BorrowDate,GoodsNumber,BaseUnit,ReMark,createBy,lastUpdateBy,createTime,lastUpdateTime,SCompanyID) 
values(@ValueofDB:OAOfficeReturn_workFlowNodeName,@ValueofDB:OAOfficeReturn_id,@ValueofDB:OAOfficeReturn_GoodsCode,@ValueofDB:OAOfficeReturn_EmployeeCode,@ValueofDB:OAOfficeReturn_BorrowDate,@SqlReturn:GoodsNumbers,@ValueofDB:OAOfficeReturn_BaseUnit,@ValueofDB:OAOfficeReturn_ReMark,@ValueofDB:OAOfficeReturn_createBy,@ValueofDB:OAOfficeReturn_lastUpdateBy,@ValueofDB:OAOfficeReturn_createTime,@ValueofDB:OAOfficeReturn_lastUpdateTime,@ValueofDB:OAOfficeReturn_SCompanyID) 
				</sql>
				<sql>update OAOfficeStat set GoodsNumber = @SqlReturn:mGoodsNumber where GoodsCode = @ValueofDB:OAOfficeReturn_GoodsCode and id = @SqlReturn:id
				</sql>
			</exec>
			<exec condition="'@SqlReturn:GoodsNumber' != 'null'">
				<sql>update OAOfficeStat set GoodsNumber = (@SqlReturn:mGoodsNumbers - 0 - @SqlReturn:GoodsNumber) where GoodsCode = @ValueofDB:OAOfficeReturn_GoodsCode and id = @SqlReturn:id
				</sql>
			</exec>
			<exec condition="'@SqlReturn:GoodsNumber' != 'null' &amp;&amp; @SqlReturn:GoodsNumber != 0">
				<sql>update OAOfficeBorrow set GoodsNumber = (GoodsNumber+@SqlReturn:GoodsNumbers) where GoodsCode = @ValueofDB:OAOfficeReturn_GoodsCode
				</sql>
			</exec>
		</sql>
	</define>
	<!--办公用品归还修改-->
	<define name="OA_update_Returns">
		<sql type="condition">
			<condition>
				<select>select cast(s.GoodsNumber + @ValueofDB:OAOfficeReturn_GoodsNumber as decimal(10,0)) as GoodsNumbers,s.Goodscode as Code from OAOfficeStat s,OAOfficeReturns r where   r.id =  @ValueofDB:OAOfficeReturn_id</select>
				<select>select isnull(cast(b.GoodsNumber - r.GoodsNumber as decimal(10,0)),0) as GoodsNumberes1,r.GoodsCode as rCode from OAOfficeReturns r,OAOfficeBorrow b  where r.id =  @ValueofDB:OAOfficeReturn_id </select>
				<select>select GoodsNumber from OAOfficeBorrow where GoodsCode = @ValueofDB:OAOfficeReturn_GoodsCode</select>
			</condition>
		</sql>
	</define>
	
	<!--办公用品归还删除前-->
	<define name="Returns_Delete">
		<sql type="condition">
			<condition>
				<select>select isnull(cast(s.GoodsNumber - r.GoodsNumber as decimal(10,0)),0) as GoodsNumbers,s.Goodscode as Code,r.GoodsNumber as rNumber from OAOfficeStat s,OAOfficeReturns r where s.GoodsCode =  (select GoodsCode from OAOFFiceReturns where id = @ValueofDB:OAOfficeReturn_id) and r.GoodsCode = (select GoodsCode from OAOFFiceReturns where id = @ValueofDB:OAOfficeReturn_id) </select>
				<select>select isnull(cast(b.GoodsNumber + r.GoodsNumber as decimal(10,0)),0) as GoodsNumberes1,r.GoodsCode as rCode from OAOfficeReturns r,OAOfficeBorrow b  where r.GoodsCode = (select GoodsCode from OAOFFiceReturns where id = @ValueofDB:OAOfficeReturn_id) and b.GoodsCode =  (select GoodsCode from OAOFFiceReturns where id = @ValueofDB:OAOfficeReturn_id) </select>
				<select>select GoodsNumber as gn from OAOfficeBorrow where GoodsCode = (select GoodsCode from OAOFFiceReturns where id = @ValueofDB:OAOfficeReturn_id)</select>
				<select>select id as id from OAOfficeStat where GoodsCode = (select GoodsCode from OAOFFiceReturns where id = @ValueofDB:OAOfficeReturn_id)</select>
				<select>select id as bid from OAOfficeBorrow where GoodsCode = (select GoodsCode from OAOFFiceReturns where id = @ValueofDB:OAOfficeReturn_id)</select>
			</condition>
			<exec condition="'@SqlReturn:bid' == 'null' || '@SqlReturn:bid' == ''">
				<sql>INSERT INTO  OAOfficeBorrow(workFlowNodeName,id,GoodsCode,EmployeeCode,BorrowDate,GoodsNumber,BaseUnit,ReMark,createBy,lastUpdateBy,createTime,lastUpdateTime,SCompanyID) 
values(@ValueofDB:OAOfficeReturn_workFlowNodeName,@ValueofDB:OAOfficeReturn_id,@ValueofDB:OAOfficeReturn_GoodsCode,@ValueofDB:OAOfficeReturn_EmployeeCode,@ValueofDB:OAOfficeReturn_BorrowDate,0,@ValueofDB:OAOfficeReturn_BaseUnit,@ValueofDB:OAOfficeReturn_ReMark,@ValueofDB:OAOfficeReturn_createBy,@ValueofDB:OAOfficeReturn_lastUpdateBy,@ValueofDB:OAOfficeReturn_createTime,@ValueofDB:OAOfficeReturn_lastUpdateTime,@ValueofDB:OAOfficeReturn_SCompanyID) 
				</sql>
			</exec>
			<exec condition="@SqlReturn:GoodsNumbers &gt;= 0 &amp;&amp; '@SqlReturn:GoodsNumbers' != 'null'">
				<sql>update OAOfficeStat set GoodsNumber = @SqlReturn:GoodsNumbers where GoodsCode = @SqlReturn:Code and id = @SqlReturn:id
				</sql>
			</exec>
			<exec condition="'@SqlReturn:bNumber' == '' &amp;&amp;'@SqlReturn:rNumber' != 'null'">
				<sql>update OAOfficeBorrow set GoodsNumber = (GoodsNumber + @SqlReturn:rNumber),GoodsCode = @SqlReturn:Code where id = @ValueofDB:OAOfficeReturn_id</sql>
			</exec>
			<exec condition="@SqlReturn:GoodsNumberes1 &gt;= 0 &amp;&amp; '@SqlReturn:GoodsNumbers1' != '' &amp;&amp; '@SqlReturn:bNumber' != 'null'">
			<sql>update OAOfficeBorrow set GoodsNumber = @SqlReturn:GoodsNumberes1 where GoodsCode = @SqlReturn:rCode 
				</sql>
				</exec>
			<exec condition="@SqlReturn:GoodsNumbers &gt;= 0 &amp;&amp; '@SqlReturn:GoodsNumbers' == 'null'">
				<sql>update OAOfficeStat set GoodsNumber = 0 where GoodsCode = @SqlReturn:Code 
				</sql>
			</exec>
		</sql>
	</define>


	<!--增加调拨类型-->
	<define name="tblAllotType_add">
		<sql type="condition">
			<condition>
				<select>select AllotType from tblAllotType where id=@ValueofDB:tblAllotType_id</select>
				<select>select count(SubCode) as coutcode from tblAllotType where scompanyid=@Sess:SCompanyID and subCode=@ValueofDB:tblAllotType_SubCode</select>
        	</condition>
		  <exec condition="@SqlReturn:coutcode &gt;=2">
			<error>tblFeeType.repeat.error</error>
		  </exec>
			<!--<exec condition="'@SqlReturn:AllotType'==''||'@SqlReturn:AllotType'=='null'">
				<error>tblAllotType.add.error</error>
			</exec>-->
		</sql>
	</define>

	<!--删除调拨类型-->
	<define name="tblAllotType_delete">
		<sql type="condition">
			<condition>
				<select>select SubCode as Code from tblAllotType where SubCode in (select AllotType from tblAllotChange) and tblAllotType.SCompanyID=@Sess:SCompanyID and tblAllotType.id=@ValueofDB:tblAllotType_id</select>
				<select>select tblAllotType.SubCode  from  tblAllotType where tblAllotType.id=@ValueofDB:tblAllotType_id and tblAllotType.SubCode='605104'</select>
			</condition>
			<!-- 已经使用的财务类型不能删除，已经使用的财务类型不能修改科目代码 -->
			<exec condition="('@SqlReturn:Code'!='null'&amp;&amp;'@Sess:BillOper'=='delete')||('@SqlReturn:Code'!='null'&amp;&amp;'@SqlReturn:Code'!='@ValueofDB:tblAllotType_SubCode'&amp;&amp;'@Sess:BillOper'=='update')">
				<error>tblAllotType.delete.error</error>
			</exec>
				<!-- 不允许删除系统默认类型-->
		<exec condition="('@SqlReturn:SubCode'=='605104'&amp;&amp;'@Sess:BillOper'=='delete')||('@SqlReturn:SubCode'=='605104'&amp;&amp;'@ValueofDB:tblAllotType_SubCode'!='190101'&amp;&amp;'@Sess:BillOper'=='update')">
			<error>modifyType.defaulttype.error</error>
		</exec>
		</sql>
	</define>
	
	<!--工作计划删除前-->
	<define name="WorkPlan_Del">
		<sql type="condition">
			<condition>
				<select>select id as id from OAPlanCommon where planId = @ValueofDB:OAMyWorkPlan_id</select>
			</condition>
			<exec condition="'@SqlReturn:id'!='null' || '@SqlReturn:id'!=''">
				<sql>update OAMyWorkPlan set workFlowNodeName = 'notApprove' where id = @ValueofDB:OAMyWorkPlan_id</sql>
				<sql>delete OAPlanCommon where id = @SqlReturn:id</sql>
			</exec>
		</sql>
	</define>
	
	<!--期初录入单的商品是否启用序列号验证-->
<define name="tblBeginStockDet_GoodsSeqSet">
<sql type="condition">
<condition>
<select>
select seqIsUsed as isUsed from tblGoods where classCode=@ValueofDB:tblBeginStockDet_GoodsCode
</select>
</condition>
<exec condition="@SqlReturn:isUsed == 0">
<error>goodsseq.set.res</error>
</exec>
</sql>
</define>
<!--============================================================商品期初=============================================================-->
<define name="tblBeginStock_Add">
	<sql type="condition"><!--发票类型是“收据凭证”，税率必须等于0,其他类型税率必须大于等于0-->
		<exec condition="('@ValueofDB:tblBeginStock_InVoiceType'=='3'&amp;&amp;@ValueofDB:tblBeginStock_Tax!=0)||@ValueofDB:tblBeginStock_Tax&lt;0">
			<error>common.isReceipt.existsTax.error</error>           
		</exec>		
	</sql>	
	<sql type="condition"><!--折扣不是0到100之间的数值时给出错误提示-->
		<condition><select>select 'disCountError' as disCountError from tblBeginStockDet a where a.f_ref=@ValueofDB:tblBeginStock_id and (Discount&lt;=0 or Discount&gt;100)</select></condition>
		<exec condition="'@SqlReturn:disCountError' != 'null'">				
			<error>common.Discount.error</error>                   
		</exec>
	</sql>
<!--根据情况调用另外一个define操作--> 
	<sql type="condition">
		<condition>
			<select>select 'NegativeExist' as NegativeExist,tblGoods.GoodsFullName as GoodsQ1 from tblBeginStockDet,tblGoods where tblGoods.classCode=tblBeginStockDet.GoodsCode and f_ref=@ValueofDB:tblBeginStock_id and (Qty&lt;0 or Price&lt;0)</select>
			<select>select tblGoods.GoodsFullName as GoodsQ,Qty from tblBeginStockDet,tblGoods where isnull(tblBeginStockDet.Qty,0)=0 and tblGoods.classCode=tblBeginStockDet.GoodsCode and f_ref=@ValueofDB:tblBeginStock_id</select>
			<select>select tblGoods.GoodsFullName as GoodsP,Price from tblBeginStockDet,tblGoods where isnull(tblBeginStockDet.Price,0)=0 and tblGoods.classCode=tblBeginStockDet.GoodsCode and f_ref=@ValueofDB:tblBeginStock_id</select>
			
			<!--操作错误，已经开账-->
			<select>select statusid,scompanyid,accperiod from tblaccperiod where  statusid='1'  and scompanyID=@Sess:SCompanyID</select>
			<!--明细商品启用序列号未录入序列号给出提示--> 
			<select>select GoodsFullName as GoodsSeq from tblBeginStockDet  
left join tblgoods on tblGoods.classCode=tblBeginStockDet.GoodsCode
where tblgoods.seqIsUsed=0 and (len(tblBeginStockDet.seq)=0 or tblBeginStockDet.seq is null) and
 (select isUsed from tblGoodsAttribute where propName='Seq')=1 
and tblBeginStockDet.f_ref=@ValueofDB:tblBeginStock_id</select>
		</condition>
		<!--操作错误，已经开账-->
		<exec condition="'@SqlReturn:statusid' == '1'">
			<error>common.msg.RET_BEGINACC_END</error>
		</exec>
		<exec condition="'@SqlReturn:GoodsQ' != 'null'">	<!--录入数量--> 
			<error>InputQty.Bill.error,@SqlReturn:GoodsQ</error>
		</exec>
		<exec condition="@ValueofDB:tblBeginStock_Tax != 0 &amp;&amp; '@ValueofDB:tblBeginStock_InVoiceType' == '3'">	<!--录入数量--> 
			<error>InputQty.invalidtax.error</error>
		</exec>		
		<!-- 数量单价不能为负数 -->
		<exec condition="'@SqlReturn:NegativeExist'=='NegativeExist'">
			<error>negtive.qtyorprice.error,@SqlReturn:GoodsQ1</error>
		</exec>
		<!--明细商品启用序列号未录入序列号给出提示--> 
		<exec condition="'@SqlReturn:GoodsSeq' != 'null' &amp;&amp; '@SqlReturn:GoodsSeq'.length != 0">	
			<error>enter.seq.error,@SqlReturn:GoodsSeq</error>
		</exec>
		<!--更新会计期间为-1-->
		<exec condition="true">
			<sql> update tblBeginStock set Period=-1,PeriodYear=-1,PeriodMonth=-1 where id=@ValueofDB:tblBeginStock_id</sql> 
		</exec> 
	</sql>
	<sql type="condition">
		<condition> 
		<select>select dbo.getDigits('tblBeginStockDet','TaxAmount',sum(tblBeginStockDet.TaxAmount)) as SumDetAmt from tblBeginStockDet where  tblBeginStockDet.f_ref=@ValueofDB:tblBeginStock_id</select>
		<select>select dbo.getDigits('tblBeginStock','TotalTaxAmount',tblBeginStock.TotalTaxAmount) as SumAmt from tblBeginStock where tblBeginStock.id=@ValueofDB:tblBeginStock_id</select>
		</condition>
		<!-- 其它入库单合计金额与明细表合计金额不相等-->
		<exec condition=" @SqlReturn:SumDetAmt != @SqlReturn:SumAmt ">				
			<error>Amount.BillAmt.error,@SqlReturn:SumAmt,@SqlReturn:SumDetAmt</error>
		</exec>
		<!--如果启用审核流，则新增保存时更新分仓库存未审核字段-->
		<exec condition="'@MEM:tblBeginStock_IsStatart' != '0'">
			<sql type="procedure">{call proc_updateStocksNotAudit(@GoodsCode=tblBeginStockDet.GoodsCode,@StockCode=@ValueofDB:tblBeginStock_StockCode,@BillType=tblBeginStock,@InstoreQty=tblBeginStockDet.Qty,@OutstoreQty=0,@from=tblBeginStockDet,@where=f_ref='@ValueofDB:id',@retCode=retCode,@retVal=retVal)}</sql>
		</exec>
		<!--不启用审核流-->
		<exec condition="'@MEM:tblBeginStock_IsStatart' == '0'">
			<sql type="define">tblBeginStock_Add_One</sql>
		</exec>
	</sql> 
</define>

<define name="tblBeginStock_Add_One">
	<sql type="condition">
		<condition>
			<select>select tblGoods.GoodsFullName as CGoodsCode from tblBeginStockDet,tblGoods where f_ref=@ValueofDB:tblBeginStock_id and tblGoods.classCode=tblBeginStockDet.GoodsCode</select>
			<select>select id as colorID,groupOrNot,isUsed from tblGoodsPropInfo where propName='color'</select>
			<select>select statusId as OpenAccStatus from tblAccPeriod where  statusId='1'  and SCompanyID=@Sess:SCompanyID</select> 
			<select>select top 1 a.fieldName SeqFname from tblDBFieldInfo a left join tblGoodsPropInfo b on a.fieldName=b.propName  where a.tableId=(select id from tblDBTableInfo where tableName='tblBeginStockDet') and  b.isUsed=1 and b.isSequence=1 and a.inputType=2 and a.fieldSysType='GoodsField'</select>	
		</condition>
		<!-- 系统已经开账，则不允许审核，反审核，删除，增加操作 -->
		<exec condition="'@SqlReturn:OpenAccStatus'=='1'">
			<error>common.msg.RET_BEGINACC_END</error>
		</exec>
		<exec condition="'@SqlReturn:colorNV' !='null' &amp;&amp; '@SqlReturn:colorNV'.length!=0">
			<error>colorname.tblOtherInDet.error,@SqlReturn:color,@SqlReturn:colorNV</error>
		</exec>
		<exec condition="'@SqlReturn:acolor' !='null' &amp;&amp; '@SqlReturn:acolor'.length!=0">
			<error>acolor.tblOtherInDet.error,@SqlReturn:acolorNV,@SqlReturn:acolor</error>
		</exec>

		<!--启用保质期处理系统配置后根据生产日期更新保质期限或者根据保质期限更新生产日期-->
		<exec condition="'@MEM:Availably'=='true'">
			<!--根据生产日期更新保质期限-->
			<sql>update tblBeginStockDet set Availably=a.Availably from(select b.id as id,case when tblGoods.AvailablyType='Day' then convert(varchar(10),dateadd(Day,tblGoods.Validity,ProDate),21) when tblGoods.AvailablyType='Month' then convert(varchar(10),dateadd(Month,tblGoods.Validity,ProDate),21) when tblGoods.AvailablyType='Year' then convert(varchar(10),dateadd(Year,tblGoods.Validity,ProDate),21) else '' end as Availably from tblBeginStock  a join tblBeginStockDet b on b.f_ref=a.id join tblGoods on tblGoods.classCode=b.GoodsCode where a.id=@ValueofDB:tblBeginStock_id and len(Availably)=0 and len(ProDate)!=0 and tblGoods.Validity!=0)a where tblBeginStockDet.id=a.id</sql>
          	
          	<!--根据保质期限更新生产日期-->
			<sql>update tblBeginStockDet set ProDate=a.ProDate from(select  b.id as id,case when tblGoods.AvailablyType='Day' then convert(varchar(10),dateadd(Day,(-1)*tblGoods.Validity,Availably),21) when tblGoods.AvailablyType='Month' then convert(varchar(10),dateadd(Month,(-1)*tblGoods.Validity,Availably),21) when tblGoods.AvailablyType='Year' then convert(varchar(10),dateadd(Year,(-1)*tblGoods.Validity,Availably),21) else '' end as ProDate from tblBeginStock  a join tblBeginStockDet b on b.f_ref=a.id join tblGoods on tblGoods.classCode=b.GoodsCode where a.id=@ValueofDB:tblBeginStock_id and len(ProDate)=0 and len(Availably)!=0 and tblGoods.Validity!=0)a  where tblBeginStockDet.id=a.id</sql>
			</exec>
		<exec condition="true">
          <!--根据明细更新库存明细表-->
			<sql type="procedure">
			{call proc_insertStockDetGM(@Period=-1,@PeriodYear=-1,@PeriodMonth=-1,@GoodsCode=tblBeginStockDet.GoodsCode,@StockCode=@ValueofDB:tblBeginStock_StockCode,@BillID=@ValueofDB:tblBeginStock_id,@BillType=tblBeginStock,@BillDate=-1,@BillNo=@ValueofDB:tblBeginStock_BillNo,@InstoreQty=tblBeginStockDet.Qty,@InstorePrice=case when @ValueofDB:InVoiceType='2' then tblBeginStockDet.DisPrice else tblBeginStockDet.TaxPrice end,@InstoreAmount=case when @ValueofDB:InVoiceType='2' then tblBeginStockDet.DisBackAmt else tblBeginStockDet.TaxAmount end,@createBy=@ValueofDB:tblBeginStock_createBy,@lastUpdateBy=@ValueofDB:tblBeginStock_lastUpdateBy,@createTime=@ValueofDB:tblBeginStock_finishTime,@lastUpdateTime=@ValueofDB:tblBeginStock_lastUpdateTime,@SCompanyID=@ValueofDB:tblBeginStock_SCompanyID,@MRemark=@ValueofDB:tblBeginStock_Remark,@DRemark=tblBeginStockDet.Remark,@SourceID=tblBeginStockDet.id,@EmployeeID=@ValueofDB:tblBeginStock_EmployeeID,@DepartmentCode=@ValueofDB:tblBeginStock_DepartmentCode,@from=tblBeginStockDet,@where=f_ref='@ValueofDB:id',@retCode=retCode,@retVal=retVal)}
			</sql>
			<sql type="define">validateSameSeq</sql>
		</exec>
		</sql>
		<sql type="condition">	  
		<!--判断负库存-->
		<exec condition="'@Sess:BillOper' == 'update'||'@Sess:BillOper' == 'Auditing'">	
			<sql type="procedure">{call proc_negativeStock(@Sess:Local,@ValueofDB:id,@Sess:SCompanyID,@Sess:UserId,NegativeCode,NegativeBillNo)}</sql>
		</exec>
		<!--如果启用审核流，则新增保存时更新分仓库存未审核字段-->
		<exec condition="'@MEM:tblBeginStock_IsStatart' != '0'">
			<sql type="procedure">{call proc_updateStocksNotAudit(@GoodsCode=tblBeginStockDet.GoodsCode,@StockCode=@ValueofDB:tblBeginStock_StockCode,@BillType=tblBeginStock,@InstoreQty=-1*tblBeginStockDet.Qty,@OutstoreQty=0,@from=tblBeginStockDet,@where=f_ref='@ValueofDB:id',@retCode=retCode,@retVal=retVal)}</sql>
		</exec>
		<!--根据情况调用另外一个define操作--> 
		<!--不启用审核流-->
		<exec condition="true">
			<sql type="procedure">{call proc_BeginStockBalance(@ValueofDB:id,@ValueofDB:tblBeginStock_DepartmentCode,@Sess:SCompanyID,add,retCode,retVal)}</sql>
		</exec>
	</sql>
</define>


<define name="tblBeginStock_Delete">
	<!--根据情况调用另外一个define操作--> 
	<sql type="condition">
		<condition>
			<select>select StockCode from tblBeginStock where id=@ValueofDB:tblBeginStock_id</select>
		</condition>
		<!--如果启用审核流，则新增保存时更新分仓库存未审核字段-->
		<exec condition="'@MEM:tblBeginStock_IsStatart' != '0'">
			<sql type="procedure">{call proc_updateStocksNotAudit(@GoodsCode=tblBeginStockDet.GoodsCode,@StockCode=@SqlReturn:StockCode,@BillType=tblBeginStock,@InstoreQty=-1*tblBeginStockDet.Qty,@OutstoreQty=0,@from=tblBeginStockDet,@where=f_ref='@ValueofDB:id',@retCode=retCode,@retVal=retVal)}</sql>
		</exec>
		<!--不启用审核流-->
		<exec condition="'@MEM:tblBeginStock_IsStatart' == '0'">
			<sql type="define">tblBeginStock_Delete_One</sql>
		</exec>
		<exec condition="true">
			<sql>delete from tblBeginStockDet where f_Ref=@ValueofDB:tblBeginStock_id</sql>
		</exec>
	</sql> 
</define>


<define name="tblBeginStock_Delete_One">
	<sql type="condition">
		<condition>
			<select>select id,Period,PeriodYear,PeriodMonth,DepartmentCode,StockCode from tblBeginStock where id=@ValueofDB:tblBeginStock_id</select>
			<select>select statusId as OpenAccStatus from tblAccPeriod where  statusId='1'  and SCompanyID=@Sess:SCompanyID</select> 
		</condition>
		<!-- 系统已经开账，则不允许审核，反审核，删除，增加操作 -->
		<exec condition="'@SqlReturn:OpenAccStatus'=='1'">
			<error>common.msg.RET_BEGINACC_END</error>
		</exec>
		<exec condition="true">
			<sql type="procedure">
			{call 
			proc_delStockDet(@ValueofDB:tblBeginStock_id,tblBeginStock,2,retCode,retVal)}
			</sql>
		</exec>
		
		<!--判断负库存-->
		<exec condition="'@Sess:BillOper' == 'delete' || '@Sess:BillOper' == 'returnAuditing'">	
			<sql type="procedure">{call proc_negativeStock(@Sess:Local,@ValueofDB:id,@Sess:SCompanyID,@Sess:UserId,NegativeCode,NegativeBillNo)}</sql>
		</exec>
		<!--如果启用审核流，则新增保存时更新分仓库存未审核字段-->
		<exec condition="'@MEM:tblBeginStock_IsStatart' != '0'">
			<sql type="procedure">{call proc_updateStocksNotAudit(@GoodsCode=tblBeginStockDet.GoodsCode,@StockCode=@SqlReturn:StockCode,@BillType=tblBeginStock,@InstoreQty=tblBeginStockDet.Qty,@OutstoreQty=0,@from=tblBeginStockDet,@where=f_ref='@ValueofDB:id',@retCode=retCode,@retVal=retVal)}</sql>
		</exec>
	<!--不管启不启用审核流-->
<exec condition="true">
<sql type="procedure">{call proc_BeginStockBalance(@ValueofDB:id,@SqlReturn:DepartmentCode,@Sess:SCompanyID,delete,retCode,retVal)}</sql>
</exec>
</sql> 
</define>

<!-- 回复账户设置 -->
<define name="tblMailReplyAccount_Add">
	<sql type="condition">
		<condition>
			<select>select 'ExistError1' as ExistError1 from tblMailReplyAccount where id!=@ValueofDB:tblMailReplyAccount_id and AccountID=@ValueofDB:tblMailReplyAccount_AccountID</select>
			<select>select 'ExistError2' as ExistError2 from tblMailReplyAccountDet where f_ref=@ValueofDB:tblMailReplyAccount_id group by ReplyAccount having count(*)&gt;1</select>
		</condition>
		<!-- 主表 邮箱账户 不可重复 -->
		<exec condition="'@SqlReturn:ExistError1'=='ExistError1'">
			<error>tblMailReplyAccount.add.ExistError1</error>
		</exec>
		<!-- 从表 可回复账户 不可重复 -->
		<exec condition="'@SqlReturn:ExistError2'=='ExistError2'">
			<error>tblMailReplyAccount.add.ExistError2</error>
		</exec>
	</sql>
</define>

<!-- 数据搬移
	  选中的知识中心目录的下级-->
<define name="OAKnowledgeCenterFolder_dataMove">
		<sql type="condition">
		<condition>	
		<!--拿到新的classCode-->
		<select>select isnull(left(max(classCode),len(max(classCode))-5)+replace(str(cast(right(max(classCode),5)+1 as varchar(100)),5,0),' ',0),@ValueofDB:toClassCode+'00001') as NewClassCode from OAKnowledgeCenterFolder where classCode like @ValueofDB:toClassCode+'_____'</select>
		<!--查询原来的知识中心目录代码-->
	<select>select isCatalog,classCode from OAKnowledgeCenterFolder where id=@ValueofDB:OAKnowledgeCenterFolder_id</select>
	<!--父类不能搬迁到自己的子类-->
	<select>select FolderName from OAKnowledgeCenterFolder where charindex(@SqlReturn:classCode,@ValueofDB:toClassCode)=1 and id=@ValueofDB:OAKnowledgeCenterFolder_id and len(@SqlReturn:classCode)&lt;=len(@ValueofDB:toClassCode)</select>
		<!--知识中心目录{0}搬移的级别相同-->
	<select>select FolderName as FolderNameSame from OAKnowledgeCenterFolder where id=@ValueofDB:OAKnowledgeCenterFolder_id and 
@SqlReturn:classCode like @ValueofDB:toClassCode+'_____'</select>

			
		</condition>

	<!--父类不能搬迁到自己的子类-->
	<exec condition="'@SqlReturn:FolderName'!='null'">
		<error>classCode.exist.chird.error,@SqlReturn:FolderName</error>
	</exec>
		<!--知识中心目录{0}搬移的级别相同-->
	<exec condition="'@SqlReturn:FolderNameSame'!='null'">
		<error>classCode.exist.equal.error,@SqlReturn:FolderNameSame</error>
	</exec>
		
	<!--存在父类-->
	<exec condition="'@SqlReturn:isCatalog'=='1'">
	<!--存放原来的classCode-->
	<sql>update OAKnowledgeCenterFolder set OldclassCode=classCode where classCode like @SqlReturn:classCode+'_____%'</sql>
	<sql>update OAKnowledgeCenterFile set OldFolderId=FolderID where FolderID like @SqlReturn:FolderID+'_____%'</sql>
	<!--更新新的classCode-->
	<sql>update OAKnowledgeCenterFolder set classCode=@SqlReturn:NewClassCode+substring(classCode,len(@SqlReturn:classCode)+1,len(classCode)-len(@SqlReturn:classCode)) from OAKnowledgeCenterFolder where classCode like @SqlReturn:classCode+'_____%'</sql>
	<sql>update OAKnowledgeCenterFile set FolderId=@SqlReturn:NewClassCode+substring(FolderId,len(@SqlReturn:classCode)+1,len(FolderId)-len(@SqlReturn:classCode)) from OAKnowledgeCenterFile where FolderId like @SqlReturn:classCode+'_____%'</sql>
</exec>
   <!--更新classCode-->
      <exec condition="true">
	  <!--存放原来的classCode-->
	<sql>update OAKnowledgeCenterFolder set OldclassCode=classCode where id=@ValueofDB:OAKnowledgeCenterFolder_id</sql>
	<sql>update OAKnowledgeCenterFile set OldFolderId=FolderId where FolderId=@SqlReturn:classCode</sql>
	  <!--更新新的classCode-->
    <sql>update OAKnowledgeCenterFolder set classCode=@SqlReturn:NewClassCode where id=@ValueofDB:OAKnowledgeCenterFolder_id</sql>
    <sql>update OAKnowledgeCenterFile set FolderId=@SqlReturn:NewClassCode where FolderId=@SqlReturn:classCode</sql>
	 <!--更新原来的商品父类标识-->
	<sql>update OAKnowledgeCenterFolder set iscatalog=0 where (select count(classCode) from OAKnowledgeCenterFolder where classCode like left(@SqlReturn:classCode,len(@SqlReturn:classCode)-5)+'_____%')=0 and len(@SqlReturn:classCode)&gt;5 and classCode=left(@SqlReturn:classCode,len(@SqlReturn:classCode)-5)</sql>
	
		 <!--更新新目录父类标识-->
	<sql>update OAKnowledgeCenterFolder set iscatalog=1 where len(@SqlReturn:NewClassCode)&gt;5 and classCode=left(@SqlReturn:NewClassCode,len(@SqlReturn:NewClassCode)-5)</sql>
	
	  <!--更新单据表里面为新的classCode-->
		<sql type="procedure">
		{call proc_updateOAKnowledgeCenterFolderclassCode(@SqlReturn:classCode,retCode,retVal)}
		</sql>
	</exec>
</sql>
</define>

<!-- 数据搬移
	  选中的规章制度目录的下级-->
<define name="OAOrdainGroup_dataMove">
		<sql type="condition">
		<condition>	
		<!--拿到新的classCode-->
		<select>select isnull(left(max(classCode),len(max(classCode))-5)+replace(str(cast(right(max(classCode),5)+1 as varchar(100)),5,0),' ',0),@ValueofDB:toClassCode+'00001') as NewClassCode from OAOrdainGroup where classCode like @ValueofDB:toClassCode+'_____'</select>
		<!--查询原来的规章制度目录代码-->
		<select>select isCatalog,classCode from OAOrdainGroup where id=@ValueofDB:OAOrdainGroup_id</select>
		<!--父类不能搬迁到自己的子类-->
		<select>select GroupName from OAOrdainGroup where charindex(@SqlReturn:classCode,@ValueofDB:toClassCode)=1 and id=@ValueofDB:OAOrdainGroup_id and len(@SqlReturn:classCode)&lt;=len(@ValueofDB:toClassCode)</select>
			<!--规章制度目录{0}搬移的级别相同-->
		<select>select GroupName as GroupNameSame from OAOrdainGroup where id=@ValueofDB:OAOrdainGroup_id and classCode like @ValueofDB:toClassCode+'_____'</select>
		
		</condition>
	
		<!--父类不能搬迁到自己的子类-->
		<exec condition="'@SqlReturn:GroupName'!='null'">
			<error>classCode.exist.chird.error,@SqlReturn:GroupName</error>
		</exec>
			<!--规章制度目录{0}搬移的级别相同-->
		<exec condition="'@SqlReturn:GroupNameSame'!='null'">
			<error>classCode.exist.equal.error,@SqlReturn:GroupNameSame</error>
		</exec>
			
		<!--存在父类-->
		<exec condition="'@SqlReturn:isCatalog'=='1'">
		<!--存放原来的classCode-->
		<sql>update OAOrdainGroup set OldclassCode=classCode where classCode like @SqlReturn:classCode+'_____%'</sql>
		<sql>update OAOrdainInfo set oldGroupID=GroupID where GroupID like @SqlReturn:classCode+'_____%'</sql>
		<!--更新新的classCode-->
		<sql>update OAOrdainGroup set classCode=@SqlReturn:NewClassCode+substring(classCode,len(@SqlReturn:classCode)+1,len(classCode)-
	
	len(@SqlReturn:classCode)) from OAOrdainGroup where classCode like @SqlReturn:classCode+'_____%'</sql>
		<sql>update OAOrdainInfo set GroupID=@SqlReturn:NewClassCode+substring(GroupID,len(@SqlReturn:classCode)+1,len(GroupID)-
			len(@SqlReturn:classCode)) from OAOrdainInfo where GroupID like @SqlReturn:classCode+'_____%'</sql>
	</exec>
	   <!--更新classCode-->
	      <exec condition="true">
		  <!--存放原来的classCode-->
		<sql>update OAOrdainGroup set OldclassCode=classCode where id=@ValueofDB:OAOrdainGroup_id</sql>
		<sql>update OAOrdainInfo set oldGroupID=GroupID where GroupID=@SqlReturn:classCode</sql>
		  <!--更新新的classCode-->
	    <sql>update OAOrdainGroup set classCode=@SqlReturn:NewClassCode where id=@ValueofDB:OAOrdainGroup_id</sql>
	    <sql>update OAOrdainInfo set GroupID=@SqlReturn:NewClassCode where GroupID=@SqlReturn:classCode</sql>
		 <!--更新原来的商品父类标识-->
		<sql>update OAOrdainGroup set iscatalog=0 where (select count(classCode) from OAOrdainGroup where classCode like left(@SqlReturn:classCode,len(@SqlReturn:classCode)-5)+'_____%')=0 and len(@SqlReturn:classCode)&gt;5 and classCode=left(@SqlReturn:classCode,len(@SqlReturn:classCode)-5)</sql>
		
			 <!--更新新目录父类标识-->
		<sql>update OAOrdainGroup set iscatalog=1 where len(@SqlReturn:NewClassCode)&gt;5 and classCode=left(@SqlReturn:NewClassCode,len(@SqlReturn:NewClassCode)-5)</sql>
		
		  <!--更新单据表里面为新的classCode-->
			<sql type="procedure">
			{call proc_updateOAOrdainGroupclassCode(@SqlReturn:classCode,retCode,retVal)}
			</sql>
		</exec>
	</sql>
</define>

<!-- 库存上限必须大于库存下限频率 -->
    <define name="tblStockAnalysisInfo_Update">
		<sql type="condition"> 	
			<condition>
			
			</condition>
			
		<exec condition="@ValueofDB:tblStockAnalysisInfo_upperLimitProportion &lt; @ValueofDB:tblStockAnalysisInfo_lowerLimitProportion">
		<error>tblStockAnalysisInfo.update.error</error>
		</exec>
		
		<exec condition="@ValueofDB:tblStockAnalysisInfo_resort &lt; 0">
		<error>tblStockAnalysisInfo.resort.error</error>
		</exec>

		
		</sql>
	</define>
	



<!-- 邻居表设置 操作 -->
<define name="tblNeighbourMain_operate">
	<sql type="condition">
		<exec condition="'@Sess:BillOper'=='add' || '@Sess:BillOper'=='update'">
			<!-- 增加或删除操作 -->
			<sql type="define">tblNeighbourMain_add_update</sql>
		</exec>
	</sql>
</define>

<define name="tblNeighbourMain_add_update">
	<sql type="condition">
		<condition>
			<select>select 'ExistErrorRepeat' as ExistErrorRepeat from tblNeighbourDetail where f_ref=@ValueofDB:tblNeighbourMain_id group by DetailName having count(*)&gt;1</select>
		</condition>
		<!-- 邻居表名称不可重复 -->
		<exec condition="'@SqlReturn:ExistErrorRepeat'=='ExistErrorRepeat'">
			<error>tblNeighbourMain.operate.ExistErrorRepeat</error>
		</exec>
	</sql>
	<sql type="condition">
		<condition>
			<select>select 'NotExistError' as NotExistError from tblNeighbourDetail where f_ref=@ValueofDB:tblNeighbourMain_id and not exists (select * from tblDBTableInfo where tableName=tblNeighbourDetail.DetailName)</select>
		</condition>
		<!-- 邻居表不存在 -->
		<exec condition="'@SqlReturn:NotExistError'=='NotExistError'">
			<error>tblNeighbourMain.operate.NotExistError</error>
		</exec>
	</sql>
</define>

<define name="tblModuleFlow_Start">
	<sql type="condition">
		<!-- 模块导航设置 启用 -->
		<exec condition="true">
			<sql>update tblModuleFlow set statusId=0 where id=@ValueofDB:tblModuleFlow_id</sql>
		</exec>
	</sql>
</define>
	
<define name="tblModuleFlow_Stop">
	<sql type="condition">
		<!-- 模块导航设置 禁用 -->
		<exec condition="true">
			<sql>update tblModuleFlow set statusId=1 where id=@ValueofDB:tblModuleFlow_id</sql>
		</exec>
	</sql>
</define>
<!--信用额度申请模块数据库操作-->
<define name="tblTempCreditApply_Add"> 
	<sql type="condition">
		<!--单据日期不应大于结束日期-->
		<exec condition="'@ValueofDB:tblTempCreditApply_BillDate' &gt; '@ValueofDB:tblTempCreditApply_EndDate'">
			<error>tblTempCreditApply.Date1.error</error>
		</exec> 
		<!--起始日期不应大于结束日期-->
		<exec condition="'@ValueofDB:tblTempCreditApply_StartDate' &gt; '@ValueofDB:tblTempCreditApply_EndDate'">
			<error>tblTempCreditApply.Date.error</error>
		</exec> 
		<!--信用额度必须大于0-->
		<exec condition="@ValueofDB:tblTempCreditApply_Credit &lt;= 0 ">
			<error>tblTempCreditApply.Credit.error</error>
		</exec>  
	</sql> 
</define>

<define name="tblTempCreditApply_Add_one">
	<sql type="condition">    
		<!--临时额度申请表中不能重复出现同一个客户，重复时间段的记录-->
		<condition>
			<select>select StartDate as StartDate from tblTempCreditApply where id != @ValueofDB:tblTempCreditApply_id 
			AND EndDate &gt;= @ValueofDB:tblTempCreditApply_StartDate AND @ValueofDB:tblTempCreditApply_EndDate &gt;= StartDate AND @ValueofDB:tblTempCreditApply_CompanyCode = CompanyCode and workFlowNodeName = 'finish'
			</select>
		</condition> 
			<exec condition="'@SqlReturn:StartDate' != 'null'">
				<error>tblTempCreditApply.startend.error</error>/*同一时间段不可以重复设置同一个客户*/
		 	</exec> 
	</sql> 
</define>

<define name="tblTempCreditApply_update">
	<sql type="condition">    
		<!--临时额度申请表中不能重复出现同一个客户，重复时间段的记录-->
		<condition>
			<select>select StartDate as StartDate from tblTempCreditApply where id != @ValueofDB:tblTempCreditApply_id 
			AND EndDate &gt;= @ValueofDB:tblTempCreditApply_StartDate AND @ValueofDB:tblTempCreditApply_EndDate &gt;= StartDate AND @ValueofDB:tblTempCreditApply_CompanyCode = CompanyCode and workFlowNodeName = 'finish'
			</select>
		</condition> 
			<exec condition="'@SqlReturn:StartDate' != 'null'">
			<error>tblTempCreditApply.startend.error</error>/*同一时间段不可以重复设置同一个客户*/
		    </exec>
	</sql> 
</define>

<!--签名设置-->
<define name="tblAutograph_Add">
	<sql type="condition">
		<condition>
			<select>select count(*) as UserNum from tblAutograph where UserName=@ValueofDB:tblAutograph_UserName</select>
			<select>SELECT COUNT(*) AS morePicNum FROM tblAutograph WHERE patindex('%;%',AutographPic)!=0 and id=@ValueofDB:tblAutograph_id</select>
		</condition>
		<exec condition="'@SqlReturn:morePicNum' &gt; 0">
		    <error>tblAutograph.add.morethanonepic.error</error>
		</exec>
		<exec condition="'@SqlReturn:UserNum' &gt; 1">
		    <error>tblAutograph.add.morethanoneuser.error</error>
		</exec>
	</sql>
</define>

<!--=========================================================物流公司资料====================================================-->
<define name="tblFreightCom_Delete">
	<sql type="condition"><!--已经被使用不允许删除-->
		<condition><select>select BillNo from tblSalesOutStock where FreightCom=@ValueofDB:tblFreightCom_id</select></condition>
		<exec condition="'@SqlReturn:BillNo' != 'null'">			
			<error>tblFreightCom.UseDelete.error,@SqlReturn:BillNo</error>
		</exec>
	</sql>	
</define>
<!--====================================================以上代码：物流公司资料================================================-->
<!--====================================================电商模块 开始================================================-->
<!--电商 商品管理 -->
<define name="tblEBGoods_add">
	<sql type="condition">
	<condition>
	</condition>
  <exec condition="true">
  	<sql></sql>
  </exec>
	</sql>
</define>

<define name="tblEBGoods_delete">
	<sql type="condition">
		<condition>
			<select>select tblEBGoods.Sku as GSku,GoodsID AS GoodsID,GoodsName as GoodsName,tblEBOrder.OrderID as OrderID from tblEBGoods INNER JOIN tblEBOrderDet ON tblEBGoods.Sku=tblEBOrderDet.Sku INNER JOIN tblEBOrder ON tblEBOrder.id=tblEBOrderDet.f_ref where tblEBGoods.id=@ValueofDB:tblEBGoods_id</select>
		</condition>
		<!--商品 在电商销售订单中，不允许被删除-->
    <exec condition="'@SqlReturn:GSku' != 'null'">
    	<error>tblEBGoods.delete.CantNotDel,@SqlReturn:GoodsName,@SqlReturn:OrderID</error>
    </exec>
   </sql>
</define>

<!--电商 销售订单 -->
<define name="tblEBOrder_add">
	<sql type="condition">
	<!--销售订单明细至少录入一条记录-->
	<condition>
		<select>select tblEBGoods.Sku as GSku, tblEBGoods.GoodsName as OGoodsName,tblEBOrderDet.Price as OPrice,tblEBOrderDet.Num as ONum,tblEBOrder.CerCode as CerCode from tblEBGoods inner join tblEBOrderDet on tblEBGoods.Sku=tblEBOrderDet.Sku inner join tblEBOrder on tblEBOrder.id=tblEBOrderDet.f_ref WHERE tblEBOrderDet.f_ref=@ValueofDB:tblEBOrder_id </select>
	</condition>
	<exec condition="'@SqlReturn:OSku' == 'null'">
    <error>tblEBOrder.Detail.IsNotNull</error>
  </exec>
  <!--商品，的数量必须大于0-->
  <exec condition="'@SqlReturn:ONum' == '0.0'">
    <error>EBGoods.Num.IsNot0,@SqlReturn:OGoodsName</error>
  </exec>
  <!--商品，的价格必须大于0-->
  <exec condition="'@SqlReturn:OPrice' == '0.0'">
    <error>EBGoods.Price.IsNot0,@SqlReturn:OGoodsName</error>
  </exec>
	</sql>
</define>

<define name="tblEBOrder_delete">
	<sql type="condition">
    <exec condition="true">
    <sql></sql>
    </exec>
    </sql>
</define>
<!--电子商务证书-->
<define name="tblEBCertificate_add">
	<sql type="condition">
		<condition>
			<select>select tblEBCertificate.InSign as sign from tblEBCertificate where id = @ValueofDB:tblEBCertificate_id</select>
			<select>select tblEBCerDet.id as cid from tblEBCerDet,tblEBCertificate where tblEBCerDet.f_ref=tblEBCertificate.id and tblEBCertificate.id=@ValueofDB:tblEBCertificate_id </select>
		</condition>
		<!--自动导入选择为“是”，请填入证书明细-->
    <exec condition="'@SqlReturn:cid' == 'null' &amp;&amp; '@SqlReturn:sign' == '0'">
				<error>Autoinsign.select.YesOrNo</error>
    </exec>
    
    <!--自动插入电商证书-->
  	<exec condition="true">
			<sql>  UPDATE  tblEBCerDet SET CerID = tblEBCertificate.CerID
			  FROM tblEBCerDet INNER JOIN tblEBCertificate ON tblEBCertificate.id = tblEBCerDet.f_ref
			  WHERE tblEBCertificate.id=@ValueofDB:tblEBCertificate_id
			</sql>
    </exec>
   </sql>
</define>

<define name="tblEBCertificate_delete">
	<sql type="condition">
    </sql>
</define>

<!--电商订单转移 控件-->
<define name="EBOrder_devolve">
	<sql type="condition">
		 <exec condition="true">
				<sql type="procedure"> 
					{call proc_EBOrderYesNoOrder(@ValueofDB:tblEBOrder_id,2,retCode,retVal)}
				</sql> 
		</exec>
		<exec condition="@ProcReturn:retVal==0">
			<confirm yesDefine="EBOrder_update" noDefine="EBOrder_insert">tblEBOrder.UpdateOrder.YesOrNo</confirm>       
		</exec>
		<exec condition="@ProcReturn:retVal==1">
			<confirm yesDefine="EBOrder_insert" noDefine="">tblEBOrder.InOrder.YestOrNo</confirm>       
		</exec>
	</sql>
</define>

<!--点击“确认”，只更新订单-->
<define name="EBOrder_update">
	<sql type="condition">
		 <exec condition="true">
			<sql type="procedure"> 
				{call proc_EBOrderUpdateOrder(@ValueofDB:tblEBOrder_id,retCode,retVal)}
			</sql> 
		 </exec>
	</sql>
</define>

<!--点击 “取消” 转移订单-->
<define name="EBOrder_insert">
	<sql type="condition">
		 <exec condition="true">
			<sql type="procedure"> 
				{call proc_EBOrderInsertOrder(@ValueofDB:tblEBOrder_id,retCode,retVal)}
			</sql> 
		 </exec>	

	</sql>
</define>

<!--电商商品转移 控件-->
<define name="EBGoods_devolve">
	<sql type="condition">
		 <exec condition="true">
			<sql type="procedure"> 
				{call proc_EBOrderYesNoOrder(@ValueofDB:tblEBgoods_id,1,retCode,retVal)}
			</sql> 
		 </exec>
		 <exec condition="@ProcReturn:retVal==6">
			<confirm yesDefine="EBGoods_insert" noDefine="EBGoods_insert">tblEBGoods.UpdateGoods.YesOrNO</confirm>       
		</exec>
		<exec condition="@ProcReturn:retVal==7">
			<confirm yesDefine="EBGoods_insert" noDefine="">tblEBGoods.InGoods.YesOrNO</confirm>       
		</exec>
	</sql>
</define>

<!--点击 更新 转移商品-->
<define name="EBGoods_insert">
	<sql type="condition">
		 <exec condition="true">
			<sql type="procedure"> 
				{call proc_EBGoodsInsertGoods(@ValueofDB:tblEBGoods_id,retCode,retVal)}
			</sql> 
		 </exec>	
	</sql>
</define>

<!--电商商品出库 控件 是否进行电商订单商品发货，发货后可以在“电商任务详情”中查看-->
<define name="EBOrder_OutStock">
	<sql type="condition">
		<exec condition="true">
			<confirm yesDefine="EBOrder_OutStockYes" noDefine="">tblSalesOrder.OutStock.YesOrNo</confirm>       
		</exec>
	</sql>
</define>

<define name="EBOrder_OutStockYes">
	<sql type="condition">
		 <condition><select>select OrderID from tblEBOrder where OrderID not in (select Args from tblEBTask) and id=@ValueofDB:tblSalesOrder_id</select></condition>
		 <exec condition="'@SqlReturn:OrderID' != 'null'">
			 <sql>
					INSERT INTO tblEBTask(id,CerCode,Operate,Args,BuildTime,createBy)
					SELECT id,CerCode,'OutStock',OrderID,convert(char(19),GETDATE(),121),'' FROM tblEBOrder WHERE id=@ValueofDB:tblSalesOrder_id
			 </sql>
		 </exec>	
	</sql>
</define>
<!--====================================================电商模块 结束================================================-->

<!--======================================================财务期初====================================================-->
<define name="IniAcc_Update">
	<!--更新当前科目的父级--> 
	<sql type="procedure">{call proc_updateParentBalance(@ValueofDB:subCode,-1,-1,@retCode,@retVal)}</sql>
	<!--如果是往来科目，则更新往来明细-->
	<sql type="condition">
		<!--更新应付期初明细-->
		<exec condition="'@ValueofDB:subCode'=='2202'">
			<sql type="procedure">{call proc_iterateExeProc(select id as IniId@SPFieldLink:1 as ComType from tblCompanyIni where PeriodYear=-1 and (PayTotalLend!=0 or FcPayTotalCredit!=0),proc_deleteComIni,@IniId@ParamLink:@ComType,retCode,retVal)}</sql>
			<sql type="procedure">{call proc_iterateExeProc(select substring(replace(newid()@SPFieldLink:'-'@SPFieldLink:'')@SPFieldLink:1@SPFieldLink:30) as id@SPFieldLink:CompanyCode as CompanyCode@SPFieldLink:SCompanyID as SCompanyID@SPFieldLink:sum(TotalRemain) as TotalRemain@SPFieldLink:isnull(Currency@SPFieldLink:'') as Currency@SPFieldLink:isnull(CurrencyRate@SPFieldLink:0) as CurrencyRate@SPFieldLink:isnull(sum(CurTotalRemain)@SPFieldLink:0) as CurTotalRemain from tblIniAccDet where accCode like '2202%' group by CompanyCode@SPFieldLink:Currency@SPFieldLink:CurrencyRate@SPFieldLink:SCompanyID,proc_insertComIni,@id@ParamLink:@CompanyCode@ParamLink:1@ParamLink:-1@ParamLink:'PayTotalLend='+@TotalRemain+'@SPFieldLink:Currency='+@Currency+'@SPFieldLink:CurrencyRate='+@CurrencyRate+'@SPFieldLink:FcPayTotalCredit='+@CurTotalRemain+'@SPFieldLink:Period=-1@SPFieldLink:PeriodYear=-1@SPFieldLink:PeriodMonth=-1@SPFieldLink:RelationDocID='+@CompanyCode+'@SPFieldLink:createBy=@ValueofDB:tblCompanybeginning_createBy@SPFieldLink:createTime=@ValueofDB:tblCompanybeginning_createTime@SPFieldLink:lastUpdateBy=@ValueofDB:tblCompanybeginning_lastUpdateBy@SPFieldLink:lastUpdateTime=@ValueofDB:tblCompanybeginning_lastUpdateTime@SPFieldLink:BillType=tblCompanybeginning@SPFieldLink:BillNo=@ValueofDB:tblCompanybeginning_BillNo@SPFieldLink:EmployeeID=@ValueofDB:tblCompanybeginning_EmployeeID@SPFieldLink:DepartmentCode=@ValueofDB:tblCompanybeginning_DepartmentCode@SPFieldLink:SCompanyID='+@SCompanyID+'@SPFieldLink:DiscountAmount=0@SPFieldLink:Remark=@ValueofDB:tblCompanybeginning_Remark',@retCode,@retVal)}</sql>
		</exec>
		<!--更新应收期初明细-->
		<exec condition="'@ValueofDB:subCode'=='1122'">
			<sql type="procedure">{call proc_iterateExeProc(select id as IniId@SPFieldLink:2 as ComType from tblCompanyIni where PeriodYear=-1 and (ReceiveTotalDebit!=0 or FcRecTotalDebit!=0),proc_deleteComIni,@IniId@ParamLink:@ComType,retCode,retVal)}</sql>
			<sql type="procedure">{call proc_iterateExeProc(select substring(replace(newid()@SPFieldLink:'-'@SPFieldLink:'')@SPFieldLink:1@SPFieldLink:30) as id@SPFieldLink:CompanyCode as CompanyCode@SPFieldLink:SCompanyID as SCompanyID@SPFieldLink:sum(TotalRemain) as TotalRemain@SPFieldLink:isnull(Currency@SPFieldLink:'') as Currency@SPFieldLink:isnull(CurrencyRate@SPFieldLink:0) as CurrencyRate@SPFieldLink:isnull(sum(CurTotalRemain)@SPFieldLink:0) as CurTotalRemain from tblIniAccDet where accCode like '1122%' group by CompanyCode@SPFieldLink:Currency@SPFieldLink:CurrencyRate@SPFieldLink:SCompanyID,proc_insertComIni,@id@ParamLink:@CompanyCode@ParamLink:2@ParamLink:-1@ParamLink:'ReceiveTotalDebit='+@TotalRemain+'@SPFieldLink:Currency='+@Currency+'@SPFieldLink:CurrencyRate='+@CurrencyRate+'@SPFieldLink:FcRecTotalDebit='+@CurTotalRemain+'@SPFieldLink:Period=-1@SPFieldLink:PeriodYear=-1@SPFieldLink:PeriodMonth=-1@SPFieldLink:RelationDocID=@ValueofDB:tblCompanybeginning_id@SPFieldLink:createBy=@ValueofDB:tblCompanybeginning_createBy@SPFieldLink:createTime=@ValueofDB:tblCompanybeginning_createTime@SPFieldLink:lastUpdateBy=@ValueofDB:tblCompanybeginning_lastUpdateBy@SPFieldLink:lastUpdateTime=@ValueofDB:tblCompanybeginning_lastUpdateTime@SPFieldLink:BillType=tblCompanybeginning@SPFieldLink:BillNo=@ValueofDB:tblCompanybeginning_BillNo@SPFieldLink:EmployeeID=@ValueofDB:tblCompanybeginning_EmployeeID@SPFieldLink:DepartmentCode=@ValueofDB:tblCompanybeginning_DepartmentCode@SPFieldLink:SCompanyID='+@SCompanyID+'@SPFieldLink:DiscountAmount=0@SPFieldLink:Remark=@ValueofDB:tblCompanybeginning_Remark',@retCode,@retVal)}</sql>
		</exec>
		<!--更新预付期初明细-->
		<exec condition="'@ValueofDB:subCode'=='1123'">
			<sql type="procedure">{call proc_iterateExeProc(select id as IniId@SPFieldLink:3 as ComType from tblCompanyIni where PeriodYear=-1 and (PrePayTotalDebit!=0 or FcPrePayTotalDebit!=0),proc_deleteComIni,@IniId@ParamLink:@ComType,retCode,retVal)}</sql>
			<sql type="procedure">{call proc_iterateExeProc(select substring(replace(newid()@SPFieldLink:'-'@SPFieldLink:'')@SPFieldLink:1@SPFieldLink:30) as id@SPFieldLink:CompanyCode as CompanyCode@SPFieldLink:SCompanyID as SCompanyID@SPFieldLink:sum(TotalRemain) as TotalRemain@SPFieldLink:isnull(Currency@SPFieldLink:'') as Currency@SPFieldLink:isnull(CurrencyRate@SPFieldLink:0) as CurrencyRate@SPFieldLink:isnull(sum(CurTotalRemain)@SPFieldLink:0) as CurTotalRemain from tblIniAccDet where accCode like '1123%' group by CompanyCode@SPFieldLink:Currency@SPFieldLink:CurrencyRate@SPFieldLink:SCompanyID,proc_insertComIni,@id@ParamLink:@CompanyCode@ParamLink:3@ParamLink:-1@ParamLink:'PrePayTotalDebit='+@TotalRemain+'@SPFieldLink:Currency='+@Currency+'@SPFieldLink:CurrencyRate='+@CurrencyRate+'@SPFieldLink:FcPrePayTotalDebit='+@CurTotalRemain+'@SPFieldLink:Period=-1@SPFieldLink:PeriodYear=-1@SPFieldLink:PeriodMonth=-1@SPFieldLink:RelationDocID=@ValueofDB:tblCompanybeginning_id@SPFieldLink:createBy=@ValueofDB:tblCompanybeginning_createBy@SPFieldLink:createTime=@ValueofDB:tblCompanybeginning_createTime@SPFieldLink:lastUpdateBy=@ValueofDB:tblCompanybeginning_lastUpdateBy@SPFieldLink:lastUpdateTime=@ValueofDB:tblCompanybeginning_lastUpdateTime@SPFieldLink:BillType=tblCompanybeginning@SPFieldLink:BillNo=@ValueofDB:tblCompanybeginning_BillNo@SPFieldLink:EmployeeID=@ValueofDB:tblCompanybeginning_EmployeeID@SPFieldLink:DepartmentCode=@ValueofDB:tblCompanybeginning_DepartmentCode@SPFieldLink:SCompanyID='+@SCompanyID+'@SPFieldLink:DiscountAmount=0@SPFieldLink:Remark=@ValueofDB:tblCompanybeginning_Remark',@retCode,@retVal)}</sql>
		</exec>
		<!--更新预收期初明细-->
		<exec condition="'@ValueofDB:subCode'=='2203'">
			<sql type="procedure">{call proc_iterateExeProc(select id as IniId@SPFieldLink:4 as ComType from tblCompanyIni where PeriodYear=-1 and (PreReceiveTotalLend!=0 or FcPreRecTotalCredit!=0),proc_deleteComIni,@IniId@ParamLink:@ComType,retCode,retVal)}</sql>
			<sql type="procedure">{call proc_iterateExeProc(select substring(replace(newid()@SPFieldLink:'-'@SPFieldLink:'')@SPFieldLink:1@SPFieldLink:30) as id@SPFieldLink:CompanyCode as CompanyCode@SPFieldLink:SCompanyID as SCompanyID@SPFieldLink:sum(TotalRemain) as TotalRemain@SPFieldLink:isnull(Currency@SPFieldLink:'') as Currency@SPFieldLink:isnull(CurrencyRate@SPFieldLink:0) as CurrencyRate@SPFieldLink:isnull(sum(CurTotalRemain)@SPFieldLink:0) as CurTotalRemain from tblIniAccDet where accCode like '2203%' group by CompanyCode@SPFieldLink:Currency@SPFieldLink:CurrencyRate@SPFieldLink:SCompanyID,proc_insertComIni,@id@ParamLink:@CompanyCode@ParamLink:4@ParamLink:-1@ParamLink:'PreReceiveTotalLend='+@TotalRemain+'@SPFieldLink:Currency='+@Currency+'@SPFieldLink:CurrencyRate='+@CurrencyRate+'@SPFieldLink:FcPreRecTotalCredit='+@CurTotalRemain+'@SPFieldLink:Period=-1@SPFieldLink:PeriodYear=-1@SPFieldLink:PeriodMonth=-1@SPFieldLink:RelationDocID=@ValueofDB:tblCompanybeginning_id@SPFieldLink:createBy=@ValueofDB:tblCompanybeginning_createBy@SPFieldLink:createTime=@ValueofDB:tblCompanybeginning_createTime@SPFieldLink:lastUpdateBy=@ValueofDB:tblCompanybeginning_lastUpdateBy@SPFieldLink:lastUpdateTime=@ValueofDB:tblCompanybeginning_lastUpdateTime@SPFieldLink:BillType=tblCompanybeginning@SPFieldLink:BillNo=@ValueofDB:tblCompanybeginning_BillNo@SPFieldLink:EmployeeID=@ValueofDB:tblCompanybeginning_EmployeeID@SPFieldLink:DepartmentCode=@ValueofDB:tblCompanybeginning_DepartmentCode@SPFieldLink:SCompanyID='+@SCompanyID+'@SPFieldLink:DiscountAmount=0@SPFieldLink:Remark=@ValueofDB:tblCompanybeginning_Remark',@retCode,@retVal)}</sql>
		</exec>
	</sql>
</define>
<!--==================================================以上代码：财务期初================================================-->
</defineSqls>