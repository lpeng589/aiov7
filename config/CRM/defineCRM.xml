<?xml version="1.0" encoding="gb2312"?>
<defineSqls>

   <!--KPI审核-->
<define name="CrmKPIAuditing_Add">
 	<sql type="condition"><!--回填审核意见、完成数、完成率、更新KPI设定的审核状态。不回填审核后的计划主题和计划内容-->
	<condition>
		<select>select CrmKPIAuditing.ApproveContent,CrmKPIAuditing.BILLID,CrmKPIAuditing.AccomplishNumber,
        CrmKPIAuditing.AccomplishRatio from CrmKPIAuditing where CrmKPIAuditing.id=@ValueofDB:CrmKPIAuditing_id
		</select>
	</condition>
	<exec condition="true">
	<sql>update CrmKPIformulate set ApproveContent=@SqlReturn:ApproveContent,ApproveStatus=1,AccomplishNumber=@SqlReturn:AccomplishNumber,AccomplishRatio=@SqlReturn:AccomplishRatio where id=@SqlReturn:BILLID
	</sql>
	</exec>
	</sql>		                
 </define>
  
  <define name="CrmKPIAuditing_Delete">
 	<sql type="condition"><!--删除已审核的单据时更新KPI设定的审核状态、完成数量、完成率-->
	<condition>
    	<select>
		select CrmKPIAuditing.BILLID from CrmKPIAuditing where CrmKPIAuditing.id=@ValueofDB:CrmKPIAuditing_id
		</select>
	</condition>
	<exec condition="true">
	<sql>
	update CrmKPIformulate set ApproveStatus=0,AccomplishNumber=0,AccomplishRatio=0.00 where id=@SqlReturn:BILLID
	</sql>
	</exec>
	</sql>	            
 </define> 
 
     
    <!--删除销售报价用到的商品时报错-->
   <define name="tblGoods_delCrm4">
 <sql type="condition">
 <condition>
 <select>
select tblGoods.classCode,CRMsalesQuotDt.GoodsCode from tblGoods  left join CRMsalesQuotDt on CRMsalesQuotDt.GoodsCode=tblGoods.classCode where tblGoods.id=@ValueofDB:tblGoods_id
   </select>
  </condition>
 <exec condition="&quot;@SqlReturn:classCode&quot; == &quot;@SqlReturn:GoodsCode&quot; ">
      <error>tblGoods.ApproveStatus.error</error>
  </exec>
  </sql>
  </define>

  <!--删除KPI绩效设定已经审核的数据时报错-->
   <define name="CrmKPIformulate_del">
 <sql type="condition">
 <condition>
   <select>
    select id,ApproveStatus from CrmKPIformulate where CrmKPIformulate.id=@ValueofDB:CrmKPIformulate_id
   </select>
  </condition>
 	<exec condition="&quot;@SqlReturn:ApproveStatus&quot; == &quot;1&quot; ">
      <error>DeleteUpdate.ApproveStatus.error</error>
  </exec>
  </sql>
  </define> 

     <!--销售报价添加时判断毛利率是否小于商品中毛利率-->  
  <define name="CRMsalesQuot_add">
 <sql type="condition">
 <condition>
	 <!-- 明细表数量单价不允许为负数-->
	<select>select Qty as negtiveQty,Price as negtivePrice  from CRMsalesQuotDt where (isnull(CRMsalesQuotDt.Qty,0)&lt;0 or isnull(CRMsalesQuotDt.Price,0)&lt;0) and f_ref=@ValueofDB:CRMsalesQuot_id</select>
	<!--数量单价不能为零-->
	<select>select tblGoods.GoodsFullName as GoodsP,Price from CRMsalesQuotDt,tblGoods where (isnull(CRMsalesQuotDt.Price,0)=0 or isnull(CRMsalesQuotDt.Qty,0)=0) and tblGoods.classCode=CRMsalesQuotDt.GoodsCode and f_ref=@ValueofDB:CRMsalesQuot_id</select>
	
		<!--毛利率小于商品最小毛利率时提示-->
	<select>select tblGoods.GoodsFullName as GoodsFullName,tblGoods.Gross as GoodsGross from CRMsalesQuotDt left join tblGoods 
	on tblGoods.classCode=CRMsalesQuotDt.GoodsCode where isnull(CRMsalesQuotDt.Gross,0)&lt;tblGoods.Gross and f_ref=@ValueofDB:CRMsalesQuot_id</select>
	<select>select GoodsFullName as GodosName from tblGoods where classCode =(select top 1 GoodsCode from CRMsalesQuotDt where f_ref=@ValueofDB:id)</select>
	<select>select top 1 substring(convert(varchar,price),1,len(price)-6) as goodsPrice from CRMsalesQuotDt where f_ref=@ValueofDB:id</select>
	<!--<select>select workFlowNodeName,CompanyCategory from ViewCRMCompanyAll where id=@ValueofDB:f_brother</select>-->
	<!--查询更新时间-->
	<select>select f_brother as brother,lastupdateTime from CRMsalesQuot where id=@ValueofDB:id</select>
 </condition>
 <!--毛利率小于商品最小毛利率时提示-->
	<exec condition="&quot;@SqlReturn:GoodsFullName&quot; != &quot;null&quot;">	
   <error>Goods.Gross.error,@SqlReturn:GoodsFullName,@SqlReturn:GoodsGross</error>
  </exec>
  <!--如果数量或者单价为负数，提示错误--> 
		<exec condition="@SqlReturn:negtiveQty &lt; 0 || @SqlReturn:negtivePrice &lt; 0 ">	 			
		<error>negtive.qtyorprice.error</error>
		</exec>
		<!--如果数量或者单价为0，提示错误--> 
		<exec condition="&quot;@SqlReturn:GoodsP&quot; != &quot;null&quot;">	 					
		  <error>CRMsalesQuotDt.Bill.error,@SqlReturn:GoodsP</error>
		</exec>
		
		<!-- 明细表仓库控制出入库-->
		<!--
		<exec condition="true">
		<sql>update CRMsalesQuotDt set StockCode=(select StockCode from CRMsalesQuot where id=CRMsalesQuotDt.f_ref)</sql>
		</exec> -->
		<!--不启用审核流-->
		<exec condition="&quot;@MEM:CRMsalesQuot_IsStatart&quot; != &quot;1&quot;">
		<sql type="define">CRMsalesQuot_Add_One</sql>
		<sql>update CRMsalesQuot set workFlowNodeName='finish',workFlowNode='-1',checkPersons=''  where id=@ValueofDB:CRMsalesQuot_id</sql>
		</exec>		

  </sql>
	<sql type="condition"><!--添加客户报价时，判断当前客户是否已被转换为ERP客户-->
		<condition>
			<select>SELECT classCode FROM tblCompany WHERE id = @ValueofDB:CRMsalesQuot_ClientId</select>
		</condition>
		<exec condition="&quot;@SqlReturn:classCode&quot;==&quot;null&quot;||&quot;@SqlReturn:classCode&quot;.length==0">
			<sql>UPDATE CRMsalesQuot SET classCode = ClientId WHERE id = @ValueofDB:CRMsalesQuot_id</sql>
		</exec>
		<exec condition="&quot;@SqlReturn:classCode&quot;!=&quot;null&quot;&amp;&amp;&quot;@SqlReturn:classCode&quot;.length!=0">
			<sql>UPDATE CRMsalesQuot SET classCode = @SqlReturn:classCode WHERE id = @ValueofDB:CRMsalesQuot_id</sql>
		</exec>
	</sql>
	<sql type="condition"><!--添加客户报价时，判断当前客户是否是从ERP转换过来的，若是，则将ERP中客户信息表的classCode回填给客户报价classCode&gt;-->
		<condition>
			<select>SELECT ClientId FROM CRMsalesQuot WHERE ClientId IN (SELECT id FROM tblCompany) AND id = @ValueofDB:CRMsalesQuot_id</select>
		</condition>
		<exec condition="&quot;@SqlReturn:ClientId&quot;!=&quot;null&quot;&amp;&amp;&quot;@SqlReturn:ClientId&quot;.length!=0">
			<sql>UPDATE CRMsalesQuot SET classCode = a.classCode FROM tblCompany a WHERE CRMsalesQuot.id = @ValueofDB:CRMsalesQuot_id AND @ValueofDB:CRMsalesQuot_ClientId = a.id</sql>
		</exec>
	</sql>
	<!-- 更新上次联系时间为创建时间 -->
	<sql type="condition">
		<exec condition="true">	
			<sql>update CRMClientInfo set LastContractTime=@ValueofDB:CRMClientInfo_lastUpdateTime where id=@ValueofDB:CRMsalesQuot_ClientId</sql>
		</exec>
	</sql>
	
  </define>
    <!--审核销售报价-->  
  <define name="CRMsalesQuot_Add_One">
 <sql type="condition">
 <condition>
 		<select>select Comment from  CRMsalesQuot where id=@ValueofDB:id</select>
		<select>select f_brother as brother,lastupdateTime from CRMsalesQuot where id=@ValueofDB:id		</select>
		<select>select GoodsFullName as GodosName from tblGoods where classCode =(select top 1 GoodsCode from CRMsalesQuotDt where f_ref=@ValueofDB:id)</select>
		<select>select top 1 substring(convert(varchar,price),1,len(price)-6) as goodsPrice from CRMsalesQuotDt where f_ref=@ValueofDB:id</select>
 </condition>
    	<!--<exec condition="&quot;@SqlReturn:Comment&quot;==&quot;null&quot;||&quot;@SqlReturn:Comment&quot;.length==&quot;&quot;">
 		<error>add.coment.error</error>
  		</exec>-->	

		<!-- 记录客户日志 
 		<exec condition="true">
		<sql>delete from CRMClientInfoLog where id=@ValueofDB:CRMsalesQuot_id</sql>
		
  		<sql>insert into CRMClientInfoLog(id,clientId,billType,context,createBy,createTime,relationId) values(@ValueofDB:id,@ValueofDB:ClientId,'CRMsalesQuot',@ValueofDB:BillDate+@Locale:CRM.difineCRM.SalesQuote+@SqlReturn:GodosName+'-'+@SqlReturn:goodsPrice,@Sess:UserId,@ValueofDB:createTime,@ValueofDB:id)</sql> 
  		</exec>	
  		 -->	
  </sql>
  </define> 
  
    
   <!--删除删除销售报价时对应删除对应的明细的相关数据-->  
<define name="CRMsalesQuot_Delete">
 <sql type="condition">
<!--删除销售报价及对应的明细的内容-->
   	<!--不启用审核流-->
	<exec condition="&quot;@MEM:CRMsalesQuot_IsStatart&quot; != &quot;1&quot;">
	<sql type="define">CRMsalesQuot_Delete_One</sql>
	</exec>
  </sql>
</define>

   <!--删除删除销售报价时对应删除对应的明细的相关数据-->  
<define name="CRMsalesQuot_Delete_One">
 <sql type="condition">
 <condition>
 	  <select>select BillNo from tblSalesOrder where CRMIDS=@ValueofDB:tblSalseQuote_id</select>
 </condition>
   <exec condition="&quot;@SqlReturn:BillNo&quot;!=&quot;null&quot; &amp;&amp; &quot;@SqlReturn:BillNo&quot;.length!=0">
			<error>ids.noallow.delete,@SqlReturn:BillNo</error>
		</exec>
  </sql>
</define>


    <!--删除销售合同判断是否被订单引用-->  
  <define name="CRMsaleconcract_delete">
 <sql type="condition">
 <condition>
     <select>select count(*) as Num from tblBuyOrder where PactID = @ValueofDB:id </select>
 </condition>
<!--删除销售合同及对应的明细的内容-->
   <exec condition="@SqlReturn:Num&gt;0">
   <error>CRMsaleconcract.delete.error</error>
  </exec>
  </sql>
  </define>
   <!--删除销售报价判断是否被合同引用-->  
  <define name="CRMsalesQuot_update">
 <sql type="condition">
 <condition>
	 <select>select BillNo from tblSalesOrder where CRMIDS=@ValueofDB:tblSalseQuote_id</select>
 </condition>
  <exec condition="&quot;@SqlReturn:BillNo&quot;!=&quot;null&quot; &amp;&amp; &quot;@SqlReturn:BillNo&quot;.length!=0">
			<error>ids.noallow.delete,@SqlReturn:BillNo</error>
		</exec>
  </sql>
  </define>
 
 
  <!--删除删除销售合同时对应删除对应的明细的相关数据-->  
  <define name="CRMsaleconcract_CRMsaleconcractDet_delete">
 <sql type="condition">
 <condition>
     <select>
      select id from CRMsaleconcract where id = @ValueofDB:id 
	 </select>
 </condition>
<!--删除销售合同及对应的明细的内容-->
   <exec condition="true">
   <sql>
   delete from CRMsaleconcractDet where f_ref=@SqlReturn:id
   </sql>
  </exec>
  </sql>
  </define>
   

   
  
  <!-- 客户投诉删除前操作 -->
  <define name="CRMcomplaints_before_del">
  	<sql type="condition">
  		<condition>
  			<select>select id as CRMTaskAssignID from CRMTaskAssign where id=substring(@ValueofDB:id,2,len(@ValueofDB:id)-1)</select>
   		<!-- 获取启用客户回访值 -->
   		<select>select isVisit from tblBillReviewSetting where billType='CRMcomplaints'</select>
  			<select>select RevisitStatus from CRMClientRevisit where id='9'+@ValueofDB:CRMcomplaints_id</select>
  		</condition>
  		<!-- 如果是任务分派过来的，不可删除 -->
  		<exec condition="&quot;@SqlReturn:CRMTaskAssignID&quot; != &quot;null&quot; &amp;&amp; &quot;@SqlReturn:CRMTaskAssignID&quot;.length !=0">
  			<error>CRMcomplaints.Delete.Task.error</error>
  		</exec>
  		<!-- 如果客户回访 是已回访或已完结，不可删除 -->
  		<exec condition="&quot;@SqlReturn:RevisitStatus&quot; == &quot;2&quot; || &quot;@SqlReturn:RevisitStatus&quot; == &quot;3&quot;">
  			<error>CRMcomplaints.Delete.Visit.error</error>
  		</exec>
		<exec condition="&quot;@MEM:CRMClientRevisit_IsStatart&quot; == &quot;1&quot; &amp;&amp;&quot;@SqlReturn:isVisit&quot; == &quot;1&quot;">
			<sql>delete from OAMyWorkFlow where tableName='CRMClientRevisit' and Keyid='9'+@ValueofDB:CRMcomplaints_id</sql>
		</exec>
		<exec condition="&quot;@SqlReturn:isVisit&quot; == &quot;1&quot;">
			<sql>delete from CRMClientRevisit where id='9'+@ValueofDB:CRMcomplaints_id</sql>
		</exec>
			<!--记录客户日志
		<exec condition="&quot;@Sess:BillOper&quot; == &quot;delete&quot;">
		<sql>delete from CRMClientInfoLog where id='9'+@ValueofDB:CRMcomplaints_id</sql>
		</exec>
		-->
  	</sql>
  </define>
  <!--客户客户投诉-->
  <define name="CRMcomplaints_add">
   <sql type="condition">
   <condition>
   		<select>select DealwithEmployeeID,a.createBy as CreateBy,a.SCompanyID as SCompanyID,a.ComplaintsViscera as ComplaintsViscera,TalkbackEmployeeID,isnull(b.DepartmentCode,'') as TalkbackEmplyeeDepartment from CRMcomplaints a left join tblEmployee b on a.TalkbackEmployeeID=b.ID where a.id=@ValueofDB:id</select>
		<select>select ';'+createBy+';' as checkPersons from CRMcomplaints where id=@ValueofDB:CRMcomplaints_id</select>
   		<!-- 获取启用客户回访值 -->
   		<select>select isVisit from tblBillReviewSetting where billType='CRMcomplaints'</select>
   		<select>select id as CRMTaskAssignid from CRMTaskAssign where id=substring(@ValueofDB:id,2,len(@ValueofDB:id)-1)</select>
   </condition>
 
  <!-- 记录客户日志
	<exec condition="&quot;@Sess:BillOper&quot; == &quot;add&quot;">
  		<sql>insert into CRMClientInfoLog(id,clientId,billType,context,createBy,createTime,relationId) values(@ValueofDB:id,@ValueofDB:ClientId,'CRMcomplaints',@ValueofDB:BillDate+@Locale:CRM.difineCRM.Accuse+subString(@ValueofDB:ComplaintsViscera,1,100),@Sess:UserId,@ValueofDB:createTime,@ValueofDB:id)</sql> 
 	</exec>
 	--> 
  	<exec condition="true">
		<!-- 更新邻居表关联ID或客户名称 -->
		<exec condition="true">
			<sql>update CRMcomplaints set f_brother=ClientId where id=@ValueofDB:CRMcomplaints_id and f_brother='' and ClientId!=''</sql>
			<sql>update CRMcomplaints set ClientId=f_brother where id=@ValueofDB:CRMcomplaints_id and f_brother!='' and ClientId=''</sql>
		</exec>
	</exec>
	
 	 <!-- 如果启用客户投诉回访设置为是，插入数据到客户回访单 -->
 	 <exec condition="&quot;@MEM:CRMClientRevisit_IsStatart&quot; == &quot;0&quot; &amp;&amp;&quot;@SqlReturn:isVisit&quot; == &quot;1&quot;">
 	 <sql>delete from CRMClientRevisit where id='9'+@ValueofDB:CRMcomplaints_id</sql>
 	 <sql type="procedure">
			{call proc_insert(CRMClientRevisit,id=9@ValueofDB:CRMcomplaints_id@SPFieldLink:BillDate=@ValueofDB:CRMcomplaints_BillDate@SPFieldLink:BillNo=@CODE:[RV@y2@M@d@id5RV@]@SPFieldLink:DepartmentCode=@SqlReturn:TalkbackEmplyeeDepartment@SPFieldLink:EmployeeID=@SqlReturn:TalkbackEmployeeID@SPFieldLink:workFlowNodeName=finish@SPFieldLink:workFlowNode=-1@SPFieldLink:checkPersons=@SPFieldLink:ClientId=@ValueofDB:CRMcomplaints_ClientId@SPFieldLink:f_brother=@ValueofDB:f_brother@SPFieldLink:RevisitStatus=1@SPFieldLink:RefBillType=CRMcomplaints@SPFieldLink:RefBillID=@ValueofDB:CRMcomplaints_id@SPFieldLink:Solved=2@SPFieldLink:SCompanyID=@SqlReturn:SCompanyID@SPFieldLink:createBy=@ValueofDB:CRMcomplaints_createBy@SPFieldLink:createTime=@ValueofDB:CRMcomplaintst_createTime@SPFieldLink:lastUpdateBy=@ValueofDB:CRMcomplaints_createBy@SPFieldLink:lastUpdateTime=@ValueofDB:CRMcomplaints_lastUpdateTime@SPFieldLink:isAuto=1@SPFieldLink:Subject=@SqlReturn:ComplaintsViscera,retCode,retVal)}
			</sql>
 	 </exec>
	  	 <!-- 如果启用客户投诉回访设置为是，插入数据到客户回访单 -->
 	 <exec condition="&quot;@MEM:CRMClientRevisit_IsStatart&quot; == &quot;1&quot; &amp;&amp;&quot;@SqlReturn:isVisit&quot; == &quot;1&quot;">
 	 <sql>delete from CRMClientRevisit where id='9'+@ValueofDB:CRMcomplaints_id</sql>
 	 <sql type="procedure">
			{call proc_insert(CRMClientRevisit,id=9@ValueofDB:CRMcomplaints_id@SPFieldLink:BillDate=@ValueofDB:CRMcomplaints_BillDate@SPFieldLink:BillNo=@CODE:[RV@y2@M@d@id5RV@]@SPFieldLink:DepartmentCode=@SqlReturn:TalkbackEmplyeeDepartment@SPFieldLink:EmployeeID=@SqlReturn:TalkbackEmployeeID@SPFieldLink:workFlowNodeName=notApprove@SPFieldLink:workFlowNode=0@SPFieldLink:checkPersons=@SqlReturn:checkPersons@SPFieldLink:ClientId=@ValueofDB:CRMcomplaints_ClientId@SPFieldLink:f_brother=@ValueofDB:f_brother@SPFieldLink:RevisitStatus=1@SPFieldLink:RefBillType=CRMcomplaints@SPFieldLink:RefBillID=@ValueofDB:CRMcomplaints_id@SPFieldLink:Solved=2@SPFieldLink:SCompanyID=@SqlReturn:SCompanyID@SPFieldLink:createBy=@ValueofDB:CRMcomplaints_createBy@SPFieldLink:createTime=@ValueofDB:CRMcomplaintst_createTime@SPFieldLink:lastUpdateBy=@ValueofDB:CRMcomplaints_createBy@SPFieldLink:lastUpdateTime=@ValueofDB:CRMcomplaints_lastUpdateTime@SPFieldLink:isAuto=1@SPFieldLink:Subject=@SqlReturn:ComplaintsViscera,retCode,retVal)}
			</sql>
			<sql>insert into OAMyWorkFlow(id,applyDate,applyType,tableName,keyId,createBy,checkPerson,currentNode,createtime,lastUpdatetime,nextNodeIds,departmentCode,statusId)
select 'w'+id,BillDate,(select id from oaworkflowtemplate where templateFile='CRMClientRevisit'),'CRMClientRevisit',id,createBy,';'+createBy+';',0,createtime,lastUpdatetime,'',(select departmentCode from tblEmployee a where a.id=CRMClientRevisit.CreateBy),0 from CRMClientRevisit
where id='9'+@ValueofDB:CRMcomplaints_id</sql>
 	 </exec>
	 		<!-- 生成 客户回访单记录客户日志 -->
		<exec condition="&quot;@SqlReturn:isVisit&quot;==&quot;1&quot;&amp;&amp;&quot;@Sess:BillOper&quot; == &quot;add&quot;">
			<sql>insert into CRMClientInfoLog(id,clientId,billType,context,createBy,createTime,relationId) values('9'+@ValueofDB:CRMcomplaints_id,@ValueofDB:CRMcomplaints_ClientId,'CRMClientRevisit',@ValueofDB:CRMcomplaints_BillDate+@Locale:CRM.difineCRM.BackVisit+Substring(@SqlReturn:ComplaintsViscera,1,100),@ValueofDB:CRMcomplaints_createBy,@ValueofDB:CRMcomplaints_createTime,'9'+@ValueofDB:CRMcomplaints_id)</sql> 
		</exec>
 	 <exec condition="&quot;@MEM:BillNoSequence&quot;==&quot;true&quot;&amp;&amp;&quot;@SqlReturn:isVisit&quot; == &quot;1&quot;">  
	<sql>update tblCodeGenerate set curValue=curValue+1 where code='RV'</sql>
		</exec>
 	 <!-- 如果是任务分派来的，保存本投诉单后，将对应的任务分派单置为不可改 -->
 	 <exec condition="&quot;@SqlReturn:CRMTaskAssignid&quot; != &quot;null&quot; &amp;&amp; &quot;@SqlReturn:CRMTaskAssignid&quot;.length !=0">
 	 	<sql>update CRMTaskAssign set taskStatus=0 where id=@SqlReturn:CRMTaskAssignid</sql>
 	 </exec>
  </sql>
  </define>
 
  <!--客户移交-->
  <define name="CrmClientRemove_add">
  
<!--根据情况调用另外一个define操作-->	
<sql type="condition">
<!--不启用审核流也不需要发票操作-->
<exec condition="&quot;@MEM:CrmClientRemove_IsStatart&quot; == &quot;0&quot;">
<sql type="define">CrmClientRemove_add_One</sql>
</exec>
</sql>	
</define>

<!--审核执行此操作-->
 <define name="CrmClientRemove_add_One">
<sql type="procedure">
{call proc_iterateExeProc(select CrmClientRemove.id AS id@SPFieldLink:CrmClientRemove.NewCreateName as NewCreateName@SPFieldLink:
CrmClientchoose.createName as createName@SPFieldLink:CrmClientchoose.CompanyName as CompanyName @SPFieldLink:CrmClientchoose.CompanyNo as CompanyNo@SPFieldLink:CrmClientchoose.CompanyId as CompanyId from CrmClientRemove left join CrmClientchoose on CrmClientchoose.f_ref=CrmClientRemove.id,proc_update,'tblCMAimClient'@ParamLink:'createBy='+@NewCreateName@ParamLink:'id='+@CompanyId,retCode,retVal)}
</sql>
<sql type="procedure">
{call proc_iterateExeProc(select CrmClientRemove.id AS id@SPFieldLink:CrmClientRemove.NewCreateName as NewCreateName@SPFieldLink:
CrmClientchoose.createName as createName@SPFieldLink:CrmClientchoose.CompanyName as CompanyName @SPFieldLink:CrmClientchoose.CompanyNo as CompanyNo@SPFieldLink:CrmClientchoose.CompanyId as CompanyId from CrmClientRemove left join CrmClientchoose on CrmClientchoose.f_ref=CrmClientRemove.id,proc_update,'tblCMWillClient'@ParamLink:'createBy='+@NewCreateName@ParamLink:'id='+@CompanyId,retCode,retVal)}
</sql>
<sql type="procedure">
{call proc_iterateExeProc(select CrmClientRemove.id AS id@SPFieldLink:CrmClientRemove.NewCreateName as NewCreateName@SPFieldLink:
CrmClientchoose.createName as createName@SPFieldLink:CrmClientchoose.CompanyName as CompanyName @SPFieldLink:CrmClientchoose.CompanyNo as CompanyNo@SPFieldLink:CrmClientchoose.CompanyId as CompanyId from CrmClientRemove left join CrmClientchoose on CrmClientchoose.f_ref=CrmClientRemove.id,proc_update,'tblCMCompleteClient'@ParamLink:'createBy='+@NewCreateName@ParamLink:'id='+@CompanyId,retCode,retVal)}
</sql>
<sql type="procedure">
{call proc_iterateExeProc(select CrmClientRemove.id AS id@SPFieldLink:CrmClientRemove.NewCreateName as NewCreateName@SPFieldLink:
CrmClientchoose.createName as createName@SPFieldLink:CrmClientchoose.CompanyName as CompanyName @SPFieldLink:CrmClientchoose.CompanyNo as CompanyNo@SPFieldLink:CrmClientchoose.CompanyId as CompanyId from CrmClientRemove left join CrmClientchoose on CrmClientchoose.f_ref=CrmClientRemove.id,proc_update,'tblCMAbandonClient'@ParamLink:'createBy='+@NewCreateName@ParamLink:'id='+@CompanyId,retCode,retVal)}
</sql>

<!--兄弟表同时更新-->
<sql type="procedure">
{call proc_iterateExeProc(select CrmClientRemove.id AS id@SPFieldLink:CrmClientRemove.NewCreateName as NewCreateName@SPFieldLink:
CrmClientchoose.createName as createName@SPFieldLink:CrmClientchoose.CompanyName as CompanyName @SPFieldLink:CrmClientchoose.CompanyNo as CompanyNo@SPFieldLink:CrmClientchoose.CompanyId as CompanyId from CrmClientRemove left join CrmClientchoose on CrmClientchoose.f_ref=CrmClientRemove.id,proc_update,'CRMsaleFollow'@ParamLink:'createBy='+@NewCreateName@ParamLink:'f_brother='+@CompanyId,retCode,retVal)}
</sql>
<sql type="procedure">
{call proc_iterateExeProc(select CrmClientRemove.id AS id@SPFieldLink:CrmClientRemove.NewCreateName as NewCreateName@SPFieldLink:
CrmClientchoose.createName as createName@SPFieldLink:CrmClientchoose.CompanyName as CompanyName @SPFieldLink:CrmClientchoose.CompanyNo as CompanyNo@SPFieldLink:CrmClientchoose.CompanyId as CompanyId from CrmClientRemove left join CrmClientchoose on CrmClientchoose.f_ref=CrmClientRemove.id,proc_update,'CRMsalesQuot'@ParamLink:'createBy='+@NewCreateName@ParamLink:'f_brother='+@CompanyId,retCode,retVal)}
</sql>
<sql type="procedure">
{call proc_iterateExeProc(select CrmClientRemove.id AS id@SPFieldLink:CrmClientRemove.NewCreateName as NewCreateName@SPFieldLink:
CrmClientchoose.createName as createName@SPFieldLink:CrmClientchoose.CompanyName as CompanyName @SPFieldLink:CrmClientchoose.CompanyNo as CompanyNo@SPFieldLink:CrmClientchoose.CompanyId as CompanyId from CrmClientRemove left join CrmClientchoose on CrmClientchoose.f_ref=CrmClientRemove.id,proc_update,'CRMsaleconcract'@ParamLink:'createBy='+@NewCreateName@ParamLink:'f_brother='+@CompanyId,retCode,retVal)}
</sql>
<sql type="procedure">
{call proc_iterateExeProc(select CrmClientRemove.id AS id@SPFieldLink:CrmClientRemove.NewCreateName as NewCreateName@SPFieldLink:
CrmClientchoose.createName as createName@SPFieldLink:CrmClientchoose.CompanyName as CompanyName @SPFieldLink:CrmClientchoose.CompanyNo as CompanyNo@SPFieldLink:CrmClientchoose.CompanyId as CompanyId from CrmClientRemove left join CrmClientchoose on CrmClientchoose.f_ref=CrmClientRemove.id,proc_update,'CRMcomplaints'@ParamLink:'createBy='+@NewCreateName@ParamLink:'f_brother='+@CompanyId,retCode,retVal)}
</sql>
 </define>
  
    <!--客户移交反审核操作-->
  <define name="CrmClientRemove_add_two">
<sql type="procedure">
{call proc_iterateExeProc(select CrmClientRemove.id AS id@SPFieldLink:CrmClientRemove.NewCreateName as NewCreateName@SPFieldLink:
CrmClientchoose.createName as createName@SPFieldLink:CrmClientchoose.CompanyName as CompanyName @SPFieldLink:CrmClientchoose.CompanyNo as CompanyNo@SPFieldLink:CrmClientchoose.CompanyId as CompanyId from CrmClientRemove left join CrmClientchoose on CrmClientchoose.f_ref=CrmClientRemove.id,proc_update,'tblCMAimClient'@ParamLink:'createBy='+@createName@ParamLink:'id='+@CompanyId,retCode,retVal)}
</sql>
<sql type="procedure">
{call proc_iterateExeProc(select CrmClientRemove.id AS id@SPFieldLink:CrmClientRemove.NewCreateName as NewCreateName@SPFieldLink:
CrmClientchoose.createName as createName@SPFieldLink:CrmClientchoose.CompanyName as CompanyName @SPFieldLink:CrmClientchoose.CompanyNo as CompanyNo@SPFieldLink:CrmClientchoose.CompanyId as CompanyId from CrmClientRemove left join CrmClientchoose on CrmClientchoose.f_ref=CrmClientRemove.id,proc_update,'tblCMWillClient'@ParamLink:'createBy='+@createName@ParamLink:'id='+@CompanyId,retCode,retVal)}
</sql>
<sql type="procedure">
{call proc_iterateExeProc(select CrmClientRemove.id AS id@SPFieldLink:CrmClientRemove.NewCreateName as NewCreateName@SPFieldLink:
CrmClientchoose.createName as createName@SPFieldLink:CrmClientchoose.CompanyName as CompanyName @SPFieldLink:CrmClientchoose.CompanyNo as CompanyNo@SPFieldLink:CrmClientchoose.CompanyId as CompanyId from CrmClientRemove left join CrmClientchoose on CrmClientchoose.f_ref=CrmClientRemove.id,proc_update,'tblCMCompleteClient'@ParamLink:'createBy='+@createName@ParamLink:'id='+@CompanyId,retCode,retVal)}
</sql>
<sql type="procedure">
{call proc_iterateExeProc(select CrmClientRemove.id AS id@SPFieldLink:CrmClientRemove.NewCreateName as NewCreateName@SPFieldLink:
CrmClientchoose.createName as createName@SPFieldLink:CrmClientchoose.CompanyName as CompanyName @SPFieldLink:CrmClientchoose.CompanyNo as CompanyNo@SPFieldLink:CrmClientchoose.CompanyId as CompanyId from CrmClientRemove left join CrmClientchoose on CrmClientchoose.f_ref=CrmClientRemove.id,proc_update,'tblCMAbandonClient'@ParamLink:'createBy='+@createName@ParamLink:'id='+@CompanyId,retCode,retVal)}
</sql>

<!--兄弟表同时更新-->
<sql type="procedure">
{call proc_iterateExeProc(select CrmClientRemove.id AS id@SPFieldLink:CrmClientRemove.NewCreateName as NewCreateName@SPFieldLink:
CrmClientchoose.createName as createName@SPFieldLink:CrmClientchoose.CompanyName as CompanyName @SPFieldLink:CrmClientchoose.CompanyNo as CompanyNo@SPFieldLink:CrmClientchoose.CompanyId as CompanyId from CrmClientRemove left join CrmClientchoose on CrmClientchoose.f_ref=CrmClientRemove.id,proc_update,'CRMsaleFollow'@ParamLink:'createBy='+@createName@ParamLink:'f_brother='+@CompanyId,retCode,retVal)}
</sql>
<sql type="procedure">
{call proc_iterateExeProc(select CrmClientRemove.id AS id@SPFieldLink:CrmClientRemove.NewCreateName as NewCreateName@SPFieldLink:
CrmClientchoose.createName as createName@SPFieldLink:CrmClientchoose.CompanyName as CompanyName @SPFieldLink:CrmClientchoose.CompanyNo as CompanyNo@SPFieldLink:CrmClientchoose.CompanyId as CompanyId from CrmClientRemove left join CrmClientchoose on CrmClientchoose.f_ref=CrmClientRemove.id,proc_update,'CRMsalesQuot'@ParamLink:'createBy='+@createName@ParamLink:'f_brother='+@CompanyId,retCode,retVal)}
</sql>
<sql type="procedure">
{call proc_iterateExeProc(select CrmClientRemove.id AS id@SPFieldLink:CrmClientRemove.NewCreateName as NewCreateName@SPFieldLink:
CrmClientchoose.createName as createName@SPFieldLink:CrmClientchoose.CompanyName as CompanyName @SPFieldLink:CrmClientchoose.CompanyNo as CompanyNo@SPFieldLink:CrmClientchoose.CompanyId as CompanyId from CrmClientRemove left join CrmClientchoose on CrmClientchoose.f_ref=CrmClientRemove.id,proc_update,'CRMsaleconcract'@ParamLink:'createBy='+@createName@ParamLink:'f_brother='+@CompanyId,retCode,retVal)}
</sql>
<sql type="procedure">
{call proc_iterateExeProc(select CrmClientRemove.id AS id@SPFieldLink:CrmClientRemove.NewCreateName as NewCreateName@SPFieldLink:
CrmClientchoose.createName as createName@SPFieldLink:CrmClientchoose.CompanyName as CompanyName @SPFieldLink:CrmClientchoose.CompanyNo as CompanyNo@SPFieldLink:CrmClientchoose.CompanyId as CompanyId from CrmClientRemove left join CrmClientchoose on CrmClientchoose.f_ref=CrmClientRemove.id,proc_update,'CRMcomplaints'@ParamLink:'createBy='+@createName@ParamLink:'f_brother='+@CompanyId,retCode,retVal)}
</sql>
</define>
 
 <!--CRM同步之后添加往来明细、汇总-->
 <define name="same_CrmCompanysame_add">	 		 	
	 <sql type="condition">
	    <condition>
          <select>select CompanyName,createTime as createTimeS from CrmCompanysame where id=@ValueofDB:CrmCompanysame_id</select> 
		  <select>select CRMClientInfo.id,CRMClientInfo.ClientNo,CRMClientInfo.ClientName,
CRMClientInfo.Phone,CRMClientInfo.Fax,CRMClientInfo.Address,
CRMClientInfo.Email,CRMClientInfo.URL,CRMClientInfo.createBy,
CRMClientInfo.createTime,CRMClientInfo.lastUpdateTime,CRMClientInfo.lastUpdateBy,CRMClientInfo.SCompanyID,CRMClientInfoDet.UserName,CRMClientInfoDet.Telephone,CRMClientInfoDet.Mobile,
CRMClientInfoDet.id as Detid,CRMClientInfoDet.f_ref from CRMClientInfo 
left join CRMClientInfoDet on CRMClientInfoDet.f_ref=CRMClientInfo.id
where CRMClientInfo.id=@SqlReturn:CompanyName</select>
	<select>select max(classCode) as classCode from tblCompany</select>
		<select>select isSunCmpShare from tblDBTableInfo where tableName='tblCompany'</select>
		 <select>select count(ComNumber) as comnum from tblcompany where ComNumber=@SqlReturn:CompanyNo and SCompanyID=@Sess:SCompanyID</select>
		</condition>
		<exec condition="@SqlReturn:comnum &gt;1">
	  <error>tblcompany.ComNumber.error</error>
	  </exec>
	</sql>
	</define>

 <!--添加商务活动时判断是否选择了客户-->
  <define name="crmBussAction_add">
 <sql type="condition">
	<exec condition="&quot;@ValueofDB:f_brother&quot;==&quot;null&quot;||&quot;@ValueofDB:f_brother&quot;==&quot;&quot;">
          <error>Company.add.error</error>
		  </exec>
		  </sql>
		 </define>	 
 <!--添加销售跟单时判断是否选择了客户-->
  <define name="CRMsaleFollow_add_before">
 <sql type="condition">
	<exec condition="&quot;@ValueofDB:f_brother&quot;==&quot;null&quot;||&quot;@ValueofDB:f_brother&quot;==&quot;&quot;">
          <error>Company.add.error</error>
		  </exec>
		  </sql>
		 </define> 
 <!--添加销售合同时判断是否选择了客户-->
  <define name="CRMsaleconcract_add_before">
 <sql type="condition">
	<exec condition="&quot;@ValueofDB:f_brother&quot;==&quot;null&quot;||&quot;@ValueofDB:f_brother&quot;==&quot;&quot;">
          <error>Company.add.error</error>
		  </exec>
		  </sql>
	 </define>		 
<!--Crm往来同步审核-->
 <define name="same_CrmCompanysames">
 <sql type="condition">
   <condition>
    <select>select CompanyName as CompanyName,Catalogs as Catalogs from CrmCompanysame where id=@ValueofDB:CrmCompanysame_id</select> 
	<select>select convert(int,subString(max(classCode),len(@SqlReturn:Catalogs)+1,5)) as SonComNum  from tblCompany where  classCode like @SqlReturn:Catalogs+'_____'</select>
	<select>select @SqlReturn:SonComNum + 1 as Num</select>
	<!-- <select>select count(id) as isOK from tblCompany where classcode=@SqlReturn:Catalogs and (ClientFlag=2 or ClientFlag=3) and classcode not in (select classcode from tblCompany where (classCode in (select CompanyCode from tblBuyInStock) or classCode in (select CompanyCode from tblBuyOutStock) or classCode in (select CompanyCode from tblSalesOutStock) or classCode in (select CompanyCode from tblSalesReturnStock) or classCode in (select CompanyCode from tblSalesInvoice) or classCode in (select CompanyCode from tblSalesOrder) or classCode in (select CompanyCode from tblSaleReceive) or classCode in (select CompanyCode from tblBuyInvoices) or classCode in (select CompanyCode from tblBuyRtnInvoice) or classCode in (select CompanyCode from tblBuyOrder) or classCode in (select CompanyCode from tblReturnReceive) or classCode in (select CompanyCode from tblOtherOut) or classCode in (select CompanyCode from tblOtherIn)  or classCode in (select CompanyCode from tblTransferSale1) or classCode in (select InCompanyCode from tblTransferSale1) or classCode in (select CompanyCode from tblTransferSale2) or classCode in (select InCompanyCode from tblTransferSale2) or classCode in (select CompanyCode from tblTransferSale3)  or classCode in (select InCompanyCode from tblTransferSale3) or classCode in (select CompanyCode from tblTransferSale4)  or classCode in (select InCompanyCode from tblTransferSale4) or classCode in (select CompanyCode from tblEntrustProcess) or classCode in (select CompanyCode from tblOutPrecessProducts) or classCode in (select CompanyCode from tblEntrustProcessInGoods) or classCode in (select CompanyCode from tblPrecessProductsLose) or classCode in (select CompanyCode from tblOutPrecessCost) or classCode in (select CompanyCode from tblOutPrecessMaterial) or classCode in (select distinct CompanyCode from tblCompanyIni where ReceiveBegin !=0 or ReceiveTotalDebit !=0 or ReceiveTotalLend !=0 or PreReceiveBegin != 0 or PreReceiveTotalDebit !=0 or PreReceiveTotalLend !=0 or PayBegin !=0 or PayTotalDebit != 0 or PayTotalLend !=0 or PrePayBegin !=0 or PrePayTotalDebit !=0 or PrePayTotalLend != 0)))</select> -->
<select>select count(id) as isOKs from tblCompany where classcode= @SqlReturn:Catalogs</select>
<select>select classCount as classCount from tblDBTableInfo where tablename='tblCompany'</select>
<select>select comfullname as comfullname from tblCompany where classcode= @SqlReturn:Catalogs</select>
    <select>select CRMClientInfo.id,CRMClientInfo.ClientNo,CRMClientInfo.ClientName,
CRMClientInfo.Phone,CRMClientInfo.Fax,CRMClientInfo.Address,
CRMClientInfo.Email,CRMClientInfo.createBy,
CRMClientInfo.createTime,CRMClientInfo.lastUpdateTime,CRMClientInfo.lastUpdateBy,CRMClientInfo.SCompanyID,CRMClientInfoDet.UserName,CRMClientInfoDet.Telephone,CRMClientInfoDet.Mobile,CRMClientInfoDet.id as Detid,CRMClientInfoDet.f_ref from CRMClientInfo 
left join CRMClientInfoDet on CRMClientInfoDet.f_ref=CRMClientInfo.id
where CRMClientInfo.id=@SqlReturn:CompanyName</select>
	<select>select max(classCode)+1 as classCode from tblCompany where len(classCode)=5</select>
	<select>select '0000'+@SqlReturn:classCode as a</select>
	<select>select '000'+@SqlReturn:classCode as b</select>
	<select>select '00'+@SqlReturn:classCode as c</select>
	<select>select '0'+@SqlReturn:classCode as d</select>
	<!--往来同步客户不能相同-->
	<select>select CrmCompanysameDet.CompanyName as Company,CRMClientInfo.ClientName as ComFullName from CrmCompanysameDet left join CRMClientInfo on CRMClientInfo.id= CrmCompanysameDet.CompanyName where CrmCompanysameDet.CompanyName in (select CompanyName from CrmCompanysameDet a where a.f_ref=@ValueofDB:CrmCompanysame_id) group by CrmCompanysameDet.CompanyName,CRMClientInfo.ClientName having count(*)&gt;1</select>
		<select>select 'ExistName' as ExistName from tblcompany 
where ComfullName in (select ClientName from CrmCompanysameDet
left join CRMClientInfo on CRMClientInfo.id=CrmCompanysameDet.CompanyName where f_ref=@ValueofDB:CrmCompanysame_id)</select>
	</condition>
	   		<!-- 客户名称是否唯一 -->
		<exec condition="&quot;@SqlReturn:ExistName&quot;==&quot;ExistName&quot; &amp;&amp; &quot;@MEM:GoodsNameUnique&quot;==&quot;true&quot;">
			<error>CRMClientInfo.add.ExistErrorNameUnique</error>
		</exec>
	    <!--客户{0}不允许出现两次！-->
   <exec condition="&quot;@SqlReturn:Company&quot; != &quot;null&quot; ">
   <error>CrmCompanysame.Two.error,@SqlReturn:ComFullName</error>
   </exec>
	<!-- 	
		<exec condition="(&quot;@SqlReturn:Catalogs&quot;.length==@SqlReturn:classCount*5)||((@SqlReturn:isOK==0)&amp;&amp;(&quot;@SqlReturn:Catalogs&quot;.length&gt;0))||((@SqlReturn:isOKs==0)&amp;&amp;(&quot;@SqlReturn:Catalogs&quot;.length&gt;0))">
	<error>same_CrmCompanysames_error,@SqlReturn:comfullname</error>
	</exec>
	 -->
	<exec condition="true">
	<sql type="procedure">
	{call proc_updatecompanycode(@ValueofDB:id,retCode,retVal)}
	</sql>
	</exec>
	<exec condition="true">
	 	  	<sql type="procedure">
			{call
proc_iterateExeProc(select CRMClientInfo.id as id@SPFieldLink:CRMClientInfo.ClientNo as ClientNo @SPFieldLink:CRMClientInfo.ClientName as ClientName@SPFieldLink:isnull(CRMClientInfo.Phone@SPFieldLink:'') as Phone@SPFieldLink:isnull(CRMClientInfo.Fax@SPFieldLink:'') as Fax@SPFieldLink:isnull(CRMClientInfo.BusinessDistrict@SPFieldLink:'') as BusinessDistrict@SPFieldLink:isnull(CRMClientInfo.Address@SPFieldLink:'') as Address@SPFieldLink:isnull(CRMClientInfo.Email@SPFieldLink:'') as Email@SPFieldLink:CRMClientInfo.createBy as createBy@SPFieldLink:isnull(CRMClientInfo.URL@SPFieldLink:'') as URL@SPFieldLink:isnull(CRMClientInfo.createTime@SPFieldLink:'@ValueofDB:CrmCompanysame_createTime') as createTime@SPFieldLink:isnull(CRMClientInfo.lastUpdateTime@SPFieldLink:'@ValueofDB:CrmCompanysame_lastUpdateTime') as lastUpdateTime@SPFieldLink:isnull(CRMClientInfo.lastUpdateBy@SPFieldLink:'@ValueofDB:CrmCompanysame_lastUpdateBy') as lastUpdateBy@SPFieldLink:CRMClientInfo.SCompanyID as SCompanyID@SPFieldLink:CrmCompanysameDet.CompanyCode as classCodes from  CrmCompanysameDet
left join CRMClientInfo on CrmCompanysameDet.CompanyName=CRMClientInfo.id 
left join CrmCompanysame on CrmCompanysame.id=CrmCompanysameDet.f_ref
where CrmCompanysameDet.f_ref='@ValueofDB:CrmCompanysame_id',proc_insert,'tblCompany'@ParamLink:'id='+@id+'@SPFieldLink:ComNumber='+@ClientNo+'@SPFieldLink:ComFullName='+@ClientName+'@SPFieldLink:ComName='+@ClientName+'@SPFieldLink:ComTel='+@Phone+'@SPFieldLink:ComWebsite='+@URL+'@SPFieldLink:ComFax='+@Fax+'@SPFieldLink:AreaID='+@BusinessDistrict+'@SPFieldLink:ComAddress='+@Address+'@SPFieldLink:ComEmail='+@Email+'@SPFieldLink:ClientFlag=2@SPFieldLink:CustomerFlag=3@SPFieldLink:createBy='+@createBy+'@SPFieldLink:createTime='+@createTime+'@SPFieldLink:lastUpdateTime='+@lastUpdateTime+'@SPFieldLink:lastUpdateBy='+@lastUpdateBy+'@SPFieldLink:classCode='+@classCodes+'@SPFieldLink:workFlowNodeName=finish@SPFieldLink:workFlowNode=-1@SPFieldLink:checkPersons=@SPFieldLink:moduleType=2@SPFieldLink:SCompanyID='+@SCompanyID,retCode,retVal)}
    </sql>
	<sql>update tblCompany set isCatalog=1 where ClassCode=@SqlReturn:Catalogs</sql>
	<!--更新拼音码-->
	<sql>update tblCompany set ComFullNamePYM=dbo.updateCompany_PYM(tblCompany.ComFullName)
	  from CrmCompanysameDet where CrmCompanysameDet.CompanyCode=tblCompany.classCode
and CrmCompanysameDet.f_ref=@ValueofDB:CrmCompanysame_id</sql>
	</exec>
	<!--插入联系人-->	
 <exec condition="true">
	 	  	<sql type="procedure">
			{call
proc_iterateExeProc(select CRMClientInfoDet.id as id@SPFieldLink:CRMClientInfoDet.f_ref as f_ref@SPFieldLink:isnull(CRMClientInfoDet.UserName@SPFieldLink:'') as ContactMan@SPFieldLink:isnull(CRMClientInfoDet.Role@SPFieldLink:'') as Role@SPFieldLink:isnull(CRMClientInfoDet.Gender@SPFieldLink:'') as Gender@SPFieldLink:
isnull(CRMClientInfoDet.BirthDay@SPFieldLink:'') as BirthDay@SPFieldLink:isnull(CRMClientInfoDet.Mobile@SPFieldLink:'') as Mobile@SPFieldLink:isnull(CRMClientInfoDet.Telephone@SPFieldLink:'') as Telephone@SPFieldLink:isnull(CRMClientInfoDet.ClientEmail@SPFieldLink:'') as ClientEmail@SPFieldLink:isnull(CRMClientInfoDet.Remark@SPFieldLink:'') as Remark@SPFieldLink:isNull(CRMClientInfoDet.ScompanyID@SPFieldLink:'') as SCompanyID@SPFieldLink:CRMClientInfo.ClientNo+convert(varchar(50)@SPFieldLink:row_number() over(order by CRMClientInfo.ClientNo)) as contactCode from CrmCompanysameDet
left join tblCompany on CrmCompanysameDet.CompanyName=tblCompany.id
left join  CRMClientInfoDet on CRMClientInfoDet.f_ref=tblCompany.id
left join CRMClientInfo on CRMClientInfoDet.f_ref=CRMClientInfo.id
where CrmCompanysameDet.f_ref='@ValueofDB:CrmCompanysame_id' and CRMClientInfoDet.id!='' and CRMClientInfoDet.id is not null,proc_insert,'tblCompanyEmployeeDet'@ParamLink:'id=subString(cast(newid() as varchar(36))@RepComma:1@RepComma:30)@ParamNum:@SPFieldLink:f_ref='+@f_ref+'@SPFieldLink:ContactMan='+@ContactMan+'@SPFieldLink:Role='+@Role+'@SPFieldLink:Gender='+@Gender+'@SPFieldLink:BirthDay='+@BirthDay+'@SPFieldLink:Mobile='+@Mobile+'@SPFieldLink:Telephone='+@Telephone+'@SPFieldLink:Remark='+@Remark+'@SPFieldLink:SCompanyID='+@SCompanyID+'@SPFieldLink:ClientEmail='+@ClientEmail+'@SPFieldLink:contactCode='+@contactCode,retCode,retVal)}
    </sql>
	</exec>
	<exec condition="true"><!--转换时将客户合同中已有的客户对应的classCode回填ERP客户的classCode-->
		<sql>UPDATE CRMSaleContract SET classCode = a.classCode FROM tblCompany a,CrmCompanysameDet b WHERE CRMSaleContract.ClientId = a.id AND CRMSaleContract.ClientId = b.CompanyName AND b.f_ref = @ValueofDB:CrmCompanysame_id</sql>
	</exec>
  	</sql>
  </define>
  
 <!--Crm往来同步增加 -->
  <define name="CrmCompanysame_add">
    <sql type="condition">
	<!--不需要审核流-->
     <exec condition="true">
      <sql type="define">same_CrmCompanysames</sql>
	  <sql type="define">same_CrmCompanysame_add</sql>
	</exec>
	</sql>	
</define>
<!--CRM往来同步反审核 
<define name="CrmCompanysame_antonym_Auditing">
    <sql type="condition">
	<condition>	
	     <select>select CompanyName as CName from CrmCompanysame where id=@ValueofDB:CrmCompanysame_id</select>
		<select> select count(id) as isOK from CrmCompanysame where id=@ValueofDB:CrmCompanysame_id and CompanyName in (select id as Companyid from tblCompany where (ClientFlag=2 or ClientFlag=3) and classcode not in (select classcode from tblCompany where (classCode in (select CompanyCode from tblBuyInStock) or classCode in (select CompanyCode from tblBuyOutStock) or classCode in (select CompanyCode from tblSalesOutStock) or classCode in (select CompanyCode from tblSalesReturnStock) or classCode in (select CompanyCode from tblSalesInvoice) or classCode in (select CompanyCode from tblSalesOrder) or classCode in (select CompanyCode from tblSaleReceive) or classCode in (select CompanyCode from tblBuyInvoices) or classCode in (select CompanyCode from tblBuyRtnInvoice) or classCode in (select CompanyCode from tblBuyOrder) or classCode in (select CompanyCode from tblReturnReceive) or classCode in (select CompanyCode from tblOtherOut) or classCode in (select CompanyCode from tblOtherIn)  or classCode in (select CompanyCode from tblTransferSale1) or classCode in (select InCompanyCode from tblTransferSale1) or classCode in (select CompanyCode from tblTransferSale2) or classCode in (select InCompanyCode from tblTransferSale2) or classCode in (select CompanyCode from tblTransferSale3)  or classCode in (select InCompanyCode from tblTransferSale3) or classCode in (select CompanyCode from tblTransferSale4)  or classCode in (select InCompanyCode from tblTransferSale4) or classCode in (select CompanyCode from tblEntrustProcess) or classCode in (select CompanyCode from tblOutPrecessProducts) or classCode in (select CompanyCode from tblEntrustProcessInGoods) or classCode in (select CompanyCode from tblPrecessProductsLose) or classCode in (select CompanyCode from tblOutPrecessCost) or classCode in (select CompanyCode from tblOutPrecessMaterial) or classCode in (select distinct CompanyCode from tblCompanyIni where ReceiveBegin !=0 or ReceiveTotalDebit !=0 or ReceiveTotalLend !=0 or PreReceiveBegin != 0 or PreReceiveTotalDebit !=0 or PreReceiveTotalLend !=0 or PayBegin !=0 or PayTotalDebit != 0 or PayTotalLend !=0 or PrePayBegin !=0 or PrePayTotalDebit !=0 or PrePayTotalLend != 0))))
</select>
 <select>select ComFullName as ComFullName,isCatalog as isCatalog,classcode as classcode from tblCompany where id=@SqlReturn:CName</select>
	  <select>select count(id) as isF from tblCompany where classcode like stuff(@SqlReturn:classcode,len(@SqlReturn:classcode)-4,5,'')+'_____'</select>
    </condition>
     <exec condition="((@SqlReturn:isOK==0)&amp;&amp;(@SqlReturn:isCatalog != null))||(@SqlReturn:isCatalog == null ? false:@SqlReturn:isCatalog == 1?true:false )">
	    <error>CrmCompanysame_antonym_Auditing_error,@SqlReturn:ComFullName</error>
	  </exec>
	  <exec condition="@SqlReturn:isF==1">
         <sql>update tblcompany set isCatalog=0 where classcode=stuff(@SqlReturn:classcode,len(@SqlReturn:classcode)-4,5,'') </sql>
	  </exec>
      <exec condition="@SqlReturn:isOK==1">
         <sql>delete tblCompanyDet where f_ref=@SqlReturn:CName</sql>
		 <sql>delete tblCompanyEmployeeDet where f_ref=@SqlReturn:CName</sql>
		 <sql>delete tblCompanyTotal where CompanyCode in (select classcode from tblcompany where id=@SqlReturn:CName)</sql>
		 <sql>delete tblCompanyIni where CompanyCode in (select classcode from tblcompany where id=@SqlReturn:CName)</sql>
		 <sql>delete tblCompany where id=@SqlReturn:CName</sql>
	  </exec>
	</sql>	
</define> 
-->
<!--CRM往来同步删除 -->  
    <define name="CrmCompanysame_delete">
    <sql type="condition">
	<condition>	
		 <select>select CompanyName as CName from CrmCompanysame where id=@ValueofDB:CrmCompanysame_id</select>
    </condition>
	</sql>	
</define>

      <!--销售合同添加审核-->
  <define name="CRMsaleconcract_Auditing">
   <sql type="condition">
   <condition>
    <select>select Comment from CRMsaleconcract where id=@ValueofDB:id</select>
 </condition>
   <exec condition="&quot;@SqlReturn:Comment&quot;==&quot;null&quot;||&quot;@SqlReturn:Comment&quot;.length==&quot;&quot;">
 <error>add.coment.error</error>
  </exec>
  </sql>
  </define>
  
  <define name="CrmCompanysame2_add">
   <sql type="condition">
   <condition>
   <select>select Catalogs from CrmCompanysame2 where id=@ValueofDB:id</select>
       <select>select CrmCompanysame2Det.CompanyName as CompanyName,tblCompany.ComFullName from CrmCompanysame2Det left join tblCompany on tblcompany.id= CrmCompanysame2Det.CompanyName where CrmCompanysame2Det.f_ref=@ValueofDB:CrmCompanysame2_id group by CompanyName,ComFullName having count(*)&gt;1</select>
	   <select>select 'ExistErrorNameUnique' as ExistErrorNameUnique from CRMClientInfo 
where ClientName in (select ComfullName from CrmCompanysame2Det
left join tblcompany on tblcompany.id=CrmCompanysame2Det.CompanyName where f_ref=@ValueofDB:CrmCompanysame2_id)</select>
   </condition>
   	<!--客户{0}不允许出现两次！-->
   <exec condition="&quot;@SqlReturn:CompanyName&quot; != &quot;null&quot; ">
   <error>CrmCompanysame.Two.error,@SqlReturn:ComFullName</error>
   </exec>
   		<!-- 客户名称是否唯一 -->
		<exec condition="&quot;@SqlReturn:ExistErrorNameUnique&quot;==&quot;ExistErrorNameUnique&quot; &amp;&amp; &quot;@MEM:CRMClientInfoName&quot;==&quot;true&quot;">
			<error>CRMClientInfo.add.ExistErrorNameUnique</error>
		</exec>

<!--不需要启用审核流也不需要发票操作  由于该单不能修改-->
<exec condition="true">
<sql type="define">CrmCompanysame2_add_one</sql>
</exec>
</sql>	
  </define>
  
   <define name="CrmCompanysame2_add_one">
      <sql type="condition">
   <condition>
   <select>select Catalogs from CrmCompanysame2 where id=@ValueofDB:id</select>
   <select>select ComContactor,ComContactorTel,ComContactorMobile from tblCompany where id in(select companyName from CrmCompanysame2Det where f_ref=@ValueofDB:CrmCompanysame2_id)</select>
   </condition>
   <!--启用审核流的通不过去为未审核-->
   	<exec condition="&quot;@MEM:CRMClientInfo_IsStatart&quot; == &quot;1&quot;">
	 	  	<sql type="procedure">
			{call
proc_iterateExeProc(select tblCompany.id as id@SPFieldLink:tblCompany.classCode as classCode@SPFieldLink:tblCompany.ComNumber as ComNumber@SPFieldLink:tblCompany.ComFullName as ComFullName@SPFieldLink:isnull(tblCompany.ComTel@SPFieldLink:'') as ComTel@SPFieldLink:isnull(tblCompany.ComFax@SPFieldLink:'') as ComFax@SPFieldLink:isnull(tblCompany.AreaID@SPFieldLink:'') as AreaID@SPFieldLink:isnull(tblCompany.ComAddress@SPFieldLink:'') as ComAddress@SPFieldLink:
isnull(tblCompany.ComEmail@SPFieldLink:'') as ComEmail@SPFieldLink:isnull(tblCompany.ComWebsite@SPFieldLink:'') as ComWebsite@SPFieldLink:tblCompany.createBy as createBy@SPFieldLink:tblCompany.createTime as createTime@SPFieldLink:tblCompany.lastUpdateTime as lastUpdateTime@SPFieldLink:'@MEM:sysShortDate' as TransferDate@SPFieldLink:tblCompany.lastUpdateBy as lastUpdateBy@SPFieldLink:tblCompany.SCompanyID as SCompanyID from  CrmCompanysame2Det
left join tblCompany on CrmCompanysame2Det.CompanyName=tblCompany.id 
where CrmCompanysame2Det.f_ref='@ValueofDB:CrmCompanysame2_id',proc_insert,'CRMClientInfo'@ParamLink:'id='+@id+'@SPFieldLink:classCode='+@classCode+'@SPFieldLink:ClientNo='+@ComNumber+'@SPFieldLink:ClientName='+@ComFullName+'@SPFieldLink:Phone='+@ComTel+'@SPFieldLink:Fax='+@ComFax+'@SPFieldLink:BusinessDistrict='+@AreaID+'@SPFieldLink:Address='+@ComAddress+'@SPFieldLink:Email='+@ComEmail+'@SPFieldLink:URL='+@ComWebsite+'@SPFieldLink:createBy='+@createBy+'@SPFieldLink:createTime='+@createTime+'@SPFieldLink:Lastcontracttime='+@createTime+'@SPFieldLink:TransferDate='+@TransferDate+'@SPFieldLink:lastUpdateTime='+@lastUpdateTime+'@SPFieldLink:lastUpdateBy='+@lastUpdateBy+'@SPFieldLink:ClientType=1@SPFieldLink:Status=@SqlReturn:Catalogs@SPFieldLink:Level=2@SPFieldLink:Emergency=1@SPFieldLink:workFlowNodeName=notApprove@SPFieldLink:SCompanyID='+@SCompanyID,retCode,retVal)}
    </sql>
	</exec>
	<!--不启用审核流-->
	<exec condition="&quot;@MEM:CRMClientInfo_IsStatart&quot; == &quot;0&quot;">
	 	  	<sql type="procedure">
			{call
proc_iterateExeProc(select tblCompany.id as id@SPFieldLink:tblCompany.classCode as classCode@SPFieldLink:tblCompany.ComNumber as ComNumber@SPFieldLink:tblCompany.ComFullName as ComFullName@SPFieldLink:isnull(tblCompany.ComTel@SPFieldLink:'') as ComTel@SPFieldLink:isnull(tblCompany.ComFax@SPFieldLink:'') as ComFax@SPFieldLink:isnull(tblCompany.AreaID@SPFieldLink:'') as AreaID@SPFieldLink:isnull(tblCompany.ComAddress@SPFieldLink:'') as ComAddress@SPFieldLink:
isnull(tblCompany.ComEmail@SPFieldLink:'') as ComEmail@SPFieldLink:isnull(tblCompany.ComWebsite@SPFieldLink:'') as ComWebsite@SPFieldLink:tblCompany.createBy as createBy@SPFieldLink:tblCompany.createTime as createTime@SPFieldLink:tblCompany.lastUpdateTime as lastUpdateTime@SPFieldLink:'@MEM:sysShortDate' as TransferDate@SPFieldLink:tblCompany.lastUpdateBy as lastUpdateBy@SPFieldLink:tblCompany.SCompanyID as SCompanyID from  CrmCompanysame2Det
left join tblCompany on CrmCompanysame2Det.CompanyName=tblCompany.id 
where CrmCompanysame2Det.f_ref='@ValueofDB:CrmCompanysame2_id',proc_insert,'CRMClientInfo'@ParamLink:'id='+@id+'@SPFieldLink:classCode='+@classCode+'@SPFieldLink:ClientNo='+@ComNumber+'@SPFieldLink:ClientName='+@ComFullName+'@SPFieldLink:Phone='+@ComTel+'@SPFieldLink:Fax='+@ComFax+'@SPFieldLink:BusinessDistrict='+@AreaID+'@SPFieldLink:Address='+@ComAddress+'@SPFieldLink:Email='+@ComEmail+'@SPFieldLink:URL='+@ComWebsite+'@SPFieldLink:createBy='+@createBy+'@SPFieldLink:createTime='+@createTime+'@SPFieldLink:LastContractTime='+@createTime+'@SPFieldLink:TransferDate='+@TransferDate+'@SPFieldLink:lastUpdateTime='+@lastUpdateTime+'@SPFieldLink:lastUpdateBy='+@lastUpdateBy+'@SPFieldLink:ClientType=1@SPFieldLink:Status=@SqlReturn:Catalogs@SPFieldLink:Level=2@SPFieldLink:Emergency=1@SPFieldLink:workFlowNodeName=finish@SPFieldLink:workFlowNode=-1@SPFieldLink:checkPersons=@SPFieldLink:SCompanyID='+@SCompanyID,retCode,retVal)}
    </sql>
	</exec>
			<!--插入联系人-->
	  	<exec condition="true">
	 	  	<sql type="procedure">
			{call
proc_iterateExeProc(select tblCompanyEmployeeDet.id as id@SPFieldLink:tblCompanyEmployeeDet.f_ref as f_ref@SPFieldLink:tblCompanyEmployeeDet.ContactMan as ContactMan@SPFieldLink:tblCompanyEmployeeDet.Role as Role@SPFieldLink:tblCompanyEmployeeDet.Gender as Gender@SPFieldLink:
tblCompanyEmployeeDet.BirthDay as BirthDay@SPFieldLink:tblCompanyEmployeeDet.Mobile as Mobile@SPFieldLink:tblCompanyEmployeeDet.Telephone as Telephone@SPFieldLink:tblCompanyEmployeeDet.ClientEmail as ClientEmail@SPFieldLink:
tblCompanyEmployeeDet.Remark as Remark@SPFieldLink:tblCompanyEmployeeDet.ScompanyID as SCompanyID from CrmCompanysame2Det
left join tblCompany on CrmCompanysame2Det.CompanyName=tblCompany.id
left join  tblCompanyEmployeeDet on tblCompanyEmployeeDet.f_ref=tblCompany.id
where CrmCompanysame2Det.f_ref='@ValueofDB:CrmCompanysame2_id' and tblCompanyEmployeeDet.id!='' and tblCompanyEmployeeDet.id is not null,proc_insert,'CRMClientInfoDet'@ParamLink:'id=subString(cast(newid() as varchar(36))@RepComma:1@RepComma:30)@ParamNum:@SPFieldLink:f_ref='+@f_ref+'@SPFieldLink:UserName='+isnull(@ContactMan@RepComma:'')+'@SPFieldLink:Role='+isnull(@Role@RepComma:'')+'@SPFieldLink:Gender='+isnull(@Gender@RepComma:'')+'@SPFieldLink:BirthDay='+isnull(@BirthDay@RepComma:'')+'@SPFieldLink:Mobile='+isnull(@Mobile@RepComma:'')+'@SPFieldLink:Telephone='+isnull(@Telephone@RepComma:'')+'@SPFieldLink:Remark='+isnull(@Remark@RepComma:'')+'@SPFieldLink:SCompanyID='+isnull(@SCompanyID@RepComma:'')+'@SPFieldLink:ClientEmail='+isnull(@ClientEmail@RepComma:''),retCode,retVal)}
    </sql>
	</exec>
	<!--插入主表负责人到联系人中-->
	<exec condition="&quot;@SqlReturn:ComContactor&quot; != &quot;&quot; &amp;&amp; (&quot;@SqlReturn:ComContactorTel&quot; != &quot;&quot; || &quot;@SqlReturn:ComContactorMobile&quot; != &quot;&quot; )">
			<sql type="procedure">
				{call
proc_iterateExeProc(select tblCompany.id as f_ref@SPFieldLink:ComContactor as ComContactor@SPFieldLink:ComContactorTel as ComContactorTel@SPFieldLink:ComContactorMobile as ComContactorMobile from CrmCompanysame2Det
left join tblCompany on CrmCompanysame2Det.CompanyName=tblCompany.id
left join  tblCompanyEmployeeDet on tblCompanyEmployeeDet.f_ref=tblCompany.id
where CrmCompanysame2Det.f_ref='@ValueofDB:CrmCompanysame2_id' and tblCompanyEmployeeDet.id!='' and tblCompanyEmployeeDet.id is not null ,proc_insert,'CRMClientInfoDet'@ParamLink:'id=subString(cast(newid() as varchar(36))@RepComma:1@RepComma:30)@ParamNum:@SPFieldLink:f_ref='+@f_ref+'@SPFieldLink:UserName='+isnull(@ComContactor@RepComma:'')+'@SPFieldLink:Mobile='+isnull(@ComContactorMobile@RepComma:'')+'@SPFieldLink:Telephone='+isnull(@ComContactorTel@RepComma:''),retCode,retVal)}
			</sql>
	</exec>
  </sql>
 	<sql type="condition">
	 <!--	 插入跟单人 -->
		<exec condition="true">
			<sql type="procedure">
			{call
proc_iterateExeProc(select substring(replace(newid()@SPFieldLink:'-'@SPFieldLink:'')@SPFieldLink:1@SPFieldLink:30) as id@SPFieldLink:tblCompany.id as f_ref@SPFieldLink:isnull((select DepartmentCode from tblEmployee where id=tblCompany.createby)@SPFieldLink:'') as DepartmentCode@SPFieldLink:tblCompany.createby as EmployeeID@SPFieldLink:isnull(tblCompany.SCompanyID@SPFieldLink:'') as SCompanyID from  CrmCompanysame2Det
left join tblCompany on CrmCompanysame2Det.CompanyName=tblCompany.id 
where CrmCompanysame2Det.f_ref='@ValueofDB:CrmCompanysame2_id' and not exists(select DepartmentCode from CRMClientInfoEmp where f_ref=tblCompany.id and EmployeeID=tblCompany.createby),proc_insert,'CRMClientInfoEmp'@ParamLink:'id='+@id+'@SPFieldLink:f_ref='+@f_ref+'@SPFieldLink:DepartmentCode='+@DepartmentCode+'@SPFieldLink:EmployeeID='+@EmployeeID+'@SPFieldLink:SCompanyID='+@SCompanyID,retCode,retVal)}</sql>
		</exec>
	</sql>
  </define>



  
<!--跟单周期设置添加操作-->
<define name="CRMFollowSet_add">
	<sql type="condition">
		<condition>
			<select>select StateDate,EndDate from CRMFollowSet where id=@ValueofDB:id</select>
			<select>select c.ExistsEqual as ExistsEqual,e.ExistsInterval as ExistsInterval from CRMFollowSet a outer apply (select 'Exists' as ExistsEqual from CRMFollowSet b where b.id!=a.id and (b.StateDate=a.StateDate or b.EndDate=a.StateDate or b.StateDate=a.EndDate or b.EndDate=a.EndDate)) as c outer apply (select 'Exists' as ExistsInterval from CRMFollowSet d where d.id!=a.id and ((d.StateDate&gt;a.StateDate and a.EndDate&gt;d.StateDate) or (d.EndDate&lt;a.EndDate and a.StateDate&lt;d.EndDate))) as e where a.id=@ValueofDB:CRMFollowSet_id</select>
		</condition>
		<!-- 结束天数必须大于开始天数 -->
		<exec condition="@SqlReturn:StateDate&gt;= @SqlReturn:EndDate">
			<error>AccountAge.Add.error</error>
		</exec>	 
		<!-- 开始天数和结束天数都必须大于0 -->
		<exec condition="@SqlReturn:StateDate&lt;0||@SqlReturn:EndDate&lt;0">
			<error>AccountAge.days.error</error>
		</exec>	
		<!-- 账龄期不能够交叉重复 -->
		<exec condition="&quot;@SqlReturn:ExistsEqual&quot;==&quot;Exists&quot;||&quot;@SqlReturn:ExistsInterval&quot;==&quot;Exists&quot;">
			<error>Follow.days.repeat.error</error>
		</exec>
	</sql>
</define>	

<!-- 行政区域设置操作 -->
<define name="tblDistrict_operate">
	<sql type="condition">
		<condition>
		</condition>
		<!-- 增加修改操作 -->
		<exec condition="&quot;@Sess:BillOper&quot;==&quot;add&quot; || &quot;@Sess:BillOper&quot;==&quot;update&quot;">	
			<sql type="define">tblDistrict_add_update</sql>
		</exec>
		<!-- 删除操作 -->
		<exec condition="&quot;@Sess:BillOper&quot;==&quot;delete&quot;">	
			<sql type="define">tblDistrict_delete</sql>
		</exec>
	</sql>
</define>

<define name="tblDistrict_add_update">
	<sql type="condition">
		<condition>
			<select>select 'ExistError1' as ExistError1 from tblDistrict where (len(@ValueofDB:tblDistrict_classCode)&gt;5 and len(classCode)=len(@ValueofDB:tblDistrict_classCode) and substring(classCode,1,len(classCode)-5)=substring(@ValueofDB:tblDistrict_classCode,1,len(@ValueofDB:tblDistrict_classCode)-5)) or (len(@ValueofDB:tblDistrict_classCode)=5 and len(classCode)=5) group by District having count(*)&gt;1</select>
		</condition>
		<!-- 同级区域不可重名 -->
		<exec condition="&quot;@SqlReturn:ExistError1&quot;==&quot;ExistError1&quot;">
			<error>tblDistrict.add.ExistError1</error>
		</exec>
	</sql>
	
	<!-- 更新tblDistrict物理表(省市区全称) -->
	<sql type="condition">
		<condition>
			<select>select Country,province,city,area,street,(Country +case when len(province)&gt;0 then '-'+province else '' end +case when len(city)&gt;0 then '-'+city else '' end+case when len(area)&gt;0 then '-'+area else '' end+case when len(street)&gt;0 then '-'+street else '' end) as districtFullName from ViewDistrict where classCode = @ValueofDB:tblDistrict_classCode</select>
		</condition>
		<exec condition="true">
			<sql>update tblDistrict set Country=''+@SqlReturn:Country+'',province=''+@SqlReturn:province+'',city=''+@SqlReturn:city+'',area=''+@SqlReturn:area+'',districtFullName=''+@SqlReturn:districtFullName+'' where classCode = @ValueofDB:tblDistrict_classCode</sql>
		</exec>
	</sql>
	
</define>

<define name="tblDistrict_delete">
	<sql type="condition">
		<condition>
			<select>select 'ExistErrorUsed' as ExistErrorUsed from tblDistrict where id=@ValueofDB:tblDistrict_id 
						and classCode in (
								select isNULL(District,'') from tblEmpDistrictDet
								union all
								select isNULL(District,'') from CRMClientInfo
								)</select>
		</condition>
		<!-- 区域被引用，则不允许删除 -->
		<exec condition="&quot;@SqlReturn:ExistErrorUsed&quot;==&quot;ExistErrorUsed&quot;">
			<error>tblDistrict.del.ExistErrorUsed</error>
		</exec>
	</sql>
</define>

<!-- 职员管辖区域设置操作 -->
<define name="tblEmpDistrict_add_update">
	<sql type="condition">
		<condition>
			<select>select 'ExistErrorNoDistrict' as ExistErrorNoDistrict from tblEmpDistrictDet where f_ref=@ValueofDB:tblEmpDistrict_id and BusinessDistrict=''</select>
		</condition>
		<!-- 业务区域不能为空 -->
		<exec condition="&quot;@SqlReturn:ExistErrorNoDistrict&quot;==&quot;ExistErrorNoDistrict&quot;">
			<error>tblEmpDistrict.operate.ExistErrorNoDistrict</error>
		</exec>
	</sql>
	<sql type="condition">
		<condition>
			<!--<select>select 'ExistError1' as ExistError1 from tblEmpDistrictDet a where f_ref=@ValueofDB:tblEmpDistrict_id and exists (select * from tblEmpDistrictDet where f_ref=a.f_ref and id!=a.id and District like a.District+'%')</select>-->
			<select>select 'ExistError1' as ExistError1 from tblEmpDistrictDet a where f_ref=@ValueofDB:tblEmpDistrict_id and exists (select * from tblEmpDistrictDet where f_ref=a.f_ref and id!=a.id and BusinessDistrict=a.BusinessDistrict)</select>
		</condition>
		<!-- 同一职员的管辖区域不能有重复 -->
		<exec condition="&quot;@SqlReturn:ExistError1&quot;==&quot;ExistError1&quot;">
			<error>tblEmpDistrict.operate.ExistError1</error>
		</exec>
	</sql>
</define>

<!-- 职员管辖区域设置操作 -->
<define name="tblEmpDistrict_operate">
	<sql type="condition">
		<condition>
		</condition>
		<!-- 增加修改操作 -->
		<exec condition="&quot;@Sess:BillOper&quot;==&quot;add&quot; || &quot;@Sess:BillOper&quot;==&quot;update&quot;">	
			<sql type="define">tblEmpDistrict_add_update</sql>
		</exec>
	</sql>
</define>

<!-- 意向客户数设置操作 -->
<define name="tblWillCustomerQty_operate">
	<sql type="condition">
		<condition>
		</condition>
		<!-- 增加修改操作 -->
		<exec condition="&quot;@Sess:BillOper&quot;==&quot;add&quot; || &quot;@Sess:BillOper&quot;==&quot;update&quot;">	
			<sql type="define">tblWillCustomerQty_add_update</sql>
		</exec>
	</sql>
</define>

<define name="tblWillCustomerQty_add_update">
	<sql type="condition">
		<condition>
			<select>select 'ExistError1' as ExistError1 from tblWillCustomerQty where id=@ValueofDB:tblWillCustomerQty_id and WillQty&lt;=0</select>
		</condition>
		<!-- 意向数量必须大于0 -->
		<exec condition="&quot;@SqlReturn:ExistError1&quot;==&quot;ExistError1&quot;">
			<error>tblWillCustomerQty.operate.ExistError1</error>
		</exec>
	</sql>
</define>

<!-- 意向客户数设置操作 -->
<define name="tblObjectCustomerQty_operate">
	<sql type="condition">
		<condition>
		</condition>
		<!-- 增加修改操作 -->
		<exec condition="&quot;@Sess:BillOper&quot;==&quot;add&quot; || &quot;@Sess:BillOper&quot;==&quot;update&quot;">	
			<sql type="define">tblObjectCustomerQty_add_update</sql>
		</exec>
	</sql>
</define>
<define name="tblObjectCustomerQty_add_update">
	<sql type="condition">
		<condition>
			<select>select 'ExistError1' as ExistError1 from tblObjectCustomerQty where id=@ValueofDB:tblObjectCustomerQty_id and ObjectQty&lt;=0</select>
		</condition>
		<!-- 意向数量必须大于0 -->
		<exec condition="&quot;@SqlReturn:ExistError1&quot;==&quot;ExistError1&quot;">
			<error>tblObjectCustomerQty.operate.ExistError1</error>
		</exec>
	</sql>
</define>

<define name="CRMClientInfo_add_update">
	<sql type="condition">
		<condition><select>select count(0) as yxqc from tblDBFieldInfo WHERE fieldName='yxq'</select></condition>
		<exec condition="@SqlReturn:yxqc&gt;0&amp;&amp;'@ValueofDB:sfzh'.length!=18">
			<error>身份证号必须为18位</error>
		</exec>

	</sql>
	<sql type="condition">
		<condition>
			<select>select 'ExistErrorNameUnique' as ExistErrorNameUnique from CRMClientInfo where id!=@ValueofDB:CRMClientInfo_id and ClientName=(select ClientName from CRMClientInfo where id=@ValueofDB:CRMClientInfo_id)</select>
		</condition>
		<!-- 客户名称是否唯一 -->
    <exec condition="&quot;@SqlReturn:ExistErrorNameUnique&quot;==&quot;ExistErrorNameUnique&quot; &amp;&amp; &quot;@MEM:CRMClientInfoName&quot;==&quot;true&quot;">
      <error>CRMClientInfo.add.ExistErrorNameUnique</error>
    </exec>

  </sql>
	<sql type="condition">
		<condition>
			<select>select 'ExistError2' as ExistError2 from CRMClientInfo where id=@ValueofDB:CRMClientInfo_id and @MEM:InputKeyword='true' and Keywords=''</select>
		</condition>
		<!-- 系统配置启用了必须录入关键字 
		<exec condition="&quot;@SqlReturn:ExistError2&quot;==&quot;ExistError2&quot;">
			<error>CRMClientInfo.add.ExistError2</error>
		</exec>
		-->
	</sql>
	<sql type="condition">
		<condition>
			<select>select 'ExistError1' as ExistError1 from CRMClientInfo where id=@ValueofDB:CRMClientInfo_id and Keywords!='' and (len(Keywords)&lt;2 or len(Keywords)&gt;4)</select>
		</condition>
		<!-- 关键字数必须为2-4个
		<exec condition="&quot;@SqlReturn:ExistError1&quot;==&quot;ExistError1&quot;">
			<error>CRMClientInfo.add.ExistError1</error>
		</exec>
		 -->
	</sql>
	<sql type="condition">
		<condition>
			<select>select 'ExistError3' as ExistError3 from CRMClientInfo where id=@ValueofDB:CRMClientInfo_id and ClientName not like '%'+Keywords+'%' and @MEM:InputKeyword='true' and @ValueofDB:CRMClientInfo_ClientType!='4'</select>
		</condition>
		<!-- 关键字与客户名称不匹配 
		<exec condition="&quot;@SqlReturn:ExistError3&quot;==&quot;ExistError3&quot;">
			<error>CRMClientInfo.add.ExistError3</error>
		</exec>
		-->
	</sql>
	<sql type="condition">
		<condition>
			<select>select 'ExistErrorAddress' as ExistErrorAddress from CRMClientInfo where id!=@ValueofDB:CRMClientInfo_id and Address=(select Address from CRMClientInfo where id=@ValueofDB:CRMClientInfo_id) and Address!=''</select>
		</condition>
		<!-- 客户地址是否唯一 
		<exec condition="&quot;@SqlReturn:ExistErrorAddress&quot;==&quot;ExistErrorAddress&quot; &amp;&amp; &quot;@MEM:CRMClientInfoAddress&quot;==&quot;true&quot;">
			<error>CRMClientInfo.add.ExistErrorAddress</error>
		</exec>
		-->
	</sql>
	<sql type="condition">
		<condition>
			<select>select 'ExistError4' as ExistError4,a.ClientName as ClientName,b.EmpFullName as Employee,c.DeptFullName as Department,case when len(isnull(a.Address,''))=0 then ' ' else a.Address end as Address,a.Keywords as Keywords From CRMClientInfo a left join tblEmployee b on b.id=a.createBy left join tblDepartment c on c.classCode=b.DepartmentCode where ClientName like '%'+(select Keywords from CRMClientInfo where id=@ValueofDB:CRMClientInfo_id)+'%' and a.id!=@ValueofDB:CRMClientInfo_id and @Sess:UserId!='1' and @ValueofDB:CRMClientInfo_ClientType!='4' and a.Keywords=(select Keywords from CRMClientInfo where id=@ValueofDB:CRMClientInfo_id and a.BusinessDistrict=CRMClientInfo.BusinessDistrict) and @MEM:InputKeyword='true'</select>
		</condition>
		<!-- 关键字有冲突 -->
		<exec condition="&quot;@SqlReturn:ExistError4&quot;==&quot;ExistError4&quot;">
		<error>CRMClientInfo.add.Rekeyword,@SqlReturn:Department @SqlReturn:Employee,@SqlReturn:ClientName,@SqlReturn:Address</error>
			<!-- <error>CRMClientInfo.add.ExistError4,@SqlReturn:ClientName,@SqlReturn:Department,@SqlReturn:Employee</error>-->
		</exec>
	</sql>
	<sql type="condition">
		<condition>
			<!--<select>select 'ExistErrorNameContactor' as ExistErrorNameContactor from CRMClientInfoDet a where f_ref=@ValueofDB:CRMClientInfo_id and exists (select * from CRMClientInfoDet where f_ref!=@ValueofDB:CRMClientInfo_id and UserName=a.UserName and Mobile=a.Mobile)</select>-->
			<select>select 'ExistErrorNameContactor' as ExistErrorNameContactor,a.ClientName as ClientName,b.EmpFullName as Employee,c.DeptFullName as Department,case when len(isnull(a.Address,''))=0 then ' ' else a.Address end as Address From CRMClientInfoDet f left join CRMClientInfo a  on a.id=f.f_ref left join tblEmployee b on b.id=a.createBy left join tblDepartment c on c.classCode=b.DepartmentCode where  exists (select * from CRMClientInfoDet where f_ref=@ValueofDB:CRMClientInfo_id and len(isNull(Mobile,''))&gt;0 and Mobile=f.Mobile) and f_ref!=@ValueofDB:CRMClientInfo_id</select>
		</condition>
		<!-- 客户联系人及手机是否唯一 
		<exec condition="&quot;@SqlReturn:ExistErrorNameContactor&quot;==&quot;ExistErrorNameContactor&quot; &amp;&amp; &quot;@MEM:CRMClientInfoContactor&quot;==&quot;true&quot;">
			<error>CRMClientInfo.add.ExistErrorNameContactor,@SqlReturn:Department,@SqlReturn:Employee,@SqlReturn:ClientName</error>
		</exec>
		-->
	</sql>
	<sql type="condition">
		<condition>
			<select>select 'ExistErrorNoUserName' as ExistErrorNoUserName from CRMClientInfoDet where f_ref=@ValueofDB:CRMClientInfo_id and UserName=''</select>
		</condition>
		<!-- 联系人名称不能为空 
		<exec condition="&quot;@SqlReturn:ExistErrorNoUserName&quot;==&quot;ExistErrorNoUserName&quot;">
			<error>CRMClientInfo.operate.ExistErrorNoUserName</error>
		</exec>
		-->
	</sql>
	<!--<sql type="condition">
		<condition>
			<select>select 'ExistError5' as ExistError5,X.RelationMain as RelationMan,X.Mobile as Mobile from (select a.id as ID,isNULL(b.UserName,'') as RelationMain,isNULL(b.Mobile,'') as Mobile from CRMClientInfo a left join CRMClientInfoDet b on b.f_ref=a.id where a.id=@ValueofDB:CRMClientInfo_id and a.ClientType='4' and @Sess:UserId!='1') as X cross apply (select 'Exist' as Exist from CRMClientInfoDet a where a.f_ref!=X.id and a.UserName=X.RelationMain and a.Mobile=X.Mobile) as Y</select>
		</condition>
		<exec condition="&quot;@SqlReturn:ExistError5&quot;==&quot;ExistError5&quot;">
			<error>CRMClientInfo.add.ExistError5,@SqlReturn:RelationMan,@SqlReturn:Mobile</error>
		</exec>
	</sql>-->
	<sql type="condition">
		<condition>
			<select>select 'NoEmergencyExist' as NoEmergencyExist from CRMClientInfo where id=@ValueofDB:CRMClientInfo_id and Emergency='1'</select>
		</condition>
		<!-- 非紧急则清空紧急原因 -->
		<exec condition="&quot;@SqlReturn:NoEmergencyExist&quot;==&quot;NoEmergencyExist&quot;">
			<sql>update CRMClientInfo set EmergentWhy='' where id=@ValueofDB:CRMClientInfo_id</sql>
		</exec>
	</sql>
	
	<sql type="condition">
		<condition>
			<select>select departmentCode,id from tblEmployee where id= (select createby from CRMClientInfo where id=@ValueofDB:CRMClientInfo_id)</select>
			<select>select count(0) as yxqc from tblDBFieldInfo WHERE fieldName='yxq'</select>
		</condition>
		<!-- 更新客户部门字段 -->
		<exec condition="true">
			<sql>update CRMClientInfo set departMentCode=@SqlReturn:departmentCode where id=@ValueofDB:CRMClientInfo_id</sql>
		</exec>
		<exec condition="@SqlReturn:yxqc&gt;0">
			<sql>update CRMClientInfo set yxq=(select top 1 id from CRMClientInfoDet where f_ref=CRMClientInfo.id and mainUser=1) where id=@ValueofDB:CRMClientInfo_id</sql>
		</exec>
	</sql>
	
	<!--
	<sql type="condition">
		<condition>
			<select>select 'EmergencyExist' as EmergencyExist from CRMClientInfo where id=@ValueofDB:CRMClientInfo_id and Emergency!='1' and EmergentWhy=''</select>
		</condition>
		 紧急则必须录入紧急原因 
		<exec condition="&quot;@SqlReturn:EmergencyExist&quot;==&quot;EmergencyExist&quot;">
			<error>CRMClientInfo.operate.EmergencyExist</error>
		</exec>
	</sql>
	-->
	<sql type="condition">
		<!-- 插入跟单人 -->
		<exec condition="true">
		<sql>insert into CRMClientInfoEmp(id,f_ref,DepartmentCode,EmployeeID,SCompanyID) select lower(substring(replace(newid(),'-',''),1,28)),@ValueofDB:CRMClientInfo_id,(select DepartmentCode from tblEmployee where id=@Sess:UserId),@Sess:UserId,@Sess:SCompanyID where not exists(select * from CRMClientInfoEmp where f_ref=@ValueofDB:CRMClientInfo_id and EmployeeID=@Sess:UserId)</sql>
		</exec>
	</sql>

	<sql type="condition">
		<condition>
			<select>select 'ExistErrorFollowerRepeat' as ExistErrorFollowerRepeat from CRMClientInfoEmp where f_ref=@ValueofDB:CRMClientInfo_id group by EmployeeID having count(*)&gt;1</select>
			<select>select substring(createTime,0,11) as billDate from CRMClientInfo where id=@ValueofDB:id</select>
			<select>select count(id) as isShare from CRMClientInfoEmp where f_ref=@ValueofDB:id and employeeId!='1'</select>
			<select>select id as AdminId from CRMClientInfoEmp where f_ref=@ValueofDB:CRMClientInfo_id and EmployeeID = '1'</select>
		</condition>
		<!-- 跟单人不能有重复 
		<exec condition="&quot;@SqlReturn:ExistErrorFollowerRepeat&quot;==&quot;ExistErrorFollowerRepeat&quot;">
			<error>CRMClientInfo.operate.ExistErrorFollowerRepeat</error>
		</exec>
		-->
		<exec condition="&quot;@SqlReturn:AdminId&quot; != &quot;null&quot; &amp;&amp; &quot;@SqlReturn:AdminId&quot;.length != 0">
		<!--将admin排在第一位-->
		<sql>update CRMClientInfoEmp set id=(select substring(id,1,len(id)-3)+'000' from CRMClientInfoEmp where f_ref=@ValueofDB:CRMClientInfo_id and id=(select min(a.id) from CRMClientInfoEmp a where a.f_ref=@ValueofDB:CRMClientInfo_id)) where EmployeeID='1' and f_ref=@ValueofDB:CRMClientInfo_id</sql>
		</exec>
		
		<!-- 如果跟单人大于等于2人 即共享 -->
		<exec condition="@SqlReturn:isShare &gt; 1">
			<sql>update CRMClientInfo set shareFlag=1 where id=@ValueofDB:id</sql>
		</exec>
		<!-- 如果跟单人大于等于2人 即共享 -->
		<exec condition="@SqlReturn:isShare &lt; 2">
		<sql>update CRMClientInfo set shareFlag=0 where id=@ValueofDB:id</sql>
		</exec>
		<!--记录客户日志-->
		<exec condition="&quot;@Sess:BillOper&quot; == &quot;add&quot;">
			<sql>insert into CRMClientInfoLog(id,clientId,billType,context,createBy,createTime,relationId) values(@ValueofDB:id,@ValueofDB:id,'history',@SqlReturn:billDate+' '+@Sess:UserName+@Locale:common.lb.addClient,@Sess:UserId,@ValueofDB:createTime,@ValueofDB:id)</sql>
		</exec>
	</sql>
	<sql type="condition">
		<condition>
			<select>select 'ExistErrorBirthday' as ExistErrorBirthday from CRMClientInfoDet where f_ref=@ValueofDB:CRMClientInfo_id and BirthDay!='' and dateType=''</select>
			<select>select convert(varchar(10),case when datediff(day,getdate(),convert(varchar(4),year(getdate()),10)+'-'+substring(birthday,charindex('-',birthday)+1,len(birthday)-charindex('-',birthday)))&lt;=0 then convert(varchar(4),year(getdate())+1,10)+'-'+substring(birthday,charindex('-',birthday)+1,len(birthday)-charindex('-',birthday)) else convert(varchar(4),year(getdate()),10)+'-'+substring(birthday,charindex('-',birthday)+1,len(birthday)-charindex('-',birthday)) end) as yr from CRMClientInfoDet where len(birthday)&gt;5</select>
		</condition>
		<!-- 输入了生日，则必须填入日期类型 -->
		<exec condition="&quot;@SqlReturn:ExistErrorBirthday&quot;==&quot;ExistErrorBirthday&quot;">
			<error>CRMClientInfo.add.ExistErrorBirthday</error>
		</exec>
		<exec condition="true">
			<sql type="procedure">
			{call proc_iterateExeProc(select id as id@SPFieldLink:substring(replace(newid()@SPFieldLink:'-'@SPFieldLink:'')@SPFieldLink:1@SPFieldLink:30) as ContactNo from CRMClientInfoDet where (ContactNo='' or ContactNo is NULL) and f_ref='@ValueofDB:CRMClientInfo_id',proc_update,'CRMClientInfoDet'@ParamLink:'ContactNo='+@ContactNo+''@ParamLink:'id='+@id,retCode,retVal)}
			</sql>
			<sql type="procedure">
			{call proc_iterateExeProc(select substring(replace(newid()@SPFieldLink:'-'@SPFieldLink:'')@SPFieldLink:1@SPFieldLink:30) as id@SPFieldLink:a.SCompanyID as SCompanyID@SPFieldLink:a.createBy as createBy@SPFieldLink:a.createTime as createTime@SPFieldLink:a.lastUpdateBy as lastUpdateBy@SPFieldLink:a.lastUpdateTime as lastUpdateTime@SPFieldLink:a.id as ClientId@SPFieldLink:b.ContactNo as UserName from CRMClientInfo a left join CRMClientInfoDet b on b.f_ref=a.id where not exists (select * from CRMMemoryDay where ClientId=a.id and mainUser=b.ContactNo) and b.id is not null and a.id='@ValueofDB:CRMClientInfo_id',proc_insert,'CRMMemoryDay'@ParamLink:'id='+@id+'@SPFieldLink:f_brother='+@ClientId+'@SPFieldLink:workFlowNodeName=notApprove@SPFieldLink:ClientId='+@ClientId+'@SPFieldLink:SCompanyID='+@SCompanyID+'@SPFieldLink:createBy='+@createBy+'@SPFieldLink:createTime='+@createTime+'@SPFieldLink:lastUpdateBy='+@lastUpdateBy+'@SPFieldLink:lastUpdateTime='+@lastUpdateTime+'@SPFieldLink:mainUser='+@UserName,retCode,retVal)}
			</sql>
			<sql>delete from CRMMemoryDayDet where f_ref in (select id from CRMMemoryDay where ClientId=@ValueofDB:CRMClientInfo_id) and MemoryType='1'</sql>
			<sql type="procedure">
			{call proc_iterateExeProc(select lower(substring(replace(newid()@SPFieldLink:'-'@SPFieldLink:'')@SPFieldLink:1@SPFieldLink:28)) as id@SPFieldLink:b.id as f_ref@SPFieldLink:'1' as MemoryType@SPFieldLink:(case when a.dateType='' or a.dateType is NULL then '1' else a.dateType end) as dateType@SPFieldLink:a.BirthDay as BirthDay@SPFieldLink:b.SCompanyID as SCompanyID@SPFieldLink:(convert(varchar(10)@SPFieldLink:case when datediff(day@SPFieldLink:getdate()@SPFieldLink:convert(varchar(4)@SPFieldLink:year(getdate())@SPFieldLink:10)+'-'+substring(a.birthday@SPFieldLink:charindex('-'@SPFieldLink:a.birthday)+1@SPFieldLink:len(a.birthday)-charindex('-'@SPFieldLink:a.birthday)))&lt;=0 then convert(varchar(4)@SPFieldLink:year(getdate())+1@SPFieldLink:10)+'-'+substring(a.birthday@SPFieldLink:charindex('-'@SPFieldLink:a.birthday)+1@SPFieldLink:len(a.birthday)-charindex('-'@SPFieldLink:a.birthday)) else convert(varchar(4)@SPFieldLink:year(getdate())@SPFieldLink:10)+'-'+substring(a.birthday@SPFieldLink:charindex('-'@SPFieldLink:a.birthday)+1@SPFieldLink:len(a.birthday)-charindex('-'@SPFieldLink:a.birthday)) end)) as yyrr from CRMClientInfoDet a@SPFieldLink:CRMMemoryDay b where b.ClientId=a.f_ref and b.mainUser=a.ContactNo and a.BirthDay!='' and a.f_ref='@ValueofDB:CRMClientInfo_id',proc_insert,'CRMMemoryDayDet'@ParamLink:'id='+@id+'@SPFieldLink:f_ref='+@f_ref+'@SPFieldLink:MemoryType='+@MemoryType+'@SPFieldLink:SCompanyID='+@SCompanyID+'@SPFieldLink:dateType='+@dateType+'@SPFieldLink:Date='+@BirthDay+'@SPFieldLink:nextDate='+@yyrr+'',retCode,retVal)}
			</sql>
			<sql>delete from CRMMemoryDay where ClientId=@ValueofDB:CRMClientInfo_id and not exists(select * from CRMMemoryDayDet where f_ref=CRMMemoryDay.id)</sql>
			<sql>delete from CRMMemoryDay where ClientId=@ValueofDB:CRMClientInfo_id and not exists(select * from CRMClientInfoDet where ContactNo=CRMMemoryDay.mainUser)</sql>
		</exec>
	</sql>
	<sql type="condition">
		<condition>
			<select>select workflow from CRMClientModule where id in(select moduleId from CRMClientInfo where id=@ValueofDB:CRMClientInfo_id)</select>
		</condition>
		<!-- 客户模板启用了工作流 不能直接转为成交客户 -->
		<exec condition="&quot;@SqlReturn:workflow&quot;==&quot;1&quot; &amp;&amp; &quot;@ValueofDB:CRMClientInfo_Status&quot;==&quot;4&quot;">
			<error>CRMClientInfo.add.workflow</error>
		</exec>
	</sql>
	<!--=========================贷款平台代码更新========================-->
	<sql type="condition">
		<condition>
			<select>select COUNT(0) as bfsfzhC from tblDBFieldInfo WHERE tableId=(select id from tblDBTableInfo where tableName='CRMClientInfo') and fieldName like 'bfsfzh'</select>
			<select>select COUNT(0) as bfzhC from tblDBFieldInfo WHERE tableId=(select id from tblDBTableInfo where tableName='CRMClientInfoDet') and fieldName like 'bfzh'</select>
		</condition>
		<exec condition="@SqlReturn:bfsfzhC&gt;0&amp;&amp;'@ValueofDB:sfzh'.length&gt;0">
			<sql>update CRMClientInfo set bfsfzh=SUBSTRING(sfzh,1,4)+'**********'+SUBSTRING(sfzh,LEN(sfzh)-3,4) where id=@ValueofDB:CRMClientInfo_id</sql>
		</exec>
		<exec condition="@SqlReturn:bfzhC&gt;0">
			<sql>update CRMClientInfoDet set bfzh='**********'+SUBSTRING(zhanghao,LEN(zhanghao)-3,4) where f_ref=@ValueofDB:CRMClientInfo_id and len(zhanghao)&gt;0</sql>
		</exec>
	</sql>
	
</define>

<define name="CheckManageDistrictRight">
	<sql type="condition">
		<condition>
			<!--<select>select (case when Y.District is NULL then 'ExistError6' else 'null' end) as ExistError6 from (select District from CRMClientInfo a where id=@ValueofDB:CRMClientInfo_id and Status!=1) as X outer apply (select b.District as District from tblEmpDistrict a left join tblEmpDistrictDet b on b.f_ref=a.id where a.EmployeeID=@Sess:UserId and X.District like b.District+'%') as Y where @Sess:UserId!='1' and @MEM:ManageDistrict='true'</select>-->
			<select>select (case when Y.BusinessDistrict is NULL then 'ExistError6' else 'null' end) as ExistError6 from (select BusinessDistrict from CRMClientInfo a where id=@ValueofDB:CRMClientInfo_id and len(BusinessDistrict)!=0) as X outer apply (select b.BusinessDistrict as BusinessDistrict from tblEmpDistrict a left join tblEmpDistrictDet b on b.f_ref=a.id where a.EmployeeID=@Sess:UserId and X.BusinessDistrict=b.BusinessDistrict) as Y where @Sess:UserId!='1' and @MEM:ManageDistrict='true'</select>
			<select>select top 1 isnull(EmpFullName,'null') as EMPname from CRMClientInfo left join CRMClientInfoEmp on CRMClientInfoEmp.f_ref=CRMClientInfo.id left join tblemployee on tblemployee.id=CRMClientInfoEmp.EmployeeID where CRMClientInfoEmp.EmployeeID not in (select b.employeeID from tblEmpDistrictDet a left join tblEmpDistrict  b on a.f_ref=b.id and CRMClientInfo.businessDistrict=a.businessDistrict and CRMClientInfo.businessDistrict=@ValueofDB:CRMClientInfo_BusinessDistrict) and   CRMClientInfo.id=@ValueofDB:CRMClientInfo_id and CRMClientInfo.businessDistrict=@ValueofDB:CRMClientInfo_BusinessDistrict and @MEM:ManageDistrict='true' and CRMClientInfoEmp.EmployeeID!='1'</select>
		</condition>
		<!-- 没有权限管理此区域的客户 -->
		<exec condition="&quot;@SqlReturn:ExistError6&quot;==&quot;ExistError6&quot;">
			<error>CRMClientInfo.add.ExistError6</error>
		</exec>
				<!-- 跟单人没有权限管理此区域的客户 -->
		<exec condition="&quot;@SqlReturn:EMPname&quot;!=&quot;null&quot;">
			<error>CRMClientInfo.addEmp.ExistError,@SqlReturn:EMPname</error>
		</exec>
	</sql>
</define>

<!-- 客户模板启用审核流后 审核通过后，把生命周期转为成交客户-->
<define name="Define_CRMClient_Flow">
	<sql type="condition">
		<condition>
		</condition>
		<exec condition="true">	
			<sql>update CRMClientInfo set Status='4' where id=@ValueofDB:CRMClientInfo_id</sql>
		</exec>
	</sql>
</define>

<!-- 客户资料 添加操作 -->
<define name="CRMClientInfo_add">
	<sql type="condition">
		<condition>
		</condition>
		<!-- 增加修改操作 -->
		<exec condition="true">	
			<sql type="define">CRMClientInfo_add_update</sql>
		</exec>
	</sql>
	<sql type="condition">
		<condition>
			<select>select 'ExistError7' as ExistError7 where (((select count(*) from CRMClientInfo where id in (select distinct f_ref from CRMClientInfoEmp where EmployeeID=@Sess:UserId) and Status='3')&gt;@MEM:WillQtyDefault and not exists (select * from tblWillCustomerQty where EmployeeID=@Sess:UserId)) or (((select count(*) from CRMClientInfo where id in (select distinct f_ref from CRMClientInfoEmp where EmployeeID=@Sess:UserId) and Status='3')&gt;(select WillQty from tblWillCustomerQty where EmployeeID=@Sess:UserId)) and exists (select * from tblWillCustomerQty where EmployeeID=@Sess:UserId))) and @Sess:UserId!='1' and @ValueofDB:CRMClientInfo_Status='3'</select>
		</condition>
		<!-- 意向客户数大于该职员的意向客户设定数 -->
		<exec condition="&quot;@SqlReturn:ExistError7&quot;==&quot;ExistError7&quot; &amp;&amp; &quot;@MEM:WillQty&quot;==&quot;true&quot;">
			<error>CRMClientInfo.add.ExistError7</error>
		</exec>
	</sql>
	<sql type="condition">
		<condition>
		<select>select 'MoreObjectQty' as MoreObjectQty where (((select count(*) from CRMClientInfo where id in (select distinct f_ref from CRMClientInfoEmp where EmployeeID=@Sess:UserId) and Status='2')&gt;@MEM:ObjectQtyDefault and not exists (select * from tblObjectCustomerQty where EmployeeID=@Sess:UserId)) or (((select count(*) from CRMClientInfo where id in (select distinct f_ref from CRMClientInfoEmp where EmployeeID=@Sess:UserId) and Status='2')&gt;(select ObjectQty from tblObjectCustomerQty where EmployeeID=@Sess:UserId)) and exists (select * from tblObjectCustomerQty where EmployeeID=@Sess:UserId))) and @Sess:UserId!='1' and @ValueofDB:CRMClientInfo_Status='2'</select>
		<select>select count(id) as mainUserNum from CRMClientInfoDet where f_ref=@ValueofDB:CRMClientInfo_id and mainUser=1</select>
		<select>select count(id) as UserNum from CRMClientInfoDet where f_ref=@ValueofDB:CRMClientInfo_id</select>
		</condition>
		<!-- 意向客户数大于该职员的意向客户设定数 -->
		<exec condition="&quot;@SqlReturn:MoreObjectQty&quot;==&quot;MoreObjectQty&quot; &amp;&amp; &quot;@MEM:ObjectQty&quot;==&quot;true&quot;">
			<error>Beyond.ObjectQty.error</error>
		</exec>
		
		<exec condition="@SqlReturn:UserNum &gt; 0 &amp;&amp; @SqlReturn:mainUserNum == 0">
		<sql>update CRMClientInfoDet set mainUser=1 where id=(select top 1 id from CRMClientInfoDet where f_ref=@ValueofDB:CRMClientInfo_id order by id)</sql>
		</exec>
		<!--有下次跟单时间时向销售跟单插入记录-->
		<exec condition="&quot;@MEM:CRMSaleFollowUp_IsStatart&quot; == &quot;0&quot; &amp;&amp;&quot;@ValueofDB:CRMClientInfo_NextFollowTime&quot;.length != 0 &amp;&amp; &quot;@Sess:BillOper&quot;==&quot;add&quot;">
		<sql>insert into CRMSaleFollowUp(id,FollowNo,f_brother,workFlowNode,workFlowNodeName,checkPersons,EmployeeID,DepartmentCode,VisitDate,VisitMethod,Content,NextVisitTime,VisitTime,createTime,lastUpdateTime,createBy,lastUpdateBy,statusID,SCompanyID,FollowPhase,ClientID,GenWorkPlan,IsSMS,IsMessage,IsMail,AlertTime,FollowStatus) 
		select lower(substring(replace(newid(),'-',''),1,28)) as id,@CODE:[SF@y2@M@d@id4SF@],CRMClientinfo.id as f_brother,'-1' as workFlowNode,'finish' as workFlowNodeName,'' as checkPersons,CRMClientInfoEmp.EmployeeID,CRMClientInfoEmp.DepartmentCode,CRMClientinfo.NextFollowTime as VisitDate,'1' as VisitMethod,'' as Content,CRMClientinfo.NextFollowTime as NextVisitTime,CRMClientinfo.NextFollowTime as VisitTime,CRMClientinfo.createTime,CRMClientinfo.lastUpdateTime,CRMClientInfoEmp.EmployeeID as createBy,CRMClientInfoEmp.EmployeeID as lastUpdateBy,0 as statusID,CRMClientinfo.SCompanyID,'1' as FollowPhase,CRMClientinfo.id as ClientID,'2' as GenWorkPlan,'2' as IsSMS,'2' as IsMessage,'2' as IsMail,0 as AlertTime,'' as FollowStatus from CRMClientinfo
join CRMClientInfoEmp on CRMClientinfo.id=CRMClientInfoEmp.f_ref where CRMClientinfo.id=@ValueofDB:CRMClientInfo_id</sql>
		</exec>
		<!--有下次跟单时间时向销售跟单插入记录 销售跟单启用审核流-->
		<exec condition="&quot;@MEM:CRMSaleFollowUp_IsStatart&quot; == &quot;1&quot; &amp;&amp;&quot;@ValueofDB:CRMClientInfo_NextFollowTime&quot;.length != 0 &amp;&amp; &quot;@Sess:BillOper&quot;==&quot;add&quot;">
		<sql>insert into CRMSaleFollowUp(id,FollowNo,f_brother,workFlowNode,workFlowNodeName,checkPersons,EmployeeID,DepartmentCode,VisitDate,VisitMethod,Content,NextVisitTime,VisitTime,createTime,lastUpdateTime,createBy,lastUpdateBy,statusID,SCompanyID,FollowPhase,ClientID,GenWorkPlan,IsSMS,IsMessage,IsMail,AlertTime,FollowStatus) 
		select lower(substring(replace(newid(),'-',''),1,28)) as id,@CODE:[SF@y2@M@d@id4SF@],CRMClientinfo.id as f_brother,'0' as workFlowNode,'notApprove' as workFlowNodeName,';'+@Sess:UserId+';' as checkPersons,CRMClientInfoEmp.EmployeeID,CRMClientInfoEmp.DepartmentCode,CRMClientinfo.NextFollowTime as VisitDate,'1' as VisitMethod,'' as Content,CRMClientinfo.NextFollowTime as NextVisitTime,CRMClientinfo.NextFollowTime as VisitTime,CRMClientinfo.createTime,CRMClientinfo.lastUpdateTime,CRMClientInfoEmp.EmployeeID as createBy,CRMClientInfoEmp.EmployeeID as lastUpdateBy,0 as statusID,CRMClientinfo.SCompanyID,'1' as FollowPhase,CRMClientinfo.id as ClientID,'2' as GenWorkPlan,'2' as IsSMS,'2' as IsMessage,'2' as IsMail,0 as AlertTime,'' as FollowStatus
from CRMClientinfo
join CRMClientInfoEmp on CRMClientinfo.id=CRMClientInfoEmp.f_ref where CRMClientinfo.id=@ValueofDB:CRMClientInfo_id</sql>
<sql>insert into OAMyWorkFlow(id,applyDate,applyType,tableName,keyId,createBy,checkPerson,currentNode,createtime,lastUpdatetime,nextNodeIds,departmentCode,statusId)
select 'w'+id,VisitDate,(select id from oaworkflowtemplate where templateFile='CRMSaleFollowUp'),'CRMSaleFollowUp',id,createBy,';'+@Sess:UserId+';',0,createtime,lastUpdatetime,'',(select departmentCode from tblEmployee a where a.id=CRMSaleFollowUp.CreateBy),0 from CRMSaleFollowUp where f_brother=@ValueofDB:CRMClientInfo_id</sql>
		</exec>
		<exec condition="&quot;@MEM:BillNoSequence&quot;==&quot;true&quot;&amp;&amp; &quot;@Sess:BillOper&quot;==&quot;add&quot;">  
		<sql>update tblCodeGenerate set curValue=curValue+1 where code='C'</sql>
		</exec>
	</sql>	

	
	
	<sql type="condition">
		<condition>
		</condition>
		<!-- 检查用户区域管理权限 -->
		<exec condition="true">	
			<sql type="define">CheckManageDistrictRight</sql>
		</exec>
	</sql>
	<!-- 更新上次联系时间为创建时间 -->
	<sql type="condition">
		<exec condition="&quot;@ValueofDB:CRMClientInfo_LastContractTime&quot; == &quot;&quot;">	
			<sql>update CRMClientInfo set LastContractTime=createTime where id=@ValueofDB:CRMClientInfo_id</sql>
		</exec>
	</sql>
	
	 <sql type="condition">
		<!-- 插入客户共享 -->
		<exec condition="true">
		<sql>insert into CRMShareClient(id,clientId,popedomUserIds,popedomDeptIds,popedomEmpGroupIds,popedomTitleIds) values(lower(substring(replace(newid(),'-',''),1,28)),@ValueofDB:CRMClientInfo_id,'','','','')</sql>
		</exec>
	</sql>
</define>
	
<define name="Transfer_define">
	<sql type="condition">
		<condition>
			<select>select Status from CRMClientInfo where id=@ValueofDB:CRMClientInfo_id</select>
		</condition>
		<!-- 更改转换时间和转换人 -->
		<exec condition="&quot;@SqlReturn:Status&quot;!=&quot;@ValueofDB:CRMClientInfo_Status&quot;">
			<sql>update CRMClientInfo set TransferDate=convert(varchar(10),getDate(),21),Transferer=@Sess:UserId where id=@ValueofDB:CRMClientInfo_id</sql>
		</exec>
	</sql>
</define>

<!-- 客户资料 修改操作前 -->
<define name="CRMClientInfo_update_before">
	<sql type="condition">
		<condition>
			<select>select 'ExistError8' as ExistError8 from CRMClientInfo where id=@ValueofDB:CRMClientInfo_id and Status=4 and (@ValueofDB:CRMClientInfo_Status='1' or @ValueofDB:CRMClientInfo_Status='2' or @ValueofDB:CRMClientInfo_Status='3') and @Sess:UserId!='1'</select>
			<!--<select>select Status from CRMClientInfo where id=@ValueofDB:CRMClientInfo_id</select>-->
		</condition>
		
		<!-- 成交客户不可以转换为其它客户状态 
		<exec condition="&quot;@SqlReturn:ExistError8&quot;==&quot;ExistError8&quot;">
			<error>CRMClientInfo.add.ToOtherStatus</error>
		</exec>
		-->
		<!-- 更改转换时间和转换人 -->
		<!--<exec condition="&quot;@SqlReturn:Status&quot;!=&quot;@ValueofDB:CRMClientInfo_Status&quot;">
			<sql>update CRMClientInfo set TransferDate=convert(varchar(10),getDate(),21),Transferer=@Sess:UserId where id=@ValueofDB:CRMClientInfo_id</sql>
		</exec>-->
	</sql>
	<sql type="condition">
		<condition>
			<select>select 'ExistError9' as ExistError9 from CRMClientInfo where id=@ValueofDB:CRMClientInfo_id and Status=1 and @ValueofDB:CRMClientInfo_Status!='1' and convert(varchar(10),getDate(),21)&lt;dateadd(day,convert(int,@MEM:ReturnPoolTime),TransferDate) and Transferer=@Sess:UserId and @Sess:UserId!='1'</select>
		</condition>
		<!-- 不能转换公共池客户为其它客户状态 -->
		<exec condition="&quot;@SqlReturn:ExistError9&quot;==&quot;ExistError9&quot;">
			<error>CRMClientInfo.add.ExistError9</error>
		</exec>
	</sql>
	<sql type="condition">
		<condition>
		</condition>
		<!-- 检查用户区域管理权限 -->
		<exec condition="true">	
			<sql type="define">CheckManageDistrictRight</sql>
		</exec>
	</sql>
	<!--<sql type="condition">
		<condition>
		</condition>-->
		<!-- 转换者 -->
		<!--<exec condition="true">	
			<sql type="define">Transfer_define</sql>
		</exec>
	</sql>-->
</define>

<!-- 客户资料 修改操作 -->
<define name="CRMClientInfo_update">
	<sql type="condition">
		<condition>
		</condition>
		<!-- 增加修改操作 -->
		<exec condition="true">	
			<sql type="define">CRMClientInfo_add_update</sql>
		</exec>
	</sql>
	
	<!-- 
	<sql type="condition">
		<condition>
			<select>select 'ExistError7' as ExistError7 from CRMClientInfo where (((select count(*) from CRMClientInfo where statusid!=-1 and id in (select distinct f_ref from CRMClientInfoEmp where EmployeeID=@Sess:UserId) and Status='3')&gt;@MEM:WillQtyDefault and not exists (select * from tblWillCustomerQty where EmployeeID=@Sess:UserId)) or (((select count(*) from CRMClientInfo where statusid!=-1 and id in (select distinct f_ref from CRMClientInfoEmp where EmployeeID=@Sess:UserId) and Status='3')&gt;(select WillQty from tblWillCustomerQty where EmployeeID=@Sess:UserId)) and exists (select * from tblWillCustomerQty where EmployeeID=@Sess:UserId))) and @Sess:UserId!='1' and @ValueofDB:CRMClientInfo_Status='3'</select>
		</condition>
		意向客户数大于该职员的意向客户设定数 
		<exec condition="&quot;@SqlReturn:ExistError7&quot;==&quot;ExistError7&quot; &amp;&amp; &quot;@MEM:WillQty&quot;==&quot;true&quot;">
			<error>CRMClientInfo.add.ExistError7</error>
		</exec>
	</sql>
	-->
	
	<sql type="condition">
		<condition>
			<select>select 'MoreObjectQty' as MoreObjectQty where (((select count(*) from CRMClientInfo where id in (select distinct f_ref from CRMClientInfoEmp where EmployeeID=@Sess:UserId) and Status='2')&gt;@MEM:ObjectQtyDefault and not exists (select * from tblObjectCustomerQty where EmployeeID=@Sess:UserId)) or (((select count(*) from CRMClientInfo where id in (select distinct f_ref from CRMClientInfoEmp where EmployeeID=@Sess:UserId) and Status='2')&gt;(select ObjectQty from tblObjectCustomerQty where EmployeeID=@Sess:UserId)) and exists (select * from tblObjectCustomerQty where EmployeeID=@Sess:UserId))) and @Sess:UserId!='1' and @ValueofDB:CRMClientInfo_Status='2'</select>
		<select>select count(id) as mainUserNum from CRMClientInfoDet where f_ref=@ValueofDB:CRMClientInfo_id and mainUser=1</select>
		<select>select count(id) as UserNum from CRMClientInfoDet where f_ref=@ValueofDB:CRMClientInfo_id</select>
		</condition>
		<!-- 目标客户数大于该职员的目标客户设定数 -->
		<exec condition="&quot;@SqlReturn:MoreObjectQty&quot;==&quot;MoreObjectQty&quot; &amp;&amp; &quot;@MEM:ObjectQty&quot;==&quot;true&quot;">
			<error>Beyond.ObjectQty.error</error>
		</exec>
		
		<exec condition="@SqlReturn:UserNum &gt; 0 &amp;&amp; @SqlReturn:mainUserNum == 0">
		<sql>update CRMClientInfoDet set mainUser=1 where id=(select top 1 id from CRMClientInfoDet where f_ref=@ValueofDB:CRMClientInfo_id order by id)</sql>
		</exec>
	</sql>	
	
	<sql type="condition">
		<condition>
		</condition>
		<!-- 检查用户区域管理权限 -->
		<exec condition="true">	
			<sql type="define">CheckManageDistrictRight</sql>
		</exec>
	</sql>
	
	<sql type="condition">
		<exec condition="true">
			<sql type="procedure">
			{call proc_updateCRMClientDistrict(@ValueofDB:CRMClientInfo_id,@Sess:BillOper,retCode,retVal)}
			</sql>
		</exec>
	</sql>
	
	<sql type="condition">
		<condition>
			<select>select substring(lastUpdateTime,0,11) as billDate from CRMClientInfo where id=@ValueofDB:id</select>
			<select>select lower(substring(replace(newid(),'-',''),1,28)) as newId</select>
		</condition>
		<exec condition="true">
			<sql>update CRMClientInfo set TransferDate=convert(varchar(10),getDate(),21),Transferer=@Sess:UserId where id=@ValueofDB:CRMClientInfo_id</sql>
		</exec>
		<!--记录客户日志-->
		<exec condition="&quot;@Sess:BillOper&quot; == &quot;update&quot;">
			<sql>insert into CRMClientInfoLog(id,clientId,billType,context,createBy,createTime,relationId) values(@SqlReturn:newId,@ValueofDB:id,'history',@SqlReturn:billDate+' '+@Sess:UserName+@Locale:CRM.difineCRM.UpdateClient,@Sess:UserId,@ValueofDB:lastUpdateTime,@ValueofDB:id)</sql>
		</exec>
	</sql>
	
	<!-- 更新发货状态操作 
	<sql type="condition">
		<exec condition="true">	
			<sql>update CRMClientInfo set fhzt='1' where id=@ValueofDB:CRMClientInfo_id</sql>
		</exec>
	</sql>
	-->
	
	
	
</define>

<!-- 客户资料 删除操作 -->
<define name="CRMClientInfo_del">
	<sql type="condition">
		<condition>
		<select>select NextFollowTime from CRMClientInfo where id=@ValueofDB:CRMClientInfo_id</select>
		</condition>
		<!-- 检查用户区域管理权限 -->
		<exec condition="true">	
			<sql type="define">CheckManageDistrictRight</sql>
		</exec>
		<!-- 删除客户移交里的记录 -->
		<exec condition="true">
			<sql>delete from CRMClientTransfer where ClientId=@ValueofDB:CRMClientInfo_id</sql>
		</exec>
		<!-- 删除客户关注的记录 -->
		<exec condition="true">
			<sql>delete from tblattention where OTopicId=@ValueofDB:CRMClientInfo_id</sql>
		</exec>
		<!-- 删除客户共享人记录 -->
		<exec condition="true">
			<sql>delete from CRMClientInfoEmp where f_ref=@ValueofDB:CRMClientInfo_id</sql>
		</exec>
		<!-- 删除客户共享表记录 -->
		<exec condition="true">
			<sql>delete from CRMShareClient where clientId=@ValueofDB:CRMClientInfo_id</sql>
		</exec>
		<!-- 删除客户通知消息记录 -->
		<exec condition="true">
			<sql>delete from tblAdvice where relationId=@ValueofDB:CRMClientInfo_id</sql>
		</exec>
		<!-- 删除客户历史记录 -->
		<exec condition="true">
			<sql>delete from CRMClientInfoRecord where clientId=@ValueofDB:CRMClientInfo_id</sql>
		</exec>
		
		<!--有下次跟单时间时向销售跟单插入记录-->
		<exec condition="&quot;@MEM:CRMSaleFollowUp_IsStatart&quot; == &quot;0&quot; &amp;&amp;&quot;@SqlReturn:NextFollowTime&quot;.length != 0 &amp;&amp; &quot;@Sess:BillOper&quot;==&quot;delete&quot;">
			<sql>delete from CRMSaleFollowUp where f_brother=@ValueofDB:CRMClientInfo_id</sql>
		</exec>
				<!--有下次跟单时间时向销售跟单插入记录 销售跟单启用审核流-->
		<exec condition="&quot;@MEM:CRMSaleFollowUp_IsStatart&quot; == &quot;1&quot; &amp;&amp;&quot;@SqlReturn:NextFollowTime&quot;.length != 0 &amp;&amp; &quot;@Sess:BillOper&quot;==&quot;delete&quot;">
			<sql>delete from OAMyWorkFlow where tableName='CRMSaleFollowUp' and Keyid in (select id from CRMSaleFollowUp where f_brother=@ValueofDB:CRMClientInfo_id)</sql>
			<sql>delete from CRMSaleFollowUp where f_brother=@ValueofDB:CRMClientInfo_id</sql>
		</exec>
		
		<!-- 删除审核流信息 -->
		<exec condition="true">
			<sql>delete from OAMyWorkFlowDet where f_ref=@ValueofDB:CRMClientInfo_id</sql>
			<sql>delete from OAMyWorkFlow where id=@ValueofDB:CRMClientInfo_id</sql>
		</exec>
	</sql>
</define>

<!-- 转换为公共池客户 -->
<define name="Transfer_PublicPool">
	<sql type="condition">
		<condition>
		</condition>
		<!-- 检查用户区域管理权限 -->
		<exec condition="true">	
			<sql type="define">CheckManageDistrictRight</sql>
		</exec>
	</sql>
	<sql type="condition">
		<condition>
			<select>select 'ExistError8' as ExistError8 from CRMClientInfo where id=@ValueofDB:CRMClientInfo_id and Status=4 and @Sess:UserId!='1'</select>
			<select>select Status from CRMClientInfo where id=@ValueofDB:CRMClientInfo_id</select>
		</condition>
		<!-- 成交客户不可以转换为公共客户 -->
		<exec condition="&quot;@SqlReturn:ExistError8&quot;==&quot;ExistError8&quot;">
			<error>CRMClientInfo.add.ExistError8</error>
		</exec>
		<!-- 更改转换时间和转换人 -->
		<exec condition="&quot;@SqlReturn:Status&quot;!=&quot;@ValueofDB:CRMClientInfo_Status&quot;">
			<sql>update CRMClientInfo set TransferDate=convert(varchar(10),getDate(),21),Transferer=@Sess:UserId where id=@ValueofDB:CRMClientInfo_id</sql>
		</exec>
	</sql>
	<sql type="condition">
		<condition>
		</condition>
		<!-- 更改为为公共池客户 -->
		<exec condition="true">
			<sql>update CRMClientInfo set Status=1 where id=@ValueofDB:CRMClientInfo_id</sql>
		</exec>
	</sql>
</define>

<!-- 转换为目标客户 -->
<define name="Transfer_TargetClient">
	<sql type="condition">
		<condition>
			<select>select 'ExistError8' as ExistError8 from CRMClientInfo where id=@ValueofDB:CRMClientInfo_id and Status=4 and @Sess:UserId!='1'</select>
		</condition>
		<!-- 成交客户不可以转换为目标客户 -->
		<exec condition="&quot;@SqlReturn:ExistError8&quot;==&quot;ExistError8&quot;">
			<error>CRMClientInfo.add.TargetCustomer</error>
		</exec>
		<!-- 检查用户区域管理权限 -->
		<exec condition="true">	
			<sql type="define">CheckManageDistrictRight</sql>
		</exec>
	</sql>

	<sql type="condition">
		<condition>
			<select>select Status from CRMClientInfo where id=@ValueofDB:CRMClientInfo_id</select>
		</condition>
		<!-- 更改为为目标客户 -->
		<exec condition="true">
			<sql>update CRMClientInfo set Status=2 where id=@ValueofDB:CRMClientInfo_id</sql>
		</exec>
		<!-- 更改转换时间和转换人 -->
		<exec condition="&quot;@SqlReturn:Status&quot;!=&quot;@ValueofDB:CRMClientInfo_Status&quot;">
			<sql>update CRMClientInfo set TransferDate=convert(varchar(10),getDate(),21),Transferer=@Sess:UserId where id=@ValueofDB:CRMClientInfo_id</sql>
		</exec>
	</sql>
</define>

<!-- 转换为意向客户 -->
<define name="Transfer_WillClient">
	<sql type="condition">
		<condition>
			<select>select 'ExistError8' as ExistError8 from CRMClientInfo where id=@ValueofDB:CRMClientInfo_id and Status=4 and @Sess:UserId!='1'</select>
		</condition>
		<!-- 成交客户不可以转换为意向客户 -->
		<exec condition="&quot;@SqlReturn:ExistError8&quot;==&quot;ExistError8&quot;">
			<error>CRMClientInfo.add.WillCustomer</error>
		</exec>
		<!-- 检查用户区域管理权限 -->
		<exec condition="true">	
			<sql type="define">CheckManageDistrictRight</sql>
		</exec>
	</sql>
	<sql type="condition">
		<condition>
			<select>select 'ExistError9' as ExistError9 from CRMClientInfo where id=@ValueofDB:CRMClientInfo_id and Status=1 and convert(varchar(10),getDate(),21)&lt;dateadd(day,convert(int,@MEM:ReturnPoolTime),TransferDate) and Transferer=@Sess:UserId and @Sess:UserId!='1'</select>
		</condition>
		<!-- 不能转换公共池客户为其它客户状态 -->
		<exec condition="&quot;@SqlReturn:ExistError9&quot;==&quot;ExistError9&quot;">
			<error>CRMClientInfo.add.ExistError9</error>
		</exec>
	</sql>
	<sql type="condition">
		<condition>
			<select>select 'ExistError7' as ExistError7 where (select count(*) as WillCount from CRMClientInfo where Status='3' and lastUpdateBy=@Sess:UserId)&gt;(select WillQty from tblWillCustomerQty where EmployeeID=@Sess:UserId)</select>
		</condition>
		<!-- 意向客户数大于该职员的意向客户设定数 -->
		<exec condition="&quot;@SqlReturn:ExistError7&quot;==&quot;ExistError7&quot; &amp;&amp; &quot;@MEM:WillQty&quot;==&quot;true&quot;">
			<error>CRMClientInfo.add.ExistError7</error>
		</exec>
	</sql>
	<sql type="condition">
		<condition>
			<select>select Status from CRMClientInfo where id=@ValueofDB:CRMClientInfo_id</select>
		</condition>
		<!-- 更改为为意向客户 -->
		<exec condition="true">
			<sql>update CRMClientInfo set Status=3 where id=@ValueofDB:CRMClientInfo_id</sql>
		</exec>
		<!-- 更改转换时间和转换人 -->
		<exec condition="&quot;@SqlReturn:Status&quot;!=&quot;@ValueofDB:CRMClientInfo_Status&quot;">
			<sql>update CRMClientInfo set TransferDate=convert(varchar(10),getDate(),21),Transferer=@Sess:UserId where id=@ValueofDB:CRMClientInfo_id</sql>
		</exec>
	</sql>
		<!-- 先删除跟单人再插入 自己为跟单人 -->
	<sql type="condition">
		<condition>
			<select>select DepartmentCode from tblEmployee where id=@Sess:UserId</select>
			<select>select id,SCompanyID from CRMClientInfo where id=@ValueofDB:CRMClientInfo_id</select>
		</condition>
		<exec condition="true">
			<sql>delete CRMClientInfoEmp where f_ref=@ValueofDB:CRMClientInfo_id</sql>
			<sql>insert CRMClientInfoEmp(id,f_ref,DepartmentCode,EmployeeID,SCompanyID)
			values('1'+@ValueofDB:CRMClientInfo_id,@ValueofDB:CRMClientInfo_id,@SqlReturn:DepartmentCode,@Sess:UserId,@SqlReturn:SCompanyID)
			</sql>
		</exec>
	</sql>
</define>

<!-- 转换为成交客户 -->
<define name="Transfer_SuccessClient">
	<sql type="condition">
		<condition>
		</condition>
		<!-- 检查用户区域管理权限 -->
		<exec condition="true">	
			<sql type="define">CheckManageDistrictRight</sql>
		</exec>
	</sql>
	<sql type="condition">
		<condition>
			<select>select 'ExistError9' as ExistError9 from CRMClientInfo where id=@ValueofDB:CRMClientInfo_id and Status=1 and convert(varchar(10),getDate(),21)&lt;dateadd(day,convert(int,@MEM:ReturnPoolTime),TransferDate) and Transferer=@Sess:UserId and @Sess:UserId!='1'</select>
		</condition>
		<!-- 不能转换公共池客户为其它客户状态 -->
		<exec condition="&quot;@SqlReturn:ExistError9&quot;==&quot;ExistError9&quot;">
			<error>CRMClientInfo.add.ExistError9</error>
		</exec>
	</sql>
	<sql type="condition">
		<condition>
			<select>select Status from CRMClientInfo where id=@ValueofDB:CRMClientInfo_id</select>
		</condition>
		<!-- 更改为为成交客户 -->
		<exec condition="true">
			<sql>update CRMClientInfo set Status=4 where id=@ValueofDB:CRMClientInfo_id</sql>
		</exec>
		<!-- 更改转换时间和转换人 -->
		<exec condition="&quot;@SqlReturn:Status&quot;!=&quot;@ValueofDB:CRMClientInfo_Status&quot;">
			<sql>update CRMClientInfo set TransferDate=convert(varchar(10),getDate(),21),Transferer=@Sess:UserId where id=@ValueofDB:CRMClientInfo_id</sql>
		</exec>
	</sql>
</define>

<!-- 定期检测设置 增加修改操作 -->
<define name="CRMTimeReviewSetting_operate">
	<sql type="condition">
		<condition>
			<select>select 'ExistError1' as ExistError1 from CRMTimeReviewSetting where id=@ValueofDB:CRMTimeReviewSetting_id and alertDate&lt;=0</select>
		</condition>
		<!-- 定期检测天数必须大于0 -->
		<exec condition="&quot;@SqlReturn:ExistError1&quot;==&quot;ExistError1&quot;">
			<error>CRMTimeReviewSetting.operate.ExistError1</error>
		</exec>
	</sql>
</define>

<!-- 客户合同增加时的操作 -->
<define name="CRMSaleContract_add">
	<sql type="condition">
		<condition>
			<select>select 'ExistError2' as ExistError2 from CRMSaleContract where id=@ValueofDB:CRMSaleContract_id and ServiceStartDate &gt; ServiceEndDate</select>
			<select>SELECT Qty,Price FROM CRMSaleContractDet WHERE f_ref = @ValueofDB:CRMSaleContract_id</select>
		</condition>
		<!-- 服务开始日期不能大于服务结束日期 -->
		<exec condition="&quot;@SqlReturn:ExistError2&quot;==&quot;ExistError2&quot;">
		<error>CRMSaleContract.add.ExistError2</error>
		</exec>
		<exec condition="@SqlReturn:Qty &lt; 0 || @SqlReturn:Qty == 0 || @SqlReturn:Price &lt; 0 || @SqlReturn:Price == 0">
		<error>CRMSaleContractQtyPrice.add.ExistError12</error>
		</exec>
	</sql>
	<sql type="condition">
		<condition>
		<select>select 'ExistError1' as ExistError1 from CRMSaleContractDet where f_ref=@ValueofDB:CRMSaleContract_id and Redo='1' and RedoRemark=''</select>
		</condition>
		<!-- 选择了改装为是，则必须录入改装说明 -->
		<exec condition="&quot;@SqlReturn:ExistError1&quot;==&quot;ExistError1&quot;">
		<error>CRMSaleContract.add.ExistError1</error>
		</exec>
		
		<exec condition="true">
		<sql>update CRMSaleContract set Redo='2' where not exists(select f_ref from CRMSaleContractDet where Redo='1' and f_ref=CRMSaleContract.id) and id=@ValueofDB:CRMSaleContract_id</sql>
		<sql>update CRMSaleContract set Redo='1' where exists(select f_ref from CRMSaleContractDet where Redo='1' and f_ref=CRMSaleContract.id) and id=@ValueofDB:CRMSaleContract_id</sql>
		</exec>

	</sql>
	<sql type="condition"><!--添加客户合同时，判断当前客户是否已被转换为ERP客户-->
		<condition>
			<select>SELECT classCode FROM tblCompany WHERE id = @ValueofDB:CRMSaleContract_ClientId</select>
		</condition>
		<exec condition="&quot;@SqlReturn:classCode&quot;==&quot;null&quot;||&quot;@SqlReturn:classCode&quot;.length==0">
			<sql>UPDATE CRMSaleContract SET classCode = ClientId WHERE id = @ValueofDB:CRMSaleContract_id</sql>
		</exec>
		<exec condition="&quot;@SqlReturn:classCode&quot;!=&quot;null&quot;&amp;&amp;&quot;@SqlReturn:classCode&quot;.length!=0">
			<sql>UPDATE CRMSaleContract SET classCode = @SqlReturn:classCode WHERE id = @ValueofDB:CRMSaleContract_id</sql>
		</exec>
	</sql>
	<sql type="condition"><!--添加客户合同时，判断当前客户是否是从ERP转换过来的，若是，则将ERP中客户信息表的classCode回填给客户合同classCode&gt;-->
		<condition>
			<select>SELECT ClientId FROM CRMSaleContract WHERE ClientId IN (SELECT id FROM tblCompany) AND id = @ValueofDB:CRMSaleContract_id</select>
		</condition>
		<exec condition="&quot;@SqlReturn:ClientId&quot;!=&quot;null&quot;&amp;&amp;&quot;@SqlReturn:ClientId&quot;.length!=0">
			<sql>UPDATE CRMSaleContract SET classCode = a.classCode FROM tblCompany a WHERE CRMSaleContract.id = @ValueofDB:CRMSaleContract_id AND @ValueofDB:CRMSaleContract_ClientId = a.id</sql>
		</exec>
	</sql>
	
	<sql type="condition">
	<exec condition="&quot;@MEM:CRMSaleContract_IsStatart&quot; != &quot;1&quot;">
	<sql type="define">CRMSaleContract_Add_One</sql>
	</exec>
	</sql>
</define>	
	
<define name="CRMSaleContract_Add_One">
	<sql type="condition">
		<condition>
			<select>select zh_CN as Contract from tblLanguage where id=(select languageId from tblDBEnumerationItem where enumValue=@ValueofDB:ContractType and enumId=(select id from tblDBEnumeration where enumName='CRMContractType'))</select>
			<select>select substring(convert(varchar,totalAmount),1,len(totalAmount)-6) as totalAmount from CRMSaleContract where id=@ValueofDB:id</select>
		</condition>
		<!-- 更新 客户资料 上次联系时间 -->
		<exec condition="true">
		<sql>update CRMClientInfo set LastContractTime=@ValueofDB:CRMSaleContract_lastUpdateTime where id=@ValueofDB:f_brother</sql>
		</exec>
		<!--记录客户日志
		<exec condition="true">
		<sql>insert into CRMClientInfoLog(id,clientId,billType,context,createBy,createTime,relationId) values(@ValueofDB:id,@ValueofDB:ClientId,'CRMSaleContract',@ValueofDB:BillDate+@Locale:CRM.difineCRM.Deal+@SqlReturn:Contract+'-'+@SqlReturn:totalAmount,@Sess:UserId,@ValueofDB:createTime,@ValueofDB:id)</sql>
		</exec>
		-->
		<!-- 自动转该客户为成交客户 -->
		<exec condition="&quot;@MEM:AutoTransferToSuccess&quot;==&quot;true&quot;">
		<sql>update CRMClientInfo set Status=4 where id=@ValueofDB:ClientId</sql>
		</exec>
		<!--审核节点-->
		<exec condition="&quot;@MEM:CRMSaleContract_IsStatart&quot; != &quot;1&quot;">
		<sql>update CRMSaleContract set workFlowNodeName='finish',workFlowNode='-1',checkPersons=''  where id=@ValueofDB:CRMSaleContract_id</sql>
		</exec>
	</sql>
	<sql type="condition">
		<!-- 更新邻居表关联ID或客户名称 -->
		<exec condition="true">
			<sql>update CRMSaleContract set f_brother=ClientId where id=@ValueofDB:CRMSaleContract_id and f_brother='' and ClientId!=''</sql>
			<sql>update CRMSaleContract set ClientId=f_brother where id=@ValueofDB:CRMSaleContract_id and f_brother!='' and ClientId=''</sql>
		</exec>

	</sql>
	<sql type="condition">
		<condition>
		</condition>
		<!-- 生成定期检测时间 -->
		<exec condition="&quot;@ValueofDB:CRMSaleContract_ContractType&quot;==&quot;SaleContract&quot;">
			<sql>delete from CRMSaleContractDet2 where f_ref=@ValueofDB:CRMSaleContract_id</sql>
			<sql>insert into CRMSaleContractDet2(id,f_ref,ExamineDate,SCompanyID,detOrderNo) select lower(substring(replace(newid(),'-',''),1,28)),@ValueofDB:CRMSaleContract_id,convert(varchar(10),dateadd(day,a.alertDate,@ValueofDB:CRMSaleContract_SignUpDate),21),@Sess:SCompanyID ,ROW_NUMBER() over( order by a.alertDate) from CRMTimeReviewSetting a order by a.alertDate asc</sql>
		</exec>
	</sql>
	<sql type="condition">
		<condition>
			<select>select isVisit as GenerateVisitBill,EmployeeID as VisitEmployee,DepartmentCode as VisitDepartment from tblBillReviewSetting where BillType='CRMSaleContract'</select>
			<select>select (case when @SqlReturn:VisitEmployee='' or @SqlReturn:VisitEmployee='null' then '1' else @SqlReturn:VisitEmployee end) as createBy</select>
			<select>select top 1 @Locale:CRM.difineCRM.ToPact+tblGoods.GoodsFullName+@Locale:CRM.difineCRM.UseDataBack as Summary from CRMSaleContractDet left join tblGoods on CRMSaleContractDet.GoodsCode=tblGoods.classCode where CRMSaleContractDet.f_ref=@ValueofDB:CRMSaleContract_id</select>
			<select>select ';'+createBy+';' as checkPersons from CRMSaleContract where id=@ValueofDB:CRMSaleContract_id</select>
		</condition>
		<!-- 生成 客户回访单 -->
		<exec condition="&quot;@MEM:CRMClientRevisit_IsStatart&quot; == &quot;0&quot; &amp;&amp;&quot;@SqlReturn:GenerateVisitBill&quot;==&quot;1&quot;">
			<sql type="procedure">
			{call proc_insert(CRMClientRevisit,id=9@ValueofDB:CRMSaleContract_id@SPFieldLink:BillDate=@ValueofDB:CRMSaleContract_BillDate@SPFieldLink:BillNo=@CODE:[RV@y2@M@d@id5RV@]@SPFieldLink:DepartmentCode=@SqlReturn:VisitDepartment@SPFieldLink:EmployeeID=@SqlReturn:VisitEmployee@SPFieldLink:workFlowNodeName=finish@SPFieldLink:checkPersons=@SPFieldLink:workFlowNode=-1@SPFieldLink:ClientId=@ValueofDB:f_brother@SPFieldLink:f_brother=@ValueofDB:f_brother@SPFieldLink:RevisitStatus=1@SPFieldLink:RefBillType=CRMSaleContract@SPFieldLink:RefBillID=@ValueofDB:CRMSaleContract_id@SPFieldLink:Solved=2@SPFieldLink:SCompanyID=@ValueofDB:tblMaintainNote_SCompanyID@SPFieldLink:createBy=@ValueofDB:CRMSaleContract_createBy@SPFieldLink:createTime=@ValueofDB:CRMSaleContract_createTime@SPFieldLink:lastUpdateBy=@ValueofDB:CRMSaleContract_createBy@SPFieldLink:lastUpdateTime=@ValueofDB:CRMSaleContract_lastUpdateTime@SPFieldLink:isAuto=1@SPFieldLink:Subject=@SqlReturn:Summary,retCode,retVal)}
			</sql>
		</exec>
			<!-- 生成 客户回访单 -->
		<exec condition="&quot;@MEM:CRMClientRevisit_IsStatart&quot; == &quot;1&quot; &amp;&amp;&quot;@SqlReturn:GenerateVisitBill&quot;==&quot;1&quot;">
			<sql type="procedure">
			{call proc_insert(CRMClientRevisit,id=9@ValueofDB:CRMSaleContract_id@SPFieldLink:BillDate=@ValueofDB:CRMSaleContract_BillDate@SPFieldLink:BillNo=@CODE:[RV@y2@M@d@id5RV@]@SPFieldLink:DepartmentCode=@SqlReturn:VisitDepartment@SPFieldLink:EmployeeID=@SqlReturn:VisitEmployee@SPFieldLink:workFlowNodeName=notApprove@SPFieldLink:checkPersons=@SqlReturn:checkPersons@SPFieldLink:workFlowNode=0@SPFieldLink:ClientId=@ValueofDB:f_brother@SPFieldLink:f_brother=@ValueofDB:f_brother@SPFieldLink:RevisitStatus=1@SPFieldLink:RefBillType=CRMSaleContract@SPFieldLink:RefBillID=@ValueofDB:CRMSaleContract_id@SPFieldLink:Solved=2@SPFieldLink:SCompanyID=@ValueofDB:tblMaintainNote_SCompanyID@SPFieldLink:createBy=@ValueofDB:CRMSaleContract_createBy@SPFieldLink:createTime=@ValueofDB:CRMSaleContract_createTime@SPFieldLink:lastUpdateBy=@ValueofDB:CRMSaleContract_createBy@SPFieldLink:lastUpdateTime=@ValueofDB:CRMSaleContract_lastUpdateTime@SPFieldLink:isAuto=1@SPFieldLink:Subject=@SqlReturn:Summary,retCode,retVal)}
			</sql>
			<sql>insert into OAMyWorkFlow(id,applyDate,applyType,tableName,keyId,createBy,checkPerson,currentNode,createtime,lastUpdatetime,nextNodeIds,departmentCode,statusId)
select 'w'+id,BillDate,(select id from oaworkflowtemplate where templateFile='CRMClientRevisit'),'CRMClientRevisit',id,createBy,';'+createBy+';',0,createtime,lastUpdatetime,'',(select departmentCode from tblEmployee a where a.id=CRMClientRevisit.CreateBy),0 from CRMClientRevisit where id='9'+@ValueofDB:CRMSaleContract_id</sql>
		</exec>
		<!-- 生成 客户回访单记录客户日志 -->
		<exec condition="&quot;@SqlReturn:GenerateVisitBill&quot;==&quot;1&quot;">
			<sql>insert into CRMClientInfoLog(id,clientId,billType,context,createBy,createTime,relationId) values('9'+@ValueofDB:CRMSaleContract_id,@ValueofDB:f_brother,'CRMClientRevisit',@ValueofDB:CRMSaleContract_BillDate+@Locale:CRM.difineCRM.BackVisit+@SqlReturn:Summary,@ValueofDB:CRMSaleContract_createBy,@ValueofDB:CRMSaleContract_createTime,'9'+@ValueofDB:CRMSaleContract_id)</sql> 
		</exec>
	<exec condition="&quot;@MEM:CRMClientRevisit_IsStatart&quot; != &quot;1&quot;">
	<!--更新审核流-->
	<sql>update CRMClientRevisit set workFlowNodeName='finish',workFlowNode='-1',checkPersons=''  where id='9'+@ValueofDB:CRMSaleContract_id</sql>
	</exec>		
		<!--更新客户回访单连续号-->
		<exec condition="&quot;@SqlReturn:GenerateVisitBill&quot;==&quot;1&quot; &amp;&amp; &quot;@MEM:BillNoSequence&quot;==&quot;true&quot;">  
			<sql>update tblCodeGenerate set curValue=curValue+1 where code='RV'</sql>
		</exec>	
		<!-- 生成工作计划 -->
		<exec condition="&quot;@SqlReturn:GenerateVisitBill&quot;==&quot;1&quot; &amp;&amp; &quot;@SqlReturn:VisitEmployee&quot;!=&quot;&quot;">
			<sql type="procedure">
			{call proc_insert(tblDayWorkPlan,id=9@ValueofDB:CRMSaleContract_id@SPFieldLink:DepartmentCode=@SqlReturn:VisitDepartment@SPFieldLink:EmployeeID=@SqlReturn:VisitEmployee@SPFieldLink:title=@Locale:CRM.difineCRM.AddClientPact @Locale:CRM.difineCRM.BillNo @ValueofDB:CRMSaleContract_ContractNo ，@Locale:CRM.difineCRM.ClientRevisit @SPFieldLink:content=@Locale:CRM.difineCRM.AddClientPact @Locale:CRM.difineCRM.BillNo @ValueofDB:CRMSaleContract_ContractNo ，@Locale:CRM.difineCRM.ClientRevisit @SPFieldLink:createBy=@SqlReturn:createBy@SPFieldLink:createTime=@ValueofDB:CRMSaleContract_createTime@SPFieldLink:SCompanyID=@ValueofDB:CRMSaleContract_SCompanyID@SPFieldLink:time=0@SPFieldLink:BeginDate=@ValueofDB:CRMSaleContract_BillDate@SPFieldLink:EndDate=@ValueofDB:CRMSaleContract_BillDate@SPFieldLink:workFlowNodeName=notApprove@SPFieldLink:grade=3,retCode,retVal)}
			</sql>
		</exec>
		<!--启用销售合同回填对应工作计划销售金额完成数及比例
		<exec condition="@MEM:SalesAssContract==true">
			<sql>update tblDayWorkPlan set SalesComplete=SalesComplete+isNull((select TotalAmount from CRMSaleContract where id=@ValueofDB:CRMSaleContract_id and CRMSaleContract.EmployeeID=tblDayWorkPlan.createBy and CRMSaleContract.BillDate between tblDayWorkPlan.BeginDate and tblDayWorkPlan.EndDate),0),SalesScale=(case when SalesAmt=0 then 0 else cast((SalesComplete+isNull((select TotalAmount from CRMSaleContract where id=@ValueofDB:CRMSaleContract_id and CRMSaleContract.EmployeeID=tblDayWorkPlan.createBy and CRMSaleContract.BillDate between tblDayWorkPlan.BeginDate and tblDayWorkPlan.EndDate),0))*100/SalesAmt as numeric(18,2)) end)</sql>
		</exec>-->
	<exec condition="&quot;@MEM:tblDayWorkPlan_IsStatart&quot; != &quot;1&quot;">
	<sql>update tblDayWorkPlan set workFlowNodeName='finish',workFlowNode='-1',checkPersons=''  where id='9'+@ValueofDB:CRMSaleContract_id</sql>
	</exec>			
	</sql>
</define>

<!-- 客户合同删除时的操作 -->
<define name="CRMSaleContract_del">
	<sql type="condition">
		<exec condition="&quot;@MEM:CRMSaleContract_IsStatart&quot; != &quot;1&quot;">
		<sql type="define">CRMSaleContract_Del_One</sql>
		</exec>
	</sql>
</define>			
		
		
<!-- 客户合同删除时的操作 -->
<define name="CRMSaleContract_Del_One">
	<sql type="condition">
		<condition>
			<select>select 'ExistError1' as ExistError1 from CRMSaleContract 
					where id=@ValueofDB:CRMSaleContract_id 
						and (id in (select RefBillID from CRMPeriodicExamine) 
							or id in (select RefBillID from tblMaintainNote) 
							or id in (select AccBillNO from CRMSaleReceive) 
							or id in (select RefBillID from tblSaleReceiveDet)
							or id in (select CRMpactID from tblSalesOrder)
							)</select>
		</condition>
		<!-- 该合同已被引用，不允许执行此操作 -->
		<exec condition="&quot;@SqlReturn:ExistError1&quot;==&quot;ExistError1&quot;">
		<error>CRMSaleContract.del.ExistError1</error>
		</exec>
	</sql>
	<sql type="condition">
		<condition>
			<select>select 'ExistError1' as ExistError1 from CRMClientRevisit where RefBillType='CRMSaleContract' and RefBillID=@ValueofDB:CRMSaleContract_id and isAuto='0'</select>
			<select>select '9'+@ValueofDB:CRMSaleContract_id as DayWorkPlanID</select>
			<select>select 'ExistAudit' as ExistAudit from CRMClientRevisit where RefBillType='CRMSaleContract' and RefBillID=@ValueofDB:CRMSaleContract_id and workFlowNodeName='finish' and isAuto='1'</select>
			<select>select BillNo as RepairNo from tblMaintainNote where RefBillID=@ValueofDB:CRMSaleContract_id</select>
			<select>select isVisit as GenerateVisitBill,EmployeeID as VisitEmployee,DepartmentCode as VisitDepartment from tblBillReviewSetting where BillType='CRMSaleContract'</select>
		</condition>
		<!-- 定期检测单被引用，则不能执行此操作 -->
		<exec condition="&quot;@SqlReturn:ExistError1&quot;==&quot;ExistError1&quot;">
		<error>RefBill.operate.error</error>
		</exec>
		
		<!-- 客户回访单已被审核，则不能执行此操作 -->
		<exec condition="&quot;@MEM:CRMClientRevisit_IsStatart&quot;==&quot;1&quot; &amp;&amp; &quot;@SqlReturn:ExistAudit&quot;==&quot;ExistAudit&quot;">
		<error>CRMClientRevisit.Audit.error</error>
		</exec>
		
		<!-- 定期检测单被引用，则不能执行此操作 -->
		<exec condition="&quot;@SqlReturn:RepairNo&quot;.length !=0 &amp;&amp; &quot;@SqlReturn:RepairNo&quot; != &quot;null&quot;">
		<error>RefBill.operate.error</error>
		</exec>
				
		<!-- 删除 客户回访单 工作计划 -->
		<exec condition="&quot;@SqlReturn:GenerateVisitBill&quot;==&quot;1&quot;">
			<sql>delete from CRMClientRevisit where RefBillType='CRMSaleContract' and RefBillID=@ValueofDB:CRMSaleContract_id and isAuto='1'</sql>
		</exec>
		<exec condition="&quot;@SqlReturn:GenerateVisitBill&quot;==&quot;1&quot;&amp;&amp;&quot;@MEM:CRMClientRevisit_IsStatart&quot; == &quot;1&quot;">
			<sql>delete from OAMyWorkFlow where tableName='CRMSaleContract' and keyId='9'+@ValueofDB:CRMSaleContract_id</sql>
		</exec>
		<exec condition="true">
			<sql>delete from tblDayWorkPlan where id=@SqlReturn:DayWorkPlanID</sql>
		</exec>
				<!--启用销售合同回填对应工作计划销售金额完成数及比例
		<exec condition="@MEM:SalesAssContract==true">
					<sql>update tblDayWorkPlan set SalesComplete=SalesComplete-isNull((select TotalAmount from CRMSaleContract where id=@ValueofDB:CRMSaleContract_id and CRMSaleContract.EmployeeID=tblDayWorkPlan.createBy and CRMSaleContract.BillDate between tblDayWorkPlan.BeginDate and tblDayWorkPlan.EndDate),0),SalesScale=(case when SalesAmt=0 then 0 else cast((SalesComplete-isNull((select TotalAmount from CRMSaleContract where id=@ValueofDB:CRMSaleContract_id and CRMSaleContract.EmployeeID=tblDayWorkPlan.createBy and CRMSaleContract.BillDate between tblDayWorkPlan.BeginDate and tblDayWorkPlan.EndDate),0))*100/SalesAmt as numeric(18,2)) end)</sql>
		</exec>-->
				<!--记录客户日志
		<exec condition="true">
		<sql>delete from CRMClientInfoLog where id=@ValueofDB:CRMSaleContract_id</sql>
		<sql>delete from CRMClientInfoLog where id='9'+@ValueofDB:CRMSaleContract_id</sql>
		</exec>
		-->
	</sql>
</define>

<!-- 定期检测单 增加时操作 -->
<define name="CRMPeriodicExamine_add">
	<sql type="condition">
		<!-- 更新邻居表关联ID或客户名称 -->
		<exec condition="true">
			<sql>update CRMPeriodicExamine set f_brother=ClientId where id=@ValueofDB:CRMPeriodicExamine_id and f_brother='' and ClientId!=''</sql>
			<sql>update CRMPeriodicExamine set ClientId=f_brother where id=@ValueofDB:CRMPeriodicExamine_id and f_brother!='' and ClientId=''</sql>
		</exec>
	</sql>
	<sql type="condition">
		<!-- 更新 客户资料 上次联系时间 -->
		<exec condition="true">
			<sql>update CRMClientInfo set LastContractTime=@ValueofDB:CRMPeriodicExamine_lastUpdateTime where id=@ValueofDB:f_brother</sql>
		</exec>
	</sql>
	<sql type="condition">
		<condition>
			<select>select isVisit as GenerateVisitBill,EmployeeID as VisitEmployee,DepartmentCode as VisitDepartment from tblBillReviewSetting where BillType='CRMPeriodicExamine'</select>
			<select>select (case when @SqlReturn:VisitEmployee='' or @SqlReturn:VisitEmployee='null' then '1' else @SqlReturn:VisitEmployee end) as createBy</select>
			<select>select GoodsFullName as GodosName from tblGoods where classCode =(select top 1 GoodsCode from CRMPeriodicExamineDet where f_ref=@ValueofDB:id)</select>
		</condition>
		<!-- 生成 客户回访单 -->
		<exec condition="&quot;@SqlReturn:GenerateVisitBill&quot;==&quot;1&quot;">
			<sql type="procedure">
			{call proc_insert(CRMClientRevisit,id=9@ValueofDB:CRMPeriodicExamine_id@SPFieldLink:BillDate=@ValueofDB:CRMPeriodicExamine_BillDate@SPFieldLink:BillNo=@CODE:[RV@y2@M@d@id5RV@]@SPFieldLink:DepartmentCode=@SqlReturn:VisitDepartment@SPFieldLink:EmployeeID=@SqlReturn:VisitEmployee@SPFieldLink:workFlowNodeName=notApprove@SPFieldLink:ClientId=@ValueofDB:f_brother@SPFieldLink:f_brother=@ValueofDB:f_brother@SPFieldLink:RevisitStatus=1@SPFieldLink:RefBillType=CRMPeriodicExamine@SPFieldLink:RefBillID=@ValueofDB:CRMPeriodicExamine_id@SPFieldLink:Solved=2@SPFieldLink:SCompanyID=@ValueofDB:CRMPeriodicExamine_SCompanyID@SPFieldLink:createBy=@SqlReturn:createBy@SPFieldLink:createTime=@ValueofDB:CRMPeriodicExamine_createTime@SPFieldLink:lastUpdateBy=@SqlReturn:createBy@SPFieldLink:lastUpdateTime=@ValueofDB:CRMPeriodicExamine_lastUpdateTime@SPFieldLink:isAuto=1,retCode,retVal)}
			</sql>
		</exec>
		
	<exec condition="&quot;@MEM:CRMClientRevisit_IsStatart&quot; != &quot;1&quot;">
	<sql>update CRMClientRevisit set workFlowNodeName='finish',workFlowNode='-1',checkPersons=''  where id='9'+@ValueofDB:CRMPeriodicExamine_id</sql>
	</exec>		
		
		<!--更新客户回访单连续号-->
		<exec condition="&quot;@SqlReturn:GenerateVisitBill&quot;==&quot;1&quot; &amp;&amp; &quot;@MEM:BillNoSequence&quot;==&quot;true&quot;">  
		<sql>update tblCodeGenerate set curValue=curValue+1 where code='RV'</sql>
		</exec>	
		
		<!-- 生成工作计划 -->
		<exec condition="&quot;@SqlReturn:GenerateVisitBill&quot;==&quot;1&quot; &amp;&amp; &quot;@SqlReturn:VisitEmployee&quot;!=&quot;&quot;">
			<sql type="procedure">
			{call proc_insert(tblDayWorkPlan,id=9@ValueofDB:CRMPeriodicExamine_id@SPFieldLink:DepartmentCode=@SqlReturn:VisitDepartment@SPFieldLink:EmployeeID=@SqlReturn:VisitEmployee@SPFieldLink:title=@Locale:CRM.difineCRM.AddTermlyCheckout @Locale:CRM.difineCRM.BillNo @ValueofDB:CRMPeriodicExamine_BillNo ，@Locale:CRM.difineCRM.ClientRevisit @SPFieldLink:content=@Locale:CRM.difineCRM.AddTermlyCheckout @Locale:CRM.difineCRM.BillNo @ValueofDB:CRMPeriodicExamine_BillNo ，@Locale:CRM.difineCRM.ClientRevisit @SPFieldLink:createBy=@SqlReturn:createBy@SPFieldLink:createTime=@ValueofDB:CRMPeriodicExamine_createTime@SPFieldLink:SCompanyID=@ValueofDB:CRMPeriodicExamine_SCompanyID@SPFieldLink:time=0@SPFieldLink:BeginDate=@ValueofDB:CRMPeriodicExamine_BillDate@SPFieldLink:EndDate=@ValueofDB:CRMPeriodicExamine_BillDate@SPFieldLink:workFlowNodeName=notApprove@SPFieldLink:grade=3,retCode,retVal)}
			</sql>
		</exec>
		
	<exec condition="&quot;@MEM:tblDayWorkPlan_IsStatart&quot; != &quot;1&quot;">
	<sql>update tblDayWorkPlan set workFlowNodeName='finish',workFlowNode='-1',checkPersons=''  where id='9'+@ValueofDB:CRMPeriodicExamine_id</sql>
	</exec>
		
		<!-- 添加客户最新动态 
		<exec condition="&quot;@Sess:BillOper&quot; == &quot;add&quot;">
  			<sql>insert into CRMClientInfoLog(id,clientId,billType,context,createBy,createTime,relationId) values(@ValueofDB:id,@ValueofDB:ClientId,'CRMPeriodicExamine',@ValueofDB:BillDate+@Locale:CRM.difineCRM.TermlyCheckout+@SqlReturn:GodosName,@Sess:UserId,@ValueofDB:createTime,@ValueofDB:id)</sql> 
  		</exec>
  		-->
	</sql>
</define>

<!-- 定期检测单 删除时操作 -->
<define name="CRMPeriodicExamine_del">
	<sql type="condition">
		<condition>
			<select>select 'ExistError1' as ExistError1 from CRMClientRevisit where RefBillType='CRMPeriodicExamine' and RefBillID=@ValueofDB:CRMPeriodicExamine_id and isAuto='0'</select>
			<select>select '9'+@ValueofDB:CRMPeriodicExamine_id as DayWorkPlanID</select>
			<select>select 'ExistAudit' as ExistAudit from CRMClientRevisit where RefBillType='CRMPeriodicExamine' and RefBillID=@ValueofDB:CRMPeriodicExamine_id and workFlowNodeName='finish' and isAuto='1'</select>	
		</condition>
		<!-- 定期检测单被引用，则不能执行此操作 -->
		<exec condition="&quot;@SqlReturn:ExistError1&quot;==&quot;ExistError1&quot;">
			<error>RefBill.operate.error</error>
		</exec>
		<!-- 客户回访单已被审核，则不能执行此操作 -->
		<exec condition="&quot;@SqlReturn:RevisitSta&quot;==&quot;1&quot; &amp;&amp; &quot;@SqlReturn:ExistAudit&quot;==&quot;ExistAudit&quot;">
			<error>CRMClientRevisit.Audit.error</error>
		</exec>
		<!-- 删除 客户回访单 工作计划 -->
		<exec condition="true">
			<sql>delete from CRMClientRevisit where RefBillType='CRMPeriodicExamine' and RefBillID=@ValueofDB:CRMPeriodicExamine_id and isAuto='1'</sql>
			<sql>delete from tblDayWorkPlan where id=@SqlReturn:DayWorkPlanID</sql>
		</exec>
	</sql>
</define>

<!-- 维修记录 增加时操作 -->
<define name="tblMaintainNote_add">
	<sql type="condition">
		<!-- 更新邻居表关联ID或客户名称 -->
		<exec condition="true">
			<sql>update tblMaintainNote set f_brother=ClientId where id=@ValueofDB:tblMaintainNote_id and f_brother='' and ClientId!=''</sql>
			<sql>update tblMaintainNote set ClientId=f_brother where id=@ValueofDB:tblMaintainNote_id and f_brother!='' and ClientId=''</sql>
		</exec>
	</sql>

	<sql type="condition">
		<condition>
			<select>select 'ExistError2' as ExistError2 from tblMaintainNote a where a.id=@ValueofDB:tblMaintainNote_id and exists (select * from tblMaintainNoteDet where f_ref=a.id and IsReplace='1') and not exists (select * from tblMaintainNotePartDet where f_ref=a.id)</select>
			<select>SELECT 'Exist3' AS Exist3 FROM tblMaintainNote WHERE EXISTS (SELECT NULL FROM tblMaintainNoteDet WHERE f_ref = @ValueofDB:tblMaintainNote_id AND IsReplace = 2) AND EXISTS (SELECT NULL FROM tblMaintainNotePartDet WHERE f_ref = @ValueofDB:tblMaintainNote_id)</select>
		</condition>
		
		<!-- 产品从表有选择更换配件为是时，则配件从表必须录入 -->
		<exec condition="&quot;@SqlReturn:ExistError2&quot;==&quot;ExistError2&quot;">
		<error>tblMaintainNote.add.ExistError2</error>
		</exec>
		<!--是否更换配件为否但配件从表有记录时提示-->
		<exec condition="&quot;@SqlReturn:Exist3&quot;==&quot;Exist3&quot;">
			<error>tblMaintainNote.add3.ExistError3</error>
		</exec>
		<exec condition="&quot;@MEM:tblMaintainNote_IsStatart&quot; != &quot;1&quot;">
		<sql type="define">tblMaintainNote_add_One</sql>
		</exec>
		
		<exec condition="&quot;@Sess:BillOper&quot; == &quot;add&quot;">
		<!--发送即时消息给跟单人
		<sql>insert into tblAdvice(id,send,Receive,Title,Content,RelationId,OperType,Status,exist,SendName,ReceiveName,createBy,lastUpdateBy,createTime,lastUpdateTime) select subString(cast(newid() as varchar(36)),1,30),@Sess:UserId,ge.id,@Locale:CRM.difineCRM.YourClientNeedRecompense,'<a href="      javascript:mdiwin(''/UserFunctionQueryAction.do?parentTableName=CRMClientInfo&amp;tableName=tblMaintainNote&amp;src=menu&amp;noback=true&amp;keyId='+b.id+'&amp;operation=5&amp;noback=true&amp;winCurIndex=7'','''+@Locale:MaintainNote+''')">'+@Locale:CRM.difineCRM.YourClientNeedRecompenseLook+'</a>',b.id,'send','noRead','all',se.EmpFullName,ge.EmpFullName,@Sess:UserId,@Sess:UserId,b.lastUpdateTime,b.lastUpdateTime from tblMaintainNote b left join tblEmployee se on se.id=@Sess:UserId left join CRMClientInfo w on w.id=b.f_Brother left join CRMClientInfoEmp gn on gn.f_ref=w.id left join tblEmployee ge on gn.EmployeeID=ge.id where b.id=@ValueofDB:tblMaintainNote_id</sql>
		-->
		</exec>
	</sql>
</define>	
	
<define name="tblMaintainNote_add_One">
	<sql type="condition">
		<!-- 更新 客户资料 上次联系时间 -->
		<condition>
		<select>select 'ExistError2' as ExistError2 from tblMaintainNote a where a.id=@ValueofDB:tblMaintainNote_id and exists (select * from tblMaintainNoteDet where f_ref=a.id and IsReplace='1') and not exists (select * from tblMaintainNotePartDet where f_ref=a.id)</select>
		<select>select zh_CN as strRepairType from tblLanguage where id=(select languageId from tblDBEnumerationItem where enumValue=@ValueofDB:RepairType and enumId=(select id from tblDBEnumeration where enumName='CRMRepairType'))</select>
		</condition>
		<exec condition="true">
		<sql>update CRMClientInfo set LastContractTime=@ValueofDB:tblMaintainNote_lastUpdateTime where id=@ValueofDB:f_brother</sql>
		</exec>
		<!-- 记录客户日志
 		<exec condition="&quot;@Sess:BillOper&quot; == &quot;add&quot;">
 		 <sql>insert into CRMClientInfoLog(id,clientId,billType,context,createBy,createTime,relationId) values(@ValueofDB:id,@ValueofDB:ClientId,'tblMaintainNote',@ValueofDB:BillDate+@Locale:CRM.difineCRM.Service+@SqlReturn:strRepairType,@Sess:UserId,@ValueofDB:createTime,@ValueofDB:id)</sql> 
    	</exec>
		--> 
		<exec condition="&quot;@ValueofDB:tblMaintainNote_RepairState&quot;==&quot;Complete&quot; &amp;&amp; &quot;@Sess:BillOper&quot; == &quot;add&quot;">
		<!--发送即时消息给跟单人-->
		<sql>insert into tblAdvice(id,send,Receive,Title,Content,RelationId,OperType,Status,exist,SendName,ReceiveName,
createBy,lastUpdateBy,createTime,lastUpdateTime)
select subString(cast(newid() as varchar(36)),1,30),@Sess:UserId,ge.id,@Locale:CRM.difineCRM.YourClientServiced,'<a href="      javascript:mdiwin(''/UserFunctionQueryAction.do?parentTableName=CRMClientInfo&amp;tableName=tblMaintainNote&amp;src=menu&amp;noback=true&amp;keyId='+b.id+'&amp;operation=5&amp;noback=true&amp;winCurIndex=7'','''+@Locale:MaintainNote+''')">'+@Locale:CRM.difineCRM.YourClientServicedLook+'</a>',b.id,'send','noRead','all',se.EmpFullName,ge.EmpFullName,@Sess:UserId,@Sess:UserId,b.lastUpdateTime,b.lastUpdateTime from tblMaintainNote b left join tblEmployee se on se.id=@Sess:UserId left join CRMClientInfo w on w.id=b.f_Brother left join CRMClientInfoEmp gn on gn.f_ref=w.id left join tblEmployee ge on gn.EmployeeID=ge.id where b.id=@ValueofDB:tblMaintainNote_id</sql>
		</exec>		
	</sql>
	<sql type="condition">
		<condition>
			<select>select isVisit as GenerateVisitBill,EmployeeID as VisitEmployee,DepartmentCode as VisitDepartment from tblBillReviewSetting where BillType='tblMaintainNote'</select>
			<select>select (case when @SqlReturn:VisitEmployee='' or @SqlReturn:VisitEmployee='null' then '1' else @SqlReturn:VisitEmployee end) as createBy</select>
			<select>select ';'+createBy+';' as checkPersons from tblMaintainNote where id=@ValueofDB:tblMaintainNote_id</select>
		</condition>
		<!-- 生成 客户回访单 -->
		<exec condition="&quot;@MEM:CRMClientRevisit_IsStatart&quot; == &quot;0&quot; &amp;&amp;&quot;@SqlReturn:GenerateVisitBill&quot;==&quot;1&quot;">
			<sql type="procedure">
			{call proc_insert(CRMClientRevisit,id=9@ValueofDB:tblMaintainNote_id@SPFieldLink:BillDate=@ValueofDB:tblMaintainNote_BillDate@SPFieldLink:BillNo=@CODE:[RV@y2@M@d@id5RV@]@SPFieldLink:DepartmentCode=@SqlReturn:VisitDepartment@SPFieldLink:EmployeeID=@SqlReturn:VisitEmployee@SPFieldLink:workFlowNode=-1@SPFieldLink:workFlowNodeName=finish@SPFieldLink:checkPersons=@SPFieldLink:ClientId=@ValueofDB:f_brother@SPFieldLink:f_brother=@ValueofDB:f_brother@SPFieldLink:RevisitStatus=1@SPFieldLink:RefBillType=tblMaintainNote@SPFieldLink:RefBillID=@ValueofDB:tblMaintainNote_id@SPFieldLink:Solved=2@SPFieldLink:SCompanyID=@ValueofDB:tblMaintainNote_SCompanyID@SPFieldLink:createBy=@ValueofDB:tblMaintainNote_createBy@SPFieldLink:createTime=@ValueofDB:tblMaintainNote_createTime@SPFieldLink:lastUpdateBy=@ValueofDB:tblMaintainNote_createBy@SPFieldLink:lastUpdateTime=@ValueofDB:tblMaintainNote_lastUpdateTime@SPFieldLink:isAuto=1,retCode,retVal)}
			</sql>
		</exec>
		<!-- 生成 客户回访单 -->
		<exec condition="&quot;@MEM:CRMClientRevisit_IsStatart&quot; == &quot;1&quot; &amp;&amp;&quot;@SqlReturn:GenerateVisitBill&quot;==&quot;1&quot;">
			<sql type="procedure">
			{call proc_insert(CRMClientRevisit,id=9@ValueofDB:tblMaintainNote_id@SPFieldLink:BillDate=@ValueofDB:tblMaintainNote_BillDate@SPFieldLink:BillNo=@CODE:[RV@y2@M@d@id5RV@]@SPFieldLink:DepartmentCode=@SqlReturn:VisitDepartment@SPFieldLink:EmployeeID=@SqlReturn:VisitEmployee@SPFieldLink:workFlowNode=0@SPFieldLink:workFlowNodeName=notApprove@SPFieldLink:checkPersons=@SqlReturn:checkPersons@SPFieldLink:ClientId=@ValueofDB:f_brother@SPFieldLink:f_brother=@ValueofDB:f_brother@SPFieldLink:RevisitStatus=1@SPFieldLink:RefBillType=tblMaintainNote@SPFieldLink:RefBillID=@ValueofDB:tblMaintainNote_id@SPFieldLink:Solved=2@SPFieldLink:SCompanyID=@ValueofDB:tblMaintainNote_SCompanyID@SPFieldLink:createBy=@ValueofDB:tblMaintainNote_createBy@SPFieldLink:createTime=@ValueofDB:tblMaintainNote_createTime@SPFieldLink:lastUpdateBy=@ValueofDB:tblMaintainNote_createBy@SPFieldLink:lastUpdateTime=@ValueofDB:tblMaintainNote_lastUpdateTime@SPFieldLink:isAuto=1,retCode,retVal)}
			</sql>
			<sql>insert into OAMyWorkFlow(id,applyDate,applyType,tableName,keyId,createBy,checkPerson,currentNode,createtime,lastUpdatetime,nextNodeIds,departmentCode,statusId)
select 'w'+id,BillDate,(select id from oaworkflowtemplate where templateFile='CRMClientRevisit'),'CRMClientRevisit',id,createBy,';'+createBy+';',0,createtime,lastUpdatetime,'',(select departmentCode from tblEmployee a where a.id=CRMClientRevisit.CreateBy),0 from CRMClientRevisit
where id='9'+@ValueofDB:tblMaintainNote_id</sql>
		</exec>
				<!-- 生成 客户回访单记录客户日志 -->
		<exec condition="&quot;@SqlReturn:GenerateVisitBill&quot;==&quot;1&quot;&amp;&amp;&quot;@Sess:BillOper&quot; == &quot;add&quot;">
			<sql>insert into CRMClientInfoLog(id,clientId,billType,context,createBy,createTime,relationId) values('9'+@ValueofDB:tblMaintainNote_id,@ValueofDB:f_brother,'CRMClientRevisit',@ValueofDB:tblMaintainNote_BillDate+@Locale:CRM.difineCRM.BackVisit+@Locale:CRM.difineCRM.tblMaintainNote,@ValueofDB:tblMaintainNote_createBy,@ValueofDB:tblMaintainNote_createTime,'9'+@ValueofDB:tblMaintainNote_id)</sql> 
		</exec>
		
	<exec condition="&quot;@MEM:CRMClientRevisit_IsStatart&quot; != &quot;1&quot;">
	<sql>update CRMClientRevisit set workFlowNodeName='finish',workFlowNode='-1',checkPersons=''  where id='9'+@ValueofDB:tblMaintainNote_id</sql>
	</exec>
		
		<!--更新客户回访单连续号-->
		<exec condition="&quot;@SqlReturn:GenerateVisitBill&quot;==&quot;1&quot; &amp;&amp; &quot;@MEM:BillNoSequence&quot;==&quot;true&quot;">  
		<sql>update tblCodeGenerate set curValue=curValue+1 where code='RV'</sql>
		</exec>	
				
		<!-- 生成工作计划 -->
		<exec condition="&quot;@SqlReturn:GenerateVisitBill&quot;==&quot;1&quot; &amp;&amp; &quot;@SqlReturn:VisitEmployee&quot;!=&quot;&quot;">
			<sql type="procedure">
			{call proc_insert(tblDayWorkPlan,id=9@ValueofDB:tblMaintainNote_id@SPFieldLink:DepartmentCode=@SqlReturn:VisitDepartment@SPFieldLink:EmployeeID=@SqlReturn:VisitEmployee@SPFieldLink:title=@Locale:CRM.difineCRM.AddServiceLog，@Locale:CRM.difineCRM.BillNo @ValueofDB:tblMaintainNote_BillNo ，@Locale:CRM.difineCRM.ClientRevisit @SPFieldLink:content=@Locale:CRM.difineCRM.AddServiceLog，@Locale:CRM.difineCRM.BillNo @ValueofDB:tblMaintainNote_BillNo ，@Locale:CRM.difineCRM.ClientRevisit @SPFieldLink:createBy=@SqlReturn:createBy@SPFieldLink:createTime=@ValueofDB:tblMaintainNote_createTime@SPFieldLink:SCompanyID=@ValueofDB:tblMaintainNote_SCompanyID@SPFieldLink:time=0@SPFieldLink:BeginDate=@ValueofDB:tblMaintainNote_BillDate@SPFieldLink:EndDate=@ValueofDB:tblMaintainNote_BillDate@SPFieldLink:workFlowNodeName=notApprove@SPFieldLink:grade=3,retCode,retVal)}</sql>
		</exec>
		
	<exec condition="&quot;@MEM:tblDayWorkPlan_IsStatart&quot; != &quot;1&quot;">
	<sql>update tblDayWorkPlan set workFlowNodeName='finish',workFlowNode='-1',checkPersons=''  where id='9'+@ValueofDB:tblMaintainNote_id</sql>
	</exec>		
	</sql>
</define>

<!-- 维修记录 删除时操作 -->
<define name="tblMaintainNote_del">
	<sql type="condition">
		<condition>
		<select>select createBy from tblMaintainNote where createBy != @Sess:UserId</select>
		</condition>
		<exec condition="&quot;@MEM:tblMaintainNote_IsStatart&quot; != &quot;1&quot;">
		<sql type="define">tblMaintainNote_Del_One</sql>
		</exec>
	</sql>
</define>
		
<!-- 维修记录 删除时操作 -->
<define name="tblMaintainNote_Del_One">
	<sql type="condition">
		<condition>
			<select>select 'ExistError1' as ExistError1 from CRMClientRevisit where RefBillType='tblMaintainNote' and RefBillID=@ValueofDB:tblMaintainNote_id and isAuto='0'</select>
			<select>select '9'+@ValueofDB:CRMPeriodicExamine_id as DayWorkPlanID</select>
			<select>select 'ExistAudit' as ExistAudit from CRMClientRevisit where RefBillType='tblMaintainNote' and RefBillID=@ValueofDB:tblMaintainNote_id and workFlowNodeName='finish' and isAuto='1'</select>
		</condition>
		<!-- 定期检测单被引用，则不能执行此操作 -->
		<exec condition="&quot;@SqlReturn:ExistError1&quot;==&quot;ExistError1&quot;">
		<error>RefBill.operate.error</error>
		</exec>
		<!-- 客户回访单已被审核，则不能执行此操作 -->
		<exec condition="&quot;@MEM:CRMClientRevisit_IsStatart&quot;==&quot;1&quot; &amp;&amp; &quot;@SqlReturn:ExistAudit&quot;==&quot;ExistAudit&quot;">
			<error>CRMClientRevisit.Audit.error</error>
		</exec>
	
		<!-- 删除 客户回访单 工作计划 -->
		<exec condition="true">
		<sql>delete from CRMClientRevisit where RefBillType='tblMaintainNote' and RefBillID=@ValueofDB:tblMaintainNote_id and isAuto='1'</sql>
		<sql>delete from tblDayWorkPlan where id=@SqlReturn:DayWorkPlanID</sql>
		</exec>		
						<!--记录客户日志
		<exec condition="&quot;@Sess:BillOper&quot; == &quot;delete&quot;">
		<sql>delete from CRMClientInfoLog where id=@ValueofDB:tblMaintainNote_id</sql>
		<sql>delete from CRMClientInfoLog where id='9'+@ValueofDB:tblMaintainNote_id</sql>
		</exec>
		-->
		</sql>
</define>

<!-- 客户回访单 增加时操作 -->
<define name="CRMClientRevisit_add">
	<sql type="condition">
		<!-- 更新 客户资料 上次联系时间 -->
		<exec condition="true">
			<sql>update CRMClientInfo set LastContractTime=@ValueofDB:CRMClientRevisit_lastUpdateTime where id=@ValueofDB:f_brother</sql>
		</exec>
	</sql>
	<sql type="condition">
		<!-- 更新邻居表关联ID或客户名称 -->
		<exec condition="true">
			<sql>update CRMClientRevisit set f_brother=ClientId where id=@ValueofDB:CRMClientRevisit_id and f_brother='' and ClientId!=''</sql>
			<sql>update CRMClientRevisit set ClientId=f_brother where id=@ValueofDB:CRMClientRevisit_id and f_brother!='' and ClientId=''</sql>
		</exec>
		<!-- 记录客户日志
		<exec condition="&quot;@Sess:BillOper&quot; == &quot;add&quot;">
  			<sql>insert into CRMClientInfoLog(id,clientId,billType,context,createBy,createTime,relationId) values(@ValueofDB:id,@ValueofDB:ClientId,'CRMClientRevisit',@ValueofDB:BillDate+@Locale:CRM.difineCRM.BackVisit+@ValueofDB:Subject,@Sess:UserId,@ValueofDB:createTime,@ValueofDB:id)</sql> 
  		</exec>
  		--> 
	</sql>
	<!--根据情况调用另外一个define操作-->	
	<sql type="condition">
		<!--不启用审核流-->
		<exec condition="&quot;@MEM:CRMClientRevisit_IsStatart&quot; == &quot;0&quot; &amp;&amp; @MEM:OpenInvoice==false">
			<sql type="define">CRMClientRevisit_add_Audit</sql>
		</exec>
	</sql>
</define>

<define name="CRMClientRevisit_add_Audit">
	<sql type="condition">
		<condition>
			<select>select id as CRMcmplaintsid from CRMcomplaints where id=(select substring(id,2,len(id)-1) from CRMClientRevisit where id=@ValueofDB:CRMClientRevisit_id)</select>
		</condition>
		<!-- 修改回访状态为已完成 
		<exec condition="true">
			<sql>update CRMClientRevisit set RevisitStatus=3 where id=@ValueofDB:CRMClientRevisit_id</sql>
		</exec>
		-->
		<!-- 回填客户投诉单 -->
		<exec condition="&quot;@SqlReturn:CRMcmplaintsid&quot; != &quot;null&quot; &amp;&amp; &quot;@SqlReturn:CRMcmplaintsid&quot;.length != 0">
			<sql>update CRMcomplaints set isVisit=1,TalkbackEmployeeID=@ValueofDB:CRMClientRevisit_EmployeeID,Result=@ValueofDB:CRMClientRevisit_DealResult where id=@SqlReturn:CRMcmplaintsid</sql>
		</exec>
	</sql>
</define>
<!--客户回访单扩展按钮 批量完结-->
<define name="CRMClientRevisit_confirm">
<sql type="condition">
<condition>
<select>select CRMClientRevisit.id,CRMClientRevisit.workFlowNodeName,RevisitStatus from CRMClientRevisit where id=@ValueofDB:CRMClientRevisit_id</select>
<select>select EmpFullName from tblEmployee where id=@Sess:UserId</select>
</condition>
<exec condition="&quot;@SqlReturn:workFlowNodeName&quot;!= &quot;finish&quot;">
<error>workFlowNodeName.notApprove3.error</error>
</exec>
<exec condition="&quot;@SqlReturn:RevisitStatus&quot; == &quot;3&quot;">
<error>RevisitStatus.finish.error</error>
</exec>
<exec condition="&quot;@SqlReturn:RevisitStatus&quot;!= &quot;3&quot;">
<sql>update CRMClientRevisit set RevisitStatus=3 where id=@ValueofDB:CRMClientRevisit_id</sql>
<!--每次审核保留最后一次审核人或反审核到主表,同时插入审核日志 ,@Locale:CRM.difineCRM.ClientBackVisitLevelOne-->
<sql>update CRMClientRevisit set workFlowNodeName='finish',ConfirmID=@Sess:UserId,ConfirmDate=@MEM:sysLongDate where id=@ValueofDB:CRMClientRevisit_id</sql>
</exec>
</sql>
</define>
<!-- 客户回访单 删除时操作 -->
<define name="CRMClientRevisit_del">
	<!--根据情况调用另外一个define操作-->	
	<sql type="condition">
		<condition>
			<!-- 判断是否是从客户投诉自动生成而来，如果是不允许删除 -->
			<select>select id as CRMcomplaintsID from CRMcomplaints where id=substring(@ValueofDB:CRMClientRevisit_id,2,len(@ValueofDB:CRMClientRevisit_id)-1)</select>
		</condition>
		<exec condition="&quot;@SqlReturn:CRMcomplaintsID&quot; != &quot;null&quot; &amp;&amp; &quot;@SqlReturn:CRMcomplaintsID&quot;.length !=0">
			<error>CRMClientRevisit.delete.error</error>
		</exec>
		<!--不启用审核流-->
		<exec condition="&quot;@MEM:CRMClientRevisit_IsStatart&quot; == &quot;0&quot; &amp;&amp; @MEM:OpenInvoice==false">
			<sql type="define">CRMClientRevisit_del_Audit</sql>
		</exec>

	</sql>
</define>

<define name="CRMClientRevisit_del_Audit">
	<sql type="condition">
		<!-- 修改回访状态为未完成 -->
		<exec condition="true">
			<sql>update CRMClientRevisit set RevisitStatus=1 where id=@ValueofDB:CRMClientRevisit_id</sql>
		</exec>

	</sql>
</define>
<!-- 客户回访单 修改前操作 -->
<define name="CRMClientRevisit_before_update">
	<sql type="condition">
	<!--不启用审核流-->
		<exec condition="&quot;@MEM:CRMClientRevisit_IsStatart&quot; == &quot;0&quot; &amp;&amp; @MEM:OpenInvoice==false">
			<sql type="define">CRMClientRevisit_update_Audit</sql>
		</exec>
	</sql>
</define>
<define name="CRMClientRevisit_update_Audit">
	<sql type="condition">
		<!-- 修改回访状态为未完成 -->
		<exec condition="true">
			<sql>update CRMClientRevisit set RevisitStatus=2 where id=@ValueofDB:CRMClientRevisit_id</sql>
		</exec>

	</sql>
</define>
<!--公司目标管理模块-->
<define name="tblCompanyGoal_Add">
 <sql type="condition">
<condition>
	<!--公司目标每种类型只能有一个判断是否重复-->
  <select>
  	select Count(*) as CountType from tblCompanyGoal where goalType=@ValueofDB:tblCompanyGoal_goalType and year=@ValueofDB:tblCompanyGoal_year 
  </select> 
  <!--查询公司目标重复的当前选择的目标类型-->
  <select>select case when @Sess:Local='zh_CN' then zh_CN
            when @Sess:Local='en' then en
            when @Sess:Local='zh_TW' then Zh_TW end as goalType
 from tbllanguage where id=(select languageid from tblDBEnumerationItem
where enumId=(select id from  tblDBEnumeration where enumName='goalType')
and enumValue=@ValueofDB:tblCompanyGoal_goalType)</select>
  <!--查询当前公司目标明细月份最小值跟最大值-->
  <select>select isNull(min(month),0) as MinMonth,isNull(max(month),0) as MaxMonth from tblCompanyGoalDet where f_ref=@ValueofDB:tblCompanyGoal_id</select>
    <!--查询当前公司目标明细月份值-->
  <select>select DeMonth  from  (select count(month) as DeMonth from tblCompanyGoalDet where f_ref=@ValueofDB:tblCompanyGoal_id group by month) s where s.DeMonth &gt; 1</select>
  <!--查询当前公司目标总月份-->
  <select>select count(month) as CountMonth from tblCompanyGoalDet where f_ref=@ValueofDB:tblCompanyGoal_id</select>
  <select>select tblCompanyGoalDet.goal as goal,tblCompanyGoalDet.lowgoal as lowgoal,tblCompanyGoalDet.highgoal as highgoal from tblCompanyGoalDet left join tblCompanyGoal on tblCompanyGoalDet.f_ref=@ValueofDB:tblCompanyGoal_id</select>
  </condition>
  <!--判断公司目标类型是否重复-->
 <exec condition="@SqlReturn:CountType &gt; 1">
   <error>goalType.repeat.error,@SqlReturn:goalType</error>
  </exec>
    <!--判断年度是否输入正确--> 
  <exec condition="@ValueofDB:tblCompanyGoal_year &lt; 1700 || &quot;@ValueofDB:tblCompanyGoal_year&quot;.length !=4">
	<error>years.error</error>
  </exec>
   <!--判断公司目标月份不能小于1不能大于12-->
 <exec condition="@SqlReturn:MinMonth &lt; 1 || @SqlReturn:MaxMonth &gt; 12">
   <error>month.out.error</error>
  </exec>
    <!--判断公司目标月份是否重复-->
 <exec condition="@SqlReturn:DeMonth &gt; 1">
   <error>month.echo.error</error>
  </exec>
    <!--判断目标，保底目标，冲刺目标是否输入正确-->
  <exec condition="@SqlReturn:lowgoal &lt;0||@SqlReturn:goal &lt;0||@SqlReturn:highgoal &lt;0">
	<error>goal.error</error>
  </exec>
      <!--添加时将未添加月份插入到明细表-->
 <exec condition="@SqlReturn:CountMonth &lt; 12">
    <sql type="procedure">
		{call proc_iterateExeProc(select enumValue as month@SPFieldLink:substring(replace(newid()@SPFieldLink:'-'@SPFieldLink:'')@SPFieldLink:1@SPFieldLink:30) as sdid from tblDBEnumerationItem where enumId=(select id from tblDBEnumeration where enumName='Month') and enumValue not in (select month from tblCompanyGoalDet where f_ref='@ValueofDB:tblCompanyGoal_id'),proc_insert,'tblCompanyGoalDet'@ParamLink:'id='+@sdid+'@SPFieldLink:f_ref=@ValueofDB:tblCompanyGoal_id@SPFieldLink:month='+@month+'@ParamNum:@SPFieldLink:detOrderNo='+@month+'@ParamNum:@SPFieldLink:highGoal=0@ParamNum:@SPFieldLink:Goal=0@ParamNum:@SPFieldLink:lowGoal=0@ParamNum:@SPFieldLink:comPlete=0@ParamNum:@SPFieldLink:SCompanyID=@Sess:SCompanyID',retCode,retVal)}
		</sql>
  </exec>
  </sql>
  </define>
  <!--公司目标统计部门目标拓展按钮-->
<define name="CountDepartmentGoal">
 <sql type="condition">
 	<condition>
 	<select>
  select tblCompanyGoal.id as id from tblDepartmentGoal left join tblCompanyGoal on (tblCompanyGoal.year=tblDepartmentGoal.year and tblDepartmentGoal.goalType=tblCompanyGoal.goalType) where tblCompanyGoal.id=@ValueofDB:tblCompanyGoal_id
   </select>
  </condition>
 <exec condition="&quot;@SqlReturn:id&quot;.length !=0">
    <!--根据部门目标统计公司各月目标数--> 
    <sql type="procedure">
		{call proc_iterateExeProc(select tblDepartmentGoalDet.month as month@SPFieldLink:tblCompanyGoal.id as f_ref@SPFieldLink:sum(tblDepartmentGoalDet.lowGoal) as lowGoal@SPFieldLink:sum(tblDepartmentGoalDet.Goal) as Goal@SPFieldLink:sum(tblDepartmentGoalDet.highGoal) as highGoal from tblDepartmentGoal left join tblDepartmentGoalDet on tblDepartmentGoal.id=tblDepartmentGoalDet.f_ref left join tblCompanyGoal on (tblCompanyGoal.year=tblDepartmentGoal.year and tblDepartmentGoal.goalType=tblCompanyGoal.goalType) left join tblCompanyGoalDet on (tblCompanyGoalDet.f_ref=tblCompanyGoal.id and tblCompanyGoalDet.month=tblDepartmentGoalDet.month) where tblCompanyGoal.id='@ValueofDB:tblCompanyGoal_id' group by tblDepartmentGoalDet.month@SPFieldLink:tblCompanyGoal.id,proc_update,'tblCompanyGoalDet'@ParamLink:'lowGoal='+@lowGoal+'@ParamNum:@SPFieldLink:Goal='+@Goal+'@ParamNum:@SPFieldLink:highGoal='+@highGoal+'@ParamNum:'@ParamLink:'month='+@month+'@SPFieldLink:and f_ref='+@f_ref,retCode,retVal)}
		</sql>
		
		<sql type="procedure">
		{call proc_iterateExeProc(select tblCompanyGoal.id as id@SPFieldLink:sum(tblDepartmentGoal.lowGoal) as lowGoal@SPFieldLink:sum(tblDepartmentGoal.Goal) as goaltotal@SPFieldLink:sum(tblDepartmentGoal.highGoal) as highGoal from tblDepartmentGoal left join tblCompanyGoal on (tblCompanyGoal.year=tblDepartmentGoal.year and tblDepartmentGoal.goalType=tblCompanyGoal.goalType) where tblCompanyGoal.id='@ValueofDB:tblCompanyGoal_id' group by tblCompanyGoal.id,proc_update,'tblCompanyGoal'@ParamLink:'lowGoal='+@lowGoal+'@ParamNum:@SPFieldLink:Goal='+@goaltotal+'@ParamNum:@SPFieldLink:highGoal='+@highGoal+'@ParamNum:'@ParamLink:'id='+@id,retCode,retVal)}
		</sql>
  </exec>
  </sql>
  </define>
  
  <!--部门目标管理模块-->
<define name="tblDepartmentGoal_Add">
 <sql type="condition">
<condition>
	<!--部门目标每种类型只能有一个判断是否重复-->
  <select>
  	select Count(*) as CountType from tblDepartmentGoal where DepartmentCode=@ValueofDB:tblDepartmentGoal_DepartmentCode and goalType=@ValueofDB:tblDepartmentGoal_goalType and year=@ValueofDB:tblDepartmentGoal_year 
  </select> 
  <!--查询部门目标重复的当前选择的目标类型-->
  <select>select case when @Sess:Local='zh_CN' then zh_CN
            when @Sess:Local='en' then en
            when @Sess:Local='zh_TW' then Zh_TW end as goalType
 from tbllanguage where id=(select languageid from tblDBEnumerationItem
where enumId=(select id from  tblDBEnumeration where enumName='goalType')
and enumValue=@ValueofDB:tblDepartmentGoal_goalType)</select>
  <!--查询当前部门目标明细月份最小值跟最大值-->
  <select>select isNull(min(month),0) as MinMonth,isNull(max(month),0) as MaxMonth from tblDepartmentGoalDet where f_ref=@ValueofDB:tblDepartmentGoal_id
  </select>
    <!--查询当前部门目标明细月份值-->
  <select>
  	select DeMonth  from  (select count(month) as DeMonth from tblDepartmentGoalDet where f_ref=@ValueofDB:tblDepartmentGoal_id group by month) s where s.DeMonth &gt; 1 
  </select>
   <!--查询当前部门目标总月份-->
  <select>
  select count(month) as CountMonth from tblDepartmentGoalDet where f_ref=@ValueofDB:tblDepartmentGoal_id
   </select>
    <select>select tblDepartmentGoalDet.goal as goal,tblDepartmentGoalDet.lowgoal as lowgoal,tblDepartmentGoalDet.highgoal as highgoal from tblDepartmentGoalDet left join tblDepartmentGoal on tblDepartmentGoalDet.f_ref=@ValueofDB:tblDepartmentGoal_id</select>
  </condition>
  <!-- 判断是否输入真确的年度-->
  <exec condition="@ValueofDB:tblDepartmentGoal_year &lt; 1700 || &quot;@ValueofDB:tblDepartmentGoal_year&quot;.length !=4">
	<error>years.error</error>
  </exec>
  <!--判断部门目标类型是否重复-->
 <exec condition="@SqlReturn:CountType &gt; 1">
   <error>goalType.depart.error,@SqlReturn:goalType</error>
  </exec>
   <!--判断部门目标月份不能小于1不能大于12-->
 <exec condition="@SqlReturn:MinMonth &lt; 1 || @SqlReturn:MaxMonth &gt; 12">
   <error>month.out.error</error>
  </exec>
      <!--判断目标，保底目标，冲刺目标是否输入正确-->
  <exec condition="@SqlReturn:lowgoal &lt;0||@SqlReturn:goal &lt;0||@SqlReturn:highgoal &lt;0">
	<error>goal.error</error>
  </exec>
    <!--判断部门目标月份是否重复-->
 <exec condition="@SqlReturn:DeMonth &gt; 1">
   <error>month.echo.error</error>
  </exec>
    <!--添加时将未添加月份插入到明细表-->
 <exec condition="@SqlReturn:CountMonth &lt; 12">
    <sql type="procedure">
		{call proc_iterateExeProc(select enumValue as month@SPFieldLink:substring(replace(newid()@SPFieldLink:'-'@SPFieldLink:'')@SPFieldLink:1@SPFieldLink:30) as sdid from tblDBEnumerationItem where enumId=(select id from tblDBEnumeration where enumName='Month') and enumValue not in (select month from tblDepartmentGoalDet where f_ref='@ValueofDB:tblDepartmentGoal_id'),proc_insert,'tblDepartmentGoalDet'@ParamLink:'id='+@sdid+'@SPFieldLink:f_ref=@ValueofDB:tblDepartmentGoal_id@SPFieldLink:month='+@month+'@ParamNum:@SPFieldLink:detOrderNo='+@month+'@ParamNum:@SPFieldLink:highGoal=0@ParamNum:@SPFieldLink:Goal=0@ParamNum:@SPFieldLink:lowGoal=0@ParamNum:@SPFieldLink:comPlete=0@ParamNum:@SPFieldLink:SCompanyID=@Sess:SCompanyID',retCode,retVal)}
		</sql>
  </exec>

  </sql>
  </define>
  
   <!--职员目标管理模块-->
<define name="tblEmployeeGoal_Add">
 <sql type="condition">
<condition>
	<!--职员目标每种类型只能有一个判断是否重复-->
  <select>
  	select Count(*) as CountType from tblEmployeeGoal where EmployeeID=@ValueofDB:tblDepartmentGoal_EmployeeID and goalType=@ValueofDB:tblEmployeeGoal_goalType and year=@ValueofDB:tblEmployeeGoal_year 
  </select> 
  <select>select tblEmployee.EmpFullName as EmpName from tblEmployeeGoal left join tblEmployee on tblEmployee.id=tblEMployeeGoal.EmployeeID where EmployeeID=@ValueofDB:tblDepartmentGoal_EmployeeID and goalType=@ValueofDB:tblEmployeeGoal_goalType and year=@ValueofDB:tblEmployeeGoal_year</select>
  <!--查询职员目标重复的当前选择的目标类型-->
  <select>select case when @Sess:Local='zh_CN' then zh_CN
            when @Sess:Local='en' then en
            when @Sess:Local='zh_TW' then Zh_TW end as goalType
 from tbllanguage where id=(select languageid from tblDBEnumerationItem
where enumId=(select id from  tblDBEnumeration where enumName='goalType')
and enumValue=@ValueofDB:tblEmployeeGoal_goalType)</select>
  <!--查询当前职员目标明细月份最小值跟最大值-->
  <select>select isNull(min(month),0) as MinMonth,isNull(max(month),0) as MaxMonth from tblEmployeeGoalDet where f_ref=@ValueofDB:tblEmployeeGoal_id
  </select>
    <!--查询当前职员目标明细月份值-->
  <select>
  	select DeMonth  from  (select count(month) as DeMonth from tblEmployeeGoalDet where f_ref=@ValueofDB:tblEmployeeGoal_id group by month) s where s.DeMonth &gt; 1 
  </select>
   <!--查询当前职员目标总月份-->
  <select>
  select count(month) as CountMonth from tblEmployeeGoalDet where f_ref=@ValueofDB:tblEmployeeGoal_id
   </select>
    <select>select tblEmployeeGoalDet.goal as goal,tblEmployeeGoalDet.lowgoal as lowgoal,tblEmployeeGoalDet.highgoal as highgoal from tblEmployeeGoalDet left join tblEmployeeGoal on tblEmployeeGoalDet.f_ref=@ValueofDB:tblEmployeeGoal_id</select>
  </condition>
  <!-- 判断是否输入真确的年度-->
  <exec condition="@ValueofDB:tblEmployeeGoal_year &lt; 1700 || &quot;@ValueofDB:tblEmployeeGoal_year&quot;.length !=4">
	<error>years.error</error>
  </exec>
  <!--判断职员目标类型是否重复-->
 <exec condition="@SqlReturn:CountType &gt; 1">
   <error>goalType.employee.error,@SqlReturn:goalType,@SqlReturn:EmpName</error>
  </exec>
   <!--判断职员目标月份不能小于1不能大于12-->
 <exec condition="@SqlReturn:MinMonth &lt; 1 || @SqlReturn:MaxMonth &gt; 12">
   <error>month.out.error</error>
  </exec> 
  <!--判断目标，保底目标，冲刺目标是否输入正确-->
  <exec condition="@SqlReturn:lowgoal &lt;0||@SqlReturn:goal &lt;0||@SqlReturn:highgoal &lt;0">
	<error>goal.error</error>
  </exec>
    <!--判断职员目标月份是否重复-->
 <exec condition="@SqlReturn:DeMonth &gt; 1">
   <error>month.echo.error</error>
  </exec>
   <!--添加时将未添加月份插入到明细表-->
 <exec condition="@SqlReturn:CountMonth &lt; 12">
    <sql type="procedure">
		{call proc_iterateExeProc(select enumValue as month@SPFieldLink:substring(replace(newid()@SPFieldLink:'-'@SPFieldLink:'')@SPFieldLink:1@SPFieldLink:30) as sdid from tblDBEnumerationItem where enumId=(select id from tblDBEnumeration where enumName='Month') and enumValue not in (select month from tblEmployeeGoalDet where f_ref='@ValueofDB:tblEmployeeGoal_id'),proc_insert,'tblEmployeeGoalDet'@ParamLink:'id='+@sdid+'@SPFieldLink:f_ref=@ValueofDB:tblEmployeeGoal_id@SPFieldLink:month='+@month+'@ParamNum:@SPFieldLink:detOrderNo='+@month+'@ParamNum:@SPFieldLink:highGoal=0@ParamNum:@SPFieldLink:Goal=0@ParamNum:@SPFieldLink:lowGoal=0@ParamNum:@SPFieldLink:comPlete=0@ParamNum:@SPFieldLink:SCompanyID=@Sess:SCompanyID',retCode,retVal)}
		</sql>
  </exec>

  </sql>
  </define>
  
  <!--业绩录入添加-->
<define name="tblEmployeeScore_Add">
 <sql type="condition">
<condition>
	<!--查询当前业绩录入的月份-->
<select>select Month(@ValueofDB:tblEmployeeScore_BillDate) as Month,Year(@ValueofDB:tblEmployeeScore_BillDate) as Year from tblEmployeeScore where id=@ValueofDB:tblEmployeeScore_id</select> 
  </condition>

  </sql>
  </define>
  
  	<!--业绩录入删除-->
  <define name="tblEmployeeScore_Delete">
 <sql type="condition">
<condition>
	<!--查询当前业绩录入的月份-->
   <select>select id,Month(BillDate) as Month,Year(BillDate) as Year,score,EmployeeID,DepartmentCode,
   	       goalType from tblEmployeeScore where id=@ValueofDB:tblEmployeeScore_id</select> 
  </condition>
 
  </sql>
  </define>

<!-- 评价项目设置 数据操作 -->
<define name="CRMAppraise_operate">
	<sql type="condition">
		<!-- 删除操作 -->
		<exec condition="&quot;@Sess:BillOper&quot;==&quot;delete&quot;">
			<sql type="define">CRMAppraise_operate_define</sql>
		</exec>
		<!-- 修改后必须重启系统，否则不允许修改 -->
		<exec condition="&quot;@Sess:BillOper&quot;!=&quot;delete&quot;">
			<confirm yesDefine="CRMAppraise_System_Restart" noDefine="CRMAppraise_System_NoRestart">tblSysDeploy.update.Alert</confirm>
		</exec>
	</sql>
</define>

<!-- 修改后 重启 -->
<define name="CRMAppraise_System_Restart">
	<!-- 修改define -->
	<sql type="condition">
		<exec condition="true">
			<sql type="define">CRMAppraise_operate_define</sql>
		</exec>
	</sql>
	<!-- 重启系统 -->
	<sql type="condition">
		<exec condition="true">
			<sql type="define">System_Restart</sql>
		</exec>
	</sql>
</define>
	
<!-- 修改后 不重启 -->
<define name="CRMAppraise_System_NoRestart">
	<!-- 修改define -->
	<sql type="condition">
		<exec condition="true">
			<sql type="define">CRMAppraise_operate_define</sql>
		</exec>
	</sql>
</define>
	
<!-- 评价项目设置 数据操作 -->
<define name="CRMAppraise_operate_define">
	<sql type="condition">
		<condition>
		</condition>
		<exec condition="true">
			<sql type="procedure">
			{call proc_updateAppraiseObject(CRMAppraise,@ValueofDB:CRMAppraise_id,@Sess:BillOper,@Sess:SCompanyID,errorCode,errorVal)}
			</sql>
		</exec>
			<!-- 程序报错 提示 ，被使用到的不能删除：,@ProcReturn:errorVal -->
		<exec condition="&quot;@ProcReturn:errorCode&quot;==&quot;-2222&quot;"> 	
		<error>SysObjectError.error</error>
	</exec>
	</sql>
</define>

<!-- 评价分数设置 数据操作 -->
<define name="CRMAppraiseMark_operate">
	<sql type="condition">
		<condition>
			<select>select 'ExistError1' as ExistError1 from CRMAppraiseMark where DefaultScore=1 group by DefaultScore having count(*)&gt;1</select>
		</condition>
		<!-- 默认项不能多个 -->
		<exec condition="&quot;@SqlReturn:ExistError1&quot;==&quot;ExistError1&quot;">
			<error>DefaultScore.operate.ExistError</error>
		</exec>
		<!-- 删除操作 -->
		<exec condition="&quot;@Sess:BillOper&quot;==&quot;delete&quot;">
			<sql type="define">CRMAppraiseMark_operate_define</sql>
		</exec>
		<!-- 修改后必须重启系统，否则不允许修改 -->
		<exec condition="&quot;@Sess:BillOper&quot;!=&quot;delete&quot;">
			<confirm yesDefine="CRMAppraiseMark_System_Restart" noDefine="CRMAppraiseMark_System_NoRestart">tblSysDeploy.update.Alert</confirm>
		</exec>
	</sql>
</define>

<!-- 修改后 重启 -->
<define name="CRMAppraiseMark_System_Restart">
	<!-- 修改define -->
	<sql type="condition">
		<exec condition="true">
			<sql type="define">CRMAppraiseMark_operate_define</sql>
		</exec>
	</sql>
	<!-- 重启系统 -->
	<sql type="condition">
		<exec condition="true">
			<sql type="define">System_Restart</sql>
		</exec>
	</sql>
</define>
	
<!-- 修改后 不重启 -->
<define name="CRMAppraiseMark_System_NoRestart">
	<!-- 修改define -->
	<sql type="condition">
		<exec condition="true">
			<sql type="define">CRMAppraiseMark_operate_define</sql>
		</exec>
	</sql>
</define>

<!-- 评价分数设置 数据操作 -->
<define name="CRMAppraiseMark_operate_define">
	<sql type="condition">
		<condition></condition>
		<exec condition="true">
			<sql type="procedure">
			{call proc_updateAppraiseObject(CRMAppraiseMark,@ValueofDB:CRMAppraiseMark_id,@Sess:BillOper,@Sess:SCompanyID,errorCode,errorVal)}
			</sql>
		</exec>
		<!-- 程序报错 提示 ，被使用到的不能删除：,@ProcReturn:errorVal -->
		<exec condition="&quot;@ProcReturn:errorCode&quot;==&quot;-2222&quot;"> 	
		<error>SysObjectError.error</error>
		</exec>
	</sql>
</define>

<!-- 回访项目设置 数据操作 -->
<define name="CRMCallItem_operate">
	<sql type="condition">
		<!-- 删除操作 -->
		<exec condition="&quot;@Sess:BillOper&quot;==&quot;delete&quot;">
			<sql type="define">CRMCallItem_operate_define</sql>
		</exec>
		<!-- 修改后必须重启系统，否则不允许修改 -->
		<exec condition="&quot;@Sess:BillOper&quot;!=&quot;delete&quot;">
			<confirm yesDefine="CRMCallItem_System_Restart" noDefine="CRMCallItem_System_NoRestart">tblSysDeploy.update.Alert</confirm>
		</exec>
	</sql>
</define>

<!-- 修改后 重启 -->
<define name="CRMCallItem_System_Restart">
	<!-- 修改define -->
	<sql type="condition">
		<exec condition="true">
			<sql type="define">CRMCallItem_operate_define</sql>
		</exec>
	</sql>
	<!-- 重启系统 -->
	<sql type="condition">
		<exec condition="true">
			<sql type="define">System_Restart</sql>
		</exec>
	</sql>
</define>
	
<!-- 修改后 不重启 -->
<define name="CRMCallItem_System_NoRestart">
	<!-- 修改define -->
	<sql type="condition">
		<exec condition="true">
			<sql type="define">CRMCallItem_operate_define</sql>
		</exec>
	</sql>
</define>

<!-- 回访项目设置 数据操作 -->
<define name="CRMCallItem_operate_define">
	<sql type="condition">
		<condition>
		</condition>
		<exec condition="true">
			<sql type="procedure">
			{call proc_updateAppraiseObject(CRMCallItem,@ValueofDB:CRMCallItem_id,@Sess:BillOper,@Sess:SCompanyID,errorCode,errorVal)}
			</sql>
		</exec>
		<!-- 程序报错 提示 ，被使用到的不能删除：xxxxx -->
		<exec condition="&quot;@ProcReturn:errorCode&quot;==&quot;-2222&quot;"> 	
		<error>SysObjectError.error</error>
		</exec>
	</sql>
</define>

<!-- 回访评价设置 数据操作 -->
<define name="CRMCalMark_operate">
	<sql type="condition">
		<condition>
			<select>select 'ExistError1' as ExistError1 from CRMCalMark where DefaultScore=1 group by DefaultScore having count(*)&gt;1</select>
		</condition>
		<!-- 默认项不能多个 -->
		<exec condition="&quot;@SqlReturn:ExistError1&quot;==&quot;ExistError1&quot;">
			<error>DefaultScore.operate.ExistError</error>
		</exec>
		<!-- 删除操作 -->
		<exec condition="&quot;@Sess:BillOper&quot;==&quot;delete&quot;">
			<sql type="define">CRMCalMark_operate_define</sql>
		</exec>
		<!-- 修改后必须重启系统，否则不允许修改 -->
		<exec condition="&quot;@Sess:BillOper&quot;!=&quot;delete&quot;">
			<confirm yesDefine="CRMCalMark_System_Restart" noDefine="CRMCalMark_System_NoRestart">tblSysDeploy.update.Alert</confirm>
		</exec>
	</sql>
</define>

<!-- 修改后 重启 -->
<define name="CRMCalMark_System_Restart">
	<!-- 修改define -->
	<sql type="condition">
		<exec condition="true">
			<sql type="define">CRMCalMark_operate_define</sql>
		</exec>
	</sql>
	<!-- 重启系统 -->
	<sql type="condition">
		<exec condition="true">
			<sql type="define">System_Restart</sql>
		</exec>
	</sql>
</define>
	
<!-- 修改后 不重启 -->
<define name="CRMCalMark_System_NoRestart">
	<!-- 修改define -->
	<sql type="condition">
		<exec condition="true">
			<sql type="define">CRMCalMark_operate_define</sql>
		</exec>
	</sql>
</define>

<!-- 回访评价设置 数据操作 -->
<define name="CRMCalMark_operate_define">
	<sql type="condition">
		<condition></condition>
		<exec condition="true">
			<sql type="procedure">
			{call proc_updateAppraiseObject(CRMCalMark,@ValueofDB:CRMCalMark_id,@Sess:BillOper,@Sess:SCompanyID,errorCode,errorVal)}
			</sql>
		</exec>
		<!-- 程序报错 提示 ，被使用到的不能删除：xxxxx -->
		<exec condition="&quot;@ProcReturn:errorCode&quot;==&quot;-2222&quot;"> 	
		<error>SysObjectError.error</error>
		</exec>
	</sql>
</define>

<!--客户接待单删除-->
<define name="tblDeskClerk_Add">
<sql type="condition">
	<exec condition="&quot;@MEM:tblDeskClerk_IsStatart&quot; != &quot;1&quot;">
	<sql type="define">tblDeskClerk_Add_One</sql>
	</exec>
  </sql>
  </define>
  
<define name="tblDeskClerk_Add_One">
<sql type="condition">
<condition>
   <select>select createBy from tblDeskClerk where createBy!=@Sess:UserId</select> 
  </condition>
	<exec condition="&quot;@SqlReturn:createBy&quot; != &quot;null&quot; &amp;&amp; &quot;@SqlReturn:createBy&quot;.length != 0">
		<!--发送即时消息给制单人-->
	<sql>insert into tblAdvice(id,send,Receive,Title,Content,RelationId,OperType,Status,exist,SendName,ReceiveName,
createBy,lastUpdateBy,createTime,lastUpdateTime)
select subString(cast(newid() as varchar(36)),1,30),@Sess:UserId,b.createBy,@Locale:CRM.difineCRM.YourClientReceiveAuditinged,'<a href="      javascript:mdiwin(''/UserFunctionQueryAction.do?parentTableName=&amp;tableName=tblDeskClerk&amp;src=menu&amp;noback=true&amp;keyId='+b.id+'&amp;operation=5&amp;noback=true&amp;winCurIndex=7'','''+@Locale:DeskClerk+''')">'+@Locale:CRM.difineCRM.YourClientReceiveAuditingedLook+'</a>',b.id,'send','noRead','all',se.EmpFullName,ce.EmpFullName,@Sess:UserId,@Sess:UserId,b.lastUpdateTime,b.lastUpdateTime from tblDeskClerk b left join tblEmployee ce on ce.id=b.createBy left join tblEmployee se on se.id=@Sess:UserId where b.id=@ValueofDB:tblDeskClerk_id</sql>
	</exec>
  </sql>
  </define>  

<define name="tblDeskClerk_Delete">
<sql type="condition">
	<exec condition="&quot;@MEM:tblDeskClerk_IsStatart&quot; != &quot;1&quot;">
	<sql type="define">tblDeskClerk_Delete_One</sql>
	</exec>
  </sql>
  </define>

<!--客户接待单删除-->
<define name="tblDeskClerk_Delete_One">
<sql type="condition">
<condition>
	<!--查询是否有客户接待评价单引用接待单-->
   <select>select DeskClerkNo,BillNo  from tblAppraise where DeskID=@ValueofDB:tblDeskClerk_id </select> 
   <select>select BillNo as ClerkNo from tblClerk where RelationID=@ValueofDB:tblDeskClerk_id </select>
  </condition>
  	<exec condition="&quot;@SqlReturn:DeskClerkNo&quot; != &quot;null&quot; &amp;&amp; &quot;@SqlReturn:DeskClerkNo&quot;.length != 0">	 					
		<error>DeskClerk.BillNo.error,@SqlReturn:BillNo</error>
		<!--提示:不允许删除，该单据已被接待评价单 引用-->
	</exec>
	<exec condition="&quot;@SqlReturn:ClerkNo&quot; != &quot;null&quot; &amp;&amp; &quot;@SqlReturn:ClerkNo&quot;.length != 0">	 					
		<error>ExistsClerk.BillNo.error,@SqlReturn:BillNo</error>
		<!--提示:不允许删除，该单据已被客户接待人 单据 引用-->
	</exec>
  </sql>
  </define>

<!--客户接待人增加-->
<define name="tblClerk_Add">
<sql type="condition">
<condition>
	<!--查询是否有客户接待评价单引用接待单-->
   <select>select DeskClerkNo,BillNo  from tblAppraise where DeskID=(select RelationID from tblClerk where id=@ValueofDB:tblClerk_id) </select> 
   <select>select BillNo as SourceBillNo from tblDeskClerk where (BillNo != @ValueofDB:tblClerk_RelationNo or CompanyCode != @ValueofDB:tblClerk_CompanyCode or DepartmentCode != @ValueofDB:tblClerk_DepartmentCode or EmployeeID != @ValueofDB:tblClerk_EmployeeID) and id=@ValueofDB:tblClerk_RelationID</select>
  </condition>
  	<exec condition="&quot;@SqlReturn:SourceBillNo&quot; != &quot;null&quot; &amp;&amp; &quot;@SqlReturn:SourceBillNo&quot;.length != 0">
	<error>NoChange.SourceBill.error</error>
	</exec>

	<exec condition="&quot;@MEM:tblClerk_IsStatart&quot; != &quot;1&quot;">
	<sql type="define">tblClerk_Add_One</sql>
	</exec>
  </sql>
  </define>  
  
<define name="tblClerk_Add_One">
<sql type="condition">
	<exec condition="true">
	<sql>update tblDeskClerk set DeskClerk=@ValueofDB:tblClerk_DeskClerk where id=@ValueofDB:tblClerk_RelationID</sql>
	</exec>
	

	<exec condition="true">
	<!--发送通知信息给客户接待单制单人
	<sql>insert into tblAdvice(id,Send,Receive,Title,Content,relationId,Status,exist,SendName,ReceiveName,
createBy,lastUpdateBy,createTime,lastUpdateTime)
select subString(cast(newid() as varchar(36)),1,30),@Sess:UserId,b.createBy,'客户接待单已安排了接待人','<a href="      javascript:mdiwin(''/UserFunctionQueryAction.do?parentTableName=&amp;tableName=tblDeskClerk&amp;src=menu&amp;noback=true&amp;keyId='+a.RelationID+'&amp;operation=5&amp;noback=true&amp;winCurIndex=7'',''客户接待单'')">你的客户接待单已经安排了接待人,请查看</a>',a.RelationID,'noRead','all',se.EmpFullName,ce.EmpFullName,@Sess:UserId,@Sess:UserId,a.lastUpdateTime,a.lastUpdateTime from tblClerk a left join tblDeskClerk b on a.RelationID=b.id left join tblEmployee ce on ce.id=b.createBy left join tblEmployee se on se.id=@Sess:UserId where a.id=@ValueofDB:tblClerk_id</sql>-->

	<!--发送即时消息给制单人-->
	<sql>insert into tblAdvice(id,send,Receive,Title,Content,RelationId,OperType,Status,exist,SendName,ReceiveName,
createBy,lastUpdateBy,createTime,lastUpdateTime)
select subString(cast(newid() as varchar(36)),1,30),@Sess:UserId,b.createBy,@Locale:CRM.difineCRM.ArrangeDeskClerk,'<a href="      javascript:mdiwin(''/UserFunctionQueryAction.do?parentTableName=&amp;tableName=tblDeskClerk&amp;src=menu&amp;noback=true&amp;keyId='+a.RelationID+'&amp;operation=5&amp;noback=true&amp;winCurIndex=7'','''+@Locale:DeskClerk+''')">'+@Locale:CRM.difineCRM.ArrangeDeskClerkLook+'</a>',a.RelationID,'send','noRead','all',se.EmpFullName,ce.EmpFullName,@Sess:UserId,@Sess:UserId,a.lastUpdateTime,a.lastUpdateTime from tblClerk a left join tblDeskClerk b on a.RelationID=b.id left join tblEmployee ce on ce.id=b.createBy left join tblEmployee se on se.id=@Sess:UserId where a.id=@ValueofDB:tblClerk_id</sql>
	</exec>
	

	<exec condition="&quot;@MEM:tblDeskClerk_IsStatart&quot; == &quot;1&quot;">
	<!--发送通知信息给客户接待单审核人	
	<sql>insert into tblAdvice(id,Send,Receive,Title,Content,relationId,Status,exist,SendName,ReceiveName,
createBy,lastUpdateBy,createTime,lastUpdateTime)
select subString(cast(newid() as varchar(36)),1,30),@Sess:UserId,m.id,'客户接待单已安排了接待人','<a href="      javascript:mdiwin(''/UserFunctionQueryAction.do?parentTableName=&amp;tableName=tblDeskClerk&amp;src=menu&amp;noback=true&amp;keyId='+a.RelationID+'&amp;operation=5&amp;noback=true&amp;winCurIndex=7'',''客户接待单'')">客户接待单已经安排了接待人,请查看</a>',a.RelationID,'noRead','all',k.EmpFullName,e.Assessor,@Sess:UserId,@Sess:UserId,a.lastUpdateTime,a.lastUpdateTime from tblClerk a left join tblDeskClerk b on a.RelationID=b.id left join tblEmployee k on k.id=@Sess:UserId join AuditingLog e on e.TableName='tblDeskClerk' and e.kid=a.RelationID and e.id=(select max(p.id) from AuditingLog p where p.TableName='tblDeskClerk' and p.kid=a.RelationID) left join tblEmployee m on m.EmpFullName=e.Assessor where a.id=@ValueofDB:tblClerk_id</sql>-->

		<!--发送即时消息-->
		<sql>insert into tblAdvice(id,send,Receive,Title,Content,RelationId,OperType,Status,exist,SendName,ReceiveName,
createBy,lastUpdateBy,createTime,lastUpdateTime)
select subString(cast(newid() as varchar(36)),1,30),@Sess:UserId,m.id,@Locale:CRM.difineCRM.ArrangeDeskClerk,'<a href="      javascript:mdiwin(''/UserFunctionQueryAction.do?parentTableName=&amp;tableName=tblDeskClerk&amp;src=menu&amp;noback=true&amp;keyId='+a.RelationID+'&amp;operation=5&amp;noback=true&amp;winCurIndex=7'','''+@Locale:DeskClerk+''')">'+@Locale:CRM.difineCRM.ArrangeDeskClerkLook+'</a>',a.RelationID,'send','noRead','all',k.EmpFullName,e.Assessor,@Sess:UserId,@Sess:UserId,a.lastUpdateTime,a.lastUpdateTime from tblClerk a left join tblDeskClerk b on a.RelationID=b.id left join tblEmployee k on k.id=@Sess:UserId join AuditingLog e on e.TableName='tblDeskClerk' and e.kid=a.RelationID and e.id=(select max(p.id) from AuditingLog p where p.TableName='tblDeskClerk' and p.kid=a.RelationID) left join tblEmployee m on m.EmpFullName=e.Assessor where a.id=@ValueofDB:tblClerk_id</sql>
	</exec>	
	</sql>
</define>	
	
 
<!--客户接待人删除-->
<define name="tblClerk_Delete">
<sql type="condition">
<condition>
	<!--查询是否有客户接待评价单引用接待单-->
	<select>select RelationID,RelationNo,DeskClerk from tblClerk where id=@ValueofDB:tblClerk_id</select>
   <select>select DeskClerkNo,BillNo  from tblAppraise where DeskID=(select RelationID from tblClerk where id=@ValueofDB:tblClerk_id) </select> 
  </condition>
  	<exec condition="&quot;@SqlReturn:DeskClerkNo&quot; != &quot;null&quot;">	 					
	<error>DeskClerk.BillNo.error,@SqlReturn:BillNo</error>
	<!--提示:不允许删除，该单据已被接待评价单 引用-->
	</exec>
	<exec condition="true">
	<sql>update tblDeskClerk set DeskClerk='' where id=@SqlReturn:RelationID</sql>
	</exec>
  </sql>
  </define>  
  <!--  任务分配 添加 -->
<define name="CRMTaskAssign_add">
	<!-- 修改define -->
	<sql type="condition">
		<condition>
		<select>select userId from CRMTaskAssign where id=@ValueofDB:CRMTaskAssign_id</select>
		</condition>
		<exec condition="&quot;@SqlReturn:userId&quot;!=&quot;null&quot; &amp;&amp;&quot;@SqlReturn:userId&quot;.length!=0">
		<sql type="define">CRMTaskAssign_add_operate</sql>
		</exec>

	</sql>
</define>

<define name="CRMTaskAssign_del">
<sql type="condition">
<condition>
		<select>select taskStatus from CRMTaskAssign where id=@ValueofDB:CRMTaskAssign_id</select>
		</condition>
		<!-- 已处理的任务不允许删除 -->
		<exec condition="&quot;@SqlReturn:taskStatus&quot;==&quot;0&quot;">
		<error>CRMTaskAssign.ExistComplaint</error>
		</exec>
		<exec condition="&quot;@SqlReturn:taskStatus&quot;==&quot;-1&quot;">
		<sql>delete from CRMcomplaints where id='9'+@ValueofDB:CRMTaskAssign_id</sql>
		<sql>delete from CRMClientRevisit where id='99'+@ValueofDB:CRMTaskAssign_id</sql>		
		</exec>
		<exec condition="&quot;@SqlReturn:taskStatus&quot;==&quot;-1&quot; &amp;&amp;&quot;@MEM:CRMcomplaints_IsStatart&quot; == &quot;1&quot;">
		<sql>delete from OAMyWorkFlow where keyid='9'+@ValueofDB:CRMTaskAssign_id and tablename='CRMcomplaints'</sql>
		<sql>delete from OAMyWorkFlow where keyid='99'+@ValueofDB:CRMTaskAssign_id and tablename='CRMClientRevisit'</sql>		
		</exec>
</sql>
</define>
<define name="CRMTaskAssign_add_operate">
<sql type="condition">
		<condition>
		<select>select 'ExistError1' as ExistError1 from CRMTaskAssign where id=@ValueofDB:CRMTaskAssign_id and taskStatus='0'</select>
		</condition>
		<!-- 已处理的任务不允许再分配 -->
		<exec condition="&quot;@SqlReturn:ExistError1&quot;==&quot;ExistError1&quot;">
		<error>CRMTaskAssign.ExistError1</error>
		</exec>
	</sql>
	<sql type="condition">
		<condition>
			<select>select userId,ref_id,taskType,id,';'+createBy+';' as checkPersons from CRMTaskAssign where id=@ValueofDB:CRMTaskAssign_id</select>
			<select>select EmpFullName as EmpName,DepartmentCode from tblEmployee where id=@SqlReturn:userId</select>
			<select>select ClientName as clientName from CRMClientInfo where id=@SqlReturn:ref_id</select>
			<select>select EmpFullName as CreateName,DepartmentCode as CreateDept from tblEmployee where id=@Sess:UserId</select>
			<select>select '9'+id as workId,convert(varchar(10),getDate(),21) as workDate,Ref_id as ClientId,content,substring(rtrim(content),1,100) as titles,@SqlReturn:userId as EmployeeID,convert(varchar(19),getDate(),21) as createTime,SCompanyID from CRMTaskAssign where id=@ValueofDB:CRMTaskAssign_id</select>
			<!--客户资料是否存在该跟单人记录-->
			<select>select 'ExistError2' as ExistError2 from CRMClientInfoEmp where f_ref=@SqlReturn:ClientId and len(@SqlReturn:ClientId)&gt;0 and EmployeeID=@SqlReturn:EmployeeID and DepartmentCode=@SqlReturn:DepartmentCode</select>
			<!-- 获取启用客户回访值 -->
	   		<select>select isVisit from tblBillReviewSetting where billType='CRMcomplaints'</select>
		</condition>
		<!-- 修改任务分配人 -->
		<exec condition="true">
		<sql>update CRMTaskAssign set userId=@SqlReturn:userId,createBy=@Sess:UserId,assignStatus='0' where id=@ValueofDB:CRMTaskAssign_id</sql>
		</exec>
		<!-- 生成工作计划 -->
		<exec condition="true">
			<!-- <sql>delete from tblDayWorkPlan where id=@SqlReturn:workId</sql>
			<sql type="procedure">
			{call proc_insert(tblDayWorkPlan,id=@SqlReturn:workId@SPFieldLink:DepartmentCode=@SqlReturn:DepartmentCode@SPFieldLink:EmployeeID=@SqlReturn:EmployeeID@SPFieldLink:title=@Locale:CRM.difineCRM.Task @SqlReturn:titles@SPFieldLink:content=@SqlReturn:content@SPFieldLink:createBy=@SqlReturn:EmployeeID@SPFieldLink:createTime=@SqlReturn:createTime@SPFieldLink:SCompanyID=@SqlReturn:SCompanyID@SPFieldLink:time=0@SPFieldLink:BeginDate=@SqlReturn:workDate@SPFieldLink:EndDate=@SqlReturn:workDate@SPFieldLink:workFlowNodeName=notApprove@SPFieldLink:grade=3,retCode,retVal)}
			</sql> -->
			<sql>delete from tblAdvice where id=@SqlReturn:workId</sql>
			<sql type="procedure">
			{call proc_insert(tblAdvice,id=@SqlReturn:workId@SPFieldLink:relationId=@SqlReturn:workId@SPFieldLink:send=@Sess:UserId@SPFieldLink:Receive=@SqlReturn:EmployeeID@SPFieldLink:title=@Locale:CRM.difineCRM.Task @SqlReturn:CreateName @Locale:email.lb.assign @SqlReturn:clientName @Locale:common.task.desk.msg @SPFieldLink:content= @Locale:CRM.difineCRM.Task @SqlReturn:CreateName @Locale:email.lb.assign @SqlReturn:clientName @Locale:common.task.desk.msg @SPFieldLink:Status=noRead@SPFieldLink:SendName=@SqlReturn:CreateName@SPFieldLink:ReceiveName=@SqlReturn:EmpName@SPFieldLink:exist=all@SPFieldLink:createBy=@Sess:UserId@SPFieldLink:lastUpdateBy=@Sess:UserId@SPFieldLink:createTime=@SqlReturn:createTime@SPFieldLink:lastUpdateTime=@SqlReturn:createTime,retCode,retVal)}
			</sql>
		</exec>
		<!-- <exec condition="&quot;@MEM:tblDayWorkPlan_IsStatart&quot; != &quot;1&quot;">
	<sql>update tblDayWorkPlan set workFlowNodeName='finish',workFlowNode='-1',checkPersons=''  where id=@SqlReturn:workId</sql>
	</exec>	 -->
		<!--关联客户不为空插入跟单人至客户资料-->
		<exec condition="(&quot;@SqlReturn:ClientId&quot;!=&quot;null&quot;||&quot;@SqlReturn:ClientId&quot;.length!=0)&amp;&amp;(&quot;@SqlReturn:ExistError2&quot;!=&quot;ExistError2&quot;)">
		<sql>delete from CRMClientInfoEmp where id=@SqlReturn:workId</sql>
		<sql type="procedure">
			{call proc_insert(CRMClientInfoEmp,id=0@SqlReturn:workId@SPFieldLink:DepartmentCode=@SqlReturn:DepartmentCode@SPFieldLink:EmployeeID=@SqlReturn:EmployeeID@SPFieldLink:SCompanyID=@SqlReturn:SCompanyID@SPFieldLink:f_ref=@SqlReturn:ClientId,retCode,retVal)}
			</sql>
		</exec>
		<!-- 如果是投诉，添加到客户投诉表，客户回访表中 -->
		<exec condition="&quot;@MEM:CRMcomplaints_IsStatart&quot; == &quot;0&quot; &amp;&amp;&quot;@SqlReturn:taskType&quot;==&quot;complaint&quot;">
		<sql>delete from CRMcomplaints where id=@SqlReturn:workId</sql>
		
		<sql type="procedure">
		<!-- 客户投诉表 -->
{call proc_insert(CRMcomplaints,workFlowNodeName=finish@SPFieldLink:workFlowNode=-1@SPFieldLink:checkPersons=@SPFieldLink:SCompanyID=@SqlReturn:SCompanyID@SPFieldLink:ClientId=@ValueofDB:CRMTaskAssign_Ref_id@SPFieldLink:f_brother=@ValueofDB:CRMTaskAssign_Ref_id@SPFieldLink:id=9@ValueofDB:CRMTaskAssign_id@SPFieldLink:BillDate=@MEM:sysShortDate@SPFieldLink:BillNo=@CODE:[TS@y2@M@d@id4TS@]@SPFieldLink:IsVisit=2@SPFieldLink:clientname=@SPFieldLink:ComplaintType=@SPFieldLink:DepartmentCode=@SPFieldLink:ComplaintsViscera=@ValueofDB:CRMTaskAssign_content@SPFieldLink:DealwithEmployeeID=@ValueofDB:CRMTaskAssign_userId@SPFieldLink:createBy=@ValueofDB:CRMTaskAssign_createBy@SPFieldLink:createTime=@ValueofDB:CRMTaskAssign_createTime@SPFieldLink:lastUpdateBy=@ValueofDB:CRMTaskAssign_createBy@SPFieldLink:lastUpdateTime=@ValueofDB:CRMTaskAssign_lastUpdateTime,retCode,retVal)}
		</sql>
		</exec>
 	 <!-- 如果启用客户投诉回访设置为是，插入数据到客户回访单 -->
 	 <exec condition="&quot;@MEM:CRMcomplaints_IsStatart&quot; == &quot;0&quot; &amp;&amp;&quot;@SqlReturn:isVisit&quot; == &quot;1&quot;">
 	 <sql>delete from CRMClientRevisit where id='99'+@ValueofDB:CRMTaskAssign_id</sql>
 	 <sql type="procedure">
			{call proc_insert(CRMClientRevisit,id=99@ValueofDB:CRMTaskAssign_id@SPFieldLink:BillDate=@MEM:sysShortDate@SPFieldLink:BillNo=@CODE:[RV@y2@M@d@id5RV@]@SPFieldLink:DepartmentCode=@SPFieldLink:EmployeeID=@SPFieldLink:workFlowNodeName=finish@SPFieldLink:workFlowNode=-1@SPFieldLink:checkPersons=@SPFieldLink:ClientId=@ValueofDB:CRMTaskAssign_Ref_id@SPFieldLink:f_brother=@ValueofDB:CRMTaskAssign_Ref_id@SPFieldLink:RevisitStatus=1@SPFieldLink:RefBillType=CRMcomplaints@SPFieldLink:RefBillID=9@ValueofDB:CRMTaskAssign_id@SPFieldLink:Solved=3@SPFieldLink:SCompanyID=@SqlReturn:SCompanyID@SPFieldLink:createBy=@ValueofDB:CRMTaskAssign_createBy@SPFieldLink:createTime=@ValueofDB:CRMTaskAssign_createTime@SPFieldLink:lastUpdateBy=@ValueofDB:CRMTaskAssign_createBy@SPFieldLink:lastUpdateTime=@ValueofDB:CRMTaskAssign_lastUpdateTime@SPFieldLink:isAuto=1@SPFieldLink:Subject=@ValueofDB:CRMTaskAssign_content,retCode,retVal)}
			</sql>
			<sql>update tblCodeGenerate set curValue=curValue+1 where code='RV'</sql>
 	 </exec>		
		 	 <!-- 如果启用客户投诉启用审核流，插入数据到客户回访单 -->
 	 <exec condition="&quot;@MEM:CRMcomplaints_IsStatart&quot; == &quot;1&quot; &amp;&amp;&quot;@SqlReturn:taskType&quot;==&quot;complaint&quot;">
 	 <sql>delete from CRMcomplaints where id=@SqlReturn:workId</sql>
	 <sql type="procedure">
		<!-- 客户投诉表 -->
{call proc_insert(CRMcomplaints,workFlowNodeName=notApprove@SPFieldLink:workFlowNode=0@SPFieldLink:checkPersons=@SqlReturn:checkPersons@SPFieldLink:SCompanyID=@SqlReturn:SCompanyID@SPFieldLink:ClientId=@ValueofDB:CRMTaskAssign_Ref_id@SPFieldLink:f_brother=@ValueofDB:CRMTaskAssign_Ref_id@SPFieldLink:id=9@ValueofDB:CRMTaskAssign_id@SPFieldLink:BillDate=@MEM:sysShortDate@SPFieldLink:BillNo=@CODE:[TS@y2@M@d@id4TS@]@SPFieldLink:IsVisit=2@SPFieldLink:clientname=@SPFieldLink:ComplaintType=@SPFieldLink:DepartmentCode=@SPFieldLink:ComplaintsViscera=@ValueofDB:CRMTaskAssign_content@SPFieldLink:DealwithEmployeeID=@ValueofDB:CRMTaskAssign_userId@SPFieldLink:createBy=@ValueofDB:CRMTaskAssign_createBy@SPFieldLink:createTime=@ValueofDB:CRMTaskAssign_createTime@SPFieldLink:lastUpdateBy=@ValueofDB:CRMTaskAssign_createBy@SPFieldLink:lastUpdateTime=@ValueofDB:CRMTaskAssign_lastUpdateTime,retCode,retVal)}
		</sql>
 		<sql>insert into OAMyWorkFlow(id,applyDate,applyType,tableName,keyId,createBy,checkPerson,currentNode,createtime,lastUpdatetime,nextNodeIds,departmentCode,statusId)
select 'w'+id,BillDate,(select id from oaworkflowtemplate where templateFile='CRMcomplaints'),'CRMcomplaints',id,createBy,';'+createBy+';',0,createtime,lastUpdatetime,'',(select departmentCode from tblEmployee a where a.id=CRMcomplaints.CreateBy),0 from CRMcomplaints
where id='9'+@ValueofDB:CRMTaskAssign_id</sql>
	<sql>update tblCodeGenerate set curValue=curValue+1 where code='TS'</sql>
 	 </exec>
	  	 <!-- 如果启用客户投诉回访设置为是，插入数据到客户回访单 -->
 	 <exec condition="&quot;@MEM:CRMcomplaints_IsStatart&quot; == &quot;1&quot; &amp;&amp;&quot;@SqlReturn:isVisit&quot; == &quot;1&quot;">
<sql>delete from CRMClientRevisit where id='99'+@ValueofDB:CRMTaskAssign_id</sql>
 	 <sql type="procedure">
			{call proc_insert(CRMClientRevisit,id=99@ValueofDB:CRMTaskAssign_id@SPFieldLink:BillDate=@MEM:sysShortDate@SPFieldLink:BillNo=@CODE:[RV@y2@M@d@id5RV@]@SPFieldLink:DepartmentCode=@SPFieldLink:EmployeeID=@SPFieldLink:workFlowNodeName=finish@SPFieldLink:workFlowNode=-1@SPFieldLink:checkPersons=@SPFieldLink:ClientId=@ValueofDB:CRMTaskAssign_Ref_id@SPFieldLink:f_brother=@ValueofDB:CRMTaskAssign_Ref_id@SPFieldLink:RevisitStatus=1@SPFieldLink:RefBillType=CRMcomplaints@SPFieldLink:RefBillID=9@ValueofDB:CRMTaskAssign_id@SPFieldLink:Solved=3@SPFieldLink:SCompanyID=@SqlReturn:SCompanyID@SPFieldLink:createBy=@ValueofDB:CRMTaskAssign_createBy@SPFieldLink:createTime=@ValueofDB:CRMTaskAssign_createTime@SPFieldLink:lastUpdateBy=@ValueofDB:CRMTaskAssign_createBy@SPFieldLink:lastUpdateTime=@ValueofDB:CRMTaskAssign_lastUpdateTime@SPFieldLink:isAuto=1@SPFieldLink:Subject=@ValueofDB:CRMTaskAssign_content,retCode,retVal)}
			</sql>
			<sql>insert into OAMyWorkFlow(id,applyDate,applyType,tableName,keyId,createBy,checkPerson,currentNode,createtime,lastUpdatetime,nextNodeIds,departmentCode,statusId)
select 'w'+id,BillDate,(select id from oaworkflowtemplate where templateFile='CRMClientRevisit'),'CRMClientRevisit',id,createBy,';'+createBy+';',0,createtime,lastUpdatetime,'',(select departmentCode from tblEmployee a where a.id=CRMClientRevisit.CreateBy),0 from CRMClientRevisit
where id='99'+@ValueofDB:CRMTaskAssign_id</sql>
 	 </exec> 	 
		<exec condition="&quot;@MEM:BillNoSequence&quot;==&quot;true&quot;&amp;&amp;&quot;@SqlReturn:taskType&quot;==&quot;complaint&quot;">  
	<sql>update tblCodeGenerate set curValue=curValue+1 where code='TS'</sql>

		</exec>
		<exec condition="&quot;@MEM:BillNoSequence&quot;==&quot;true&quot;&amp;&amp;&quot;@SqlReturn:isVisit&quot; == &quot;1&quot;">  
	<sql>update tblCodeGenerate set curValue=curValue+1 where code='RV'</sql>
		</exec>
	</sql>
</define>
  
<!--  任务分配拓展按钮 -->
<define name="CRM_TaskAssign">
	<sql type="condition">
		<condition>
			<select>select 'ExistError1' as ExistError1 from CRMTaskAssign where id=@ValueofDB:CRMTaskAssign_id and taskStatus='0'</select>
		</condition>
		<!-- 已处理的任务不允许再分配 -->
		<exec condition="&quot;@SqlReturn:ExistError1&quot;==&quot;ExistError1&quot;">
			<error>CRMTaskAssign.ExistError1</error>
		</exec>
	</sql>
	<sql type="condition">
		<condition>
			<select>select EmpFullName as EmpName,DepartmentCode from tblEmployee where id=@ValueofDB:toClassCode</select>
			<select>select EmpFullName as CreateName,DepartmentCode as CreateDept from tblEmployee where id=@Sess:UserId</select>
			<select>select '9'+id as workId,convert(varchar(10),getDate(),21) as workDate,Ref_id as ClientId,content,@ValueofDB:toClassCode as EmployeeID,convert(varchar(19),getDate(),21) as createTime,SCompanyID from CRMTaskAssign where id=@ValueofDB:CRMTaskAssign_id</select>
			<!--客户资料是否存在该跟单人记录-->
			<select>select 'ExistError2' as ExistError2 from CRMClientInfoEmp where f_ref=@SqlReturn:ClientId and len(@SqlReturn:ClientId)&gt;0 and EmployeeID=@SqlReturn:EmployeeID and DepartmentCode=@SqlReturn:DepartmentCode</select>
			<select>select userId as OldUser from CRMTaskAssign where userId=@ValueofDB:CRMTaskAssign_userId group by userId,Ref_id having count(Ref_id) &gt; 1</select>
			<select>select userId as ExistUser from CRMTaskAssign where userId not in (select EmployeeID from CRMClientInfoEmp where f_ref=@SqlReturn:ClientId) and id=@ValueofDB:CRMTaskAssign_id</select>
		</condition>
		<!-- 修改任务分配人 -->
		<exec condition="true">
			<sql>update CRMTaskAssign set userId=@ValueofDB:toClassCode,createBy=@ValueofDB:toClassCode,assignStatus='0' where id=@ValueofDB:CRMTaskAssign_id</sql>
		</exec>
		<!-- 生成工作计划 -->
		<exec condition="true">
			<sql>delete from tblDayWorkPlan where id=@SqlReturn:workId</sql>
			<sql type="procedure">
			{call proc_insert(tblDayWorkPlan,id=@SqlReturn:workId@SPFieldLink:DepartmentCode=@SqlReturn:DepartmentCode@SPFieldLink:EmployeeID=@SqlReturn:EmployeeID@SPFieldLink:title=@Locale:CRM.difineCRM.Task @SqlReturn:content@SPFieldLink:content=@SqlReturn:content@SPFieldLink:createBy=@SqlReturn:EmployeeID@SPFieldLink:createTime=@SqlReturn:createTime@SPFieldLink:SCompanyID=@SqlReturn:SCompanyID@SPFieldLink:time=0@SPFieldLink:BeginDate=@SqlReturn:workDate@SPFieldLink:EndDate=@SqlReturn:workDate@SPFieldLink:workFlowNodeName=notApprove@SPFieldLink:grade=3,retCode,retVal)}
			</sql>
			
			<sql>delete from tblAdvice where id=@SqlReturn:workId</sql>
			<sql type="procedure">
			{call proc_insert(tblAdvice,id=@SqlReturn:workId@SPFieldLink:relationId=@SqlReturn:workId@SPFieldLink:send=@Sess:UserId@SPFieldLink:Receive=@SqlReturn:EmployeeID@SPFieldLink:title=@Locale:CRM.difineCRM.Task @SqlReturn:content@SPFieldLink:content=@Locale:CRM.difineCRM.Task @SqlReturn:content@SPFieldLink:Status=noRead@SPFieldLink:SendName=@SqlReturn:CreateName@SPFieldLink:ReceiveName=@SqlReturn:EmpName@SPFieldLink:exist=all@SPFieldLink:createBy=@Sess:UserId@SPFieldLink:lastUpdateBy=@Sess:UserId@SPFieldLink:createTime=@SqlReturn:createTime@SPFieldLink:lastUpdateTime=@SqlReturn:createTime,retCode,retVal)}
			</sql>
		</exec>
		<exec condition="&quot;@MEM:tblDayWorkPlan_IsStatart&quot; != &quot;1&quot;">
	<sql>update tblDayWorkPlan set workFlowNodeName='finish',workFlowNode='-1',checkPersons=''  where id=@SqlReturn:workId</sql>
	</exec>	
		<!--关联客户不为空插入跟单人至客户资料(该客户存在其他业务分配)-->
		<exec condition="(&quot;@SqlReturn:ClientId&quot;!=&quot;null&quot;||&quot;@SqlReturn:ClientId&quot;.length!=0)&amp;&amp;(&quot;@SqlReturn:ExistUser&quot;==&quot;null&quot; || &quot;@SqlReturn:ExistUser&quot;.length ==0) &amp;&amp; (&quot;@SqlReturn:OldUser&quot;.length ==0 || &quot;@SqlReturn:OldUser&quot; == &quot;null&quot;)">
		<sql>delete from CRMClientInfoEmp where id='0'+@SqlReturn:workId</sql>

		<sql type="procedure">
			{call proc_insert(CRMClientInfoEmp,id=0@SqlReturn:workId@SPFieldLink:DepartmentCode=@SqlReturn:DepartmentCode@SPFieldLink:EmployeeID=@SqlReturn:EmployeeID@SPFieldLink:SCompanyID=@SqlReturn:SCompanyID@SPFieldLink:f_ref=@SqlReturn:ClientId,retCode,retVal)}
			</sql>
		</exec>
			
		<!--关联客户不为空插入跟单人至客户资料(该客户存在其他业务分配)-->
		<exec condition="(&quot;@SqlReturn:ClientId&quot;!=&quot;null&quot;||&quot;@SqlReturn:ClientId&quot;.length!=0)&amp;&amp;&quot;@SqlReturn:ExistError2&quot;!=&quot;ExistError2&quot; &amp;&amp; (&quot;@SqlReturn:OldUser&quot;.length !=0 &amp;&amp; &quot;@SqlReturn:OldUser&quot; != &quot;null&quot;) &amp;&amp; (&quot;@SqlReturn:ExistUser&quot;!=&quot;null&quot;  &amp;&amp; &quot;@SqlReturn:ExistUser&quot;.length !=0)">
		<sql type="procedure">
			{call proc_insert(CRMClientInfoEmp,id=0@SqlReturn:workId@SPFieldLink:DepartmentCode=@SqlReturn:DepartmentCode@SPFieldLink:EmployeeID=@SqlReturn:EmployeeID@SPFieldLink:SCompanyID=@SqlReturn:SCompanyID@SPFieldLink:f_ref=@SqlReturn:ClientId,retCode,retVal)}
			</sql>
		</exec>
		<!--关联客户不为空插入跟单人至客户资料(该客户没有其他业务分配)-->
		<exec condition="(&quot;@SqlReturn:ClientId&quot;!=&quot;null&quot;||&quot;@SqlReturn:ClientId&quot;.length!=0)&amp;&amp;&quot;@SqlReturn:ExistError2&quot;!=&quot;ExistError2&quot; &amp;&amp; (&quot;@SqlReturn:OldUser&quot;.length ==0 || &quot;@SqlReturn:OldUser&quot; == &quot;null&quot;) &amp;&amp; (&quot;@SqlReturn:ExistUser&quot;!=&quot;null&quot;  &amp;&amp; &quot;@SqlReturn:ExistUser&quot;.length !=0)">
		<sql>update CRMClientInfoEmp set DepartmentCode=@SqlReturn:DepartmentCode,EmployeeID=@SqlReturn:EmployeeID where  id=@SqlReturn:workId and f_ref=@SqlReturn:ClientId and SCompanyID=@SqlReturn:SCompanyID</sql>
		</exec>		
	<exec condition="true">
	<sql>delete from CRMClientInfoEmp where id=(select top 1 id from CRMClientInfoEmp where EmployeeId = (select d.EmployeeId from CRMClientInfoEmp d where d.f_ref=@SqlReturn:ClientId group by EmployeeId having count(EmployeeId)&gt;1))</sql>
	</exec>
	</sql>
</define>

<!--客户列表条件设置添加-->
<define name="CRMCustomerListCon_Add">
	<sql type="condition">
		<condition>
			<select>select inputtype from tblDBFieldInfo where tableid=(select id from tblDBTableInfo where tablename='CRMClientInfo') and fieldname=(select field from CRMCustomerListCon where id=@ValueofDB:CRMCustomerListCon_id)</select>  
			<select>select field,fieldtype,Contype from CRMCustomerListCon where id=@ValueofDB:CRMCustomerListCon_id</select>
		</condition>
		<!-- 此字段对应的字段类型为枚举 -->
		<exec condition="&quot;@SqlReturn:inputtype&quot;==&quot;1&quot; &amp;&amp; &quot;@SqlReturn:fieldtype&quot;!=&quot;2&quot;">
			<error>Enum.type.error</error>
		</exec>
		<!-- 此字段对应的字段类型为分类资料 -->
		<exec condition="&quot;@SqlReturn:field&quot;==&quot;District&quot; &amp;&amp; &quot;@SqlReturn:inputtype&quot;!=&quot;1&quot; &amp;&amp; &quot;@SqlReturn:fieldtype&quot;!=&quot;1&quot;">
			<error>Class.BillNo.error</error>
		</exec>
		<!-- 此字段对应的字段类型为自定义录入 -->
		<exec condition="&quot;@SqlReturn:field&quot;!=&quot;District&quot; &amp;&amp; &quot;@SqlReturn:inputtype&quot;!=&quot;1&quot; &amp;&amp; &quot;@SqlReturn:fieldtype&quot;!=&quot;3&quot;">
			<error>defineself.type.error</error>
		</exec>
		<!-- 此字段对应的条件类型为左部分类资料 -->
		<exec condition="&quot;@SqlReturn:field&quot;==&quot;District&quot; &amp;&amp; &quot;@SqlReturn:Contype&quot;!=&quot;2&quot;">
			<error>Class.Left.error</error>
		</exec>
		<!-- 此字段对应的条件类型为上部条件  -->
		<!-- <exec condition="&quot;@SqlReturn:field&quot;!=&quot;District&quot; &amp;&amp; &quot;@SqlReturn:inputtype&quot;!=&quot;1&quot; &amp;&amp; &quot;@SqlReturn:Contype&quot;!=&quot;1&quot;">
			<error>Class.Data.error</error>
		</exec>-->
	</sql>
</define>
  
<!-- 启用客户回访设置 -->
<define name="OpenValue_tblBillReviewSetting_define">
	<sql type="condition">
		<condition>
		
		</condition>
		<exec condition="true">
			<sql> update tblBillReviewSetting set isVisit=1 where id=@ValueofDB:tblBillReviewSetting_id</sql>
		</exec>
	</sql>
</define>

<!-- 停用客户回访设置 -->
<define name="StopValue_tblBillReviewSetting_define">
	<sql type="condition">
		<condition>
		</condition>
		<exec condition="true">
			<sql> update tblBillReviewSetting set isVisit=2 where id=@ValueofDB:tblBillReviewSetting_id</sql>
		</exec>
	</sql>
</define>

<!-- 客户标记设置 数据操作 -->
<define name="CRMClientLabelSet_operate">
	<sql type="condition">
		<condition>
			<select>select 'ExistError1' as ExistError1 from CRMClientLabelSet where IsDefault=1 group by IsDefault having count(*)&gt;1</select>
		</condition>
		<!-- 默认项不能多个 -->
		<exec condition="&quot;@SqlReturn:ExistError1&quot;==&quot;ExistError1&quot;">
			<error>DefaultScore.operate.ExistError</error>
		</exec>
		<exec condition="true">
			<sql type="procedure">
			{call proc_updateAppraiseObject(CRMClientLabelSet,@ValueofDB:CRMClientLabelSet_id,@Sess:BillOper,@Sess:SCompanyID,errorCode,errorVal)}
			</sql>
		</exec>
		<!-- 程序报错 提示 ，被使用到的不能删除：xxxxx -->
		<exec condition="&quot;@ProcReturn:errorCode&quot;==&quot;-2222&quot;"> 	
		<error>SysObjectError.error</error>
		</exec>
	</sql>
</define>
  
<!-- 业务区域设置 数据操作 -->
<define name="CRMBusinessDistrictSet_operate">
	<sql type="condition">
		<condition>
			<select>select 'ExistErrorDistrictUsed' as ExistErrorDistrictUsed From CRMBusinessDistrictSet where id=@ValueofDB:CRMBusinessDistrictSet_id and (exists (select BusinessDistrict from CRMClientInfo where BusinessDistrict=CRMBusinessDistrictSet.FlagField) or exists (select BusinessDistrict from tblEmpDistrictDet where BusinessDistrict=CRMBusinessDistrictSet.FlagField))</select>
		</condition>
		<!-- 业务区域被使用后不能删除 -->
		<exec condition="&quot;@SqlReturn:ExistErrorDistrictUsed&quot;==&quot;ExistErrorDistrictUsed&quot; &amp;&amp; &quot;@Sess:BillOper&quot;==&quot;delete&quot;">
			<error>DefaultScore.operate.ExistErrorDistrictUsed</error>
		</exec>
	</sql>
	<sql type="condition">
		<condition>
			<select>select 'ExistError1' as ExistError1 from CRMBusinessDistrictSet where IsDefault=1 group by IsDefault having count(*)&gt;1</select>
		</condition>
		<!-- 默认项不能多个 -->
		<exec condition="&quot;@SqlReturn:ExistError1&quot;==&quot;ExistError1&quot;">
			<error>DefaultScore.operate.ExistError</error>
		</exec>
		<exec condition="true">
			<sql type="procedure">
			{call proc_updateAppraiseObject(CRMBusinessDistrictSet,@ValueofDB:CRMBusinessDistrictSet_id,@Sess:BillOper,@Sess:SCompanyID,errorCode,errorVal)}
			</sql>
		</exec>
		<!-- 程序报错 提示 ，被使用到的不能删除：xxxxx -->
		<exec condition="&quot;@ProcReturn:errorCode&quot;==&quot;-2222&quot;"> 	
		<error>SysObjectError.error</error>
		</exec>
	</sql>
</define>

<!-- 跟单阶段设置 数据操作 -->
<define name="CRMFollowPhaseSet_operate">
	<sql type="condition">
		<condition>
			<select>select 'ExistErrorFollowPhaseUsed' as ExistErrorFollowPhaseUsed From CRMFollowPhaseSet where id=@ValueofDB:CRMFollowPhaseSet_id and exists (select FollowPhase from CRMSaleFollowUp where FollowPhase=CRMFollowPhaseSet.FlagField)</select>
		</condition>
		<!-- 跟单阶段被使用后不能删除 -->
		<exec condition="&quot;@SqlReturn:ExistErrorFollowPhaseUsed&quot;==&quot;ExistErrorFollowPhaseUsed&quot; &amp;&amp; &quot;@Sess:BillOper&quot;==&quot;delete&quot;">
			<error>DefaultPhase.operate.ExistErrorFollowPhaseUsed</error>
		</exec>
	</sql>
	<sql type="condition">
		<condition>
			<select>select 'ExistError1' as ExistError1 from CRMFollowPhaseSet where IsDefault=1 group by IsDefault having count(*)&gt;1</select>
		</condition>
		<!-- 默认项不能多个 -->
		<exec condition="&quot;@SqlReturn:ExistError1&quot;==&quot;ExistError1&quot;">
			<error>DefaultScore.operate.ExistError</error>
		</exec>
		<exec condition="true">
			<sql type="procedure">
			{call proc_updateAppraiseObject(CRMFollowPhaseSet,@ValueofDB:CRMFollowPhaseSet_id,@Sess:BillOper,@Sess:SCompanyID,errorCode,errorVal)}
			</sql>
		</exec>
		<!-- 程序报错 提示 ，被使用到的不能删除：xxxxx -->
		<exec condition="&quot;@ProcReturn:errorCode&quot;==&quot;-2222&quot;"> 	
		<error>SysObjectError.error</error>
		</exec>
	</sql>
</define>

<!-- 客户联系人纪念日 增加时操作 -->
<define name="CRMMemoryDay_add_update">
	<sql type="condition">
		<condition>
			<select>select 'ExistErrorRepeat' as ExistErrorRepeat from CRMMemoryDayDet where f_ref=@ValueofDB:CRMMemoryDay_id group by MemoryType having count(*)&gt;1</select>
		</condition>
		<!-- 联系人纪念日类型不允许重复 -->
		<exec condition="&quot;@SqlReturn:ExistErrorRepeat&quot;==&quot;ExistErrorRepeat&quot;">
			<error>CRMMemoryDay.operate.ExistErrorRepeat</error>
		</exec>
	</sql>
	<sql type="condition">
		<!-- 更新邻居表关联ID或客户名称 -->
		<exec condition="true">
			<sql>update CRMMemoryDay set f_brother=ClientId where id=@ValueofDB:CRMMemoryDay_id and f_brother='' and ClientId!=''</sql>
			<sql>update CRMMemoryDay set ClientId=f_brother where id=@ValueofDB:CRMMemoryDay_id and f_brother!='' and ClientId=''</sql>

			<sql type="procedure">
			{call proc_iterateExeProc(select a.ContactNo as id@SPFieldLink:b.id as f_ref@SPFieldLink:MemoryType as MemoryType@SPFieldLink:(case when c.dateType='' or c.dateType is NULL then '1' else c.dateType end) as dateType@SPFieldLink:c.Date as BirthDay@SPFieldLink:b.SCompanyID as SCompanyID from CRMClientInfoDet a left join CRMMemoryDay b on  b.ClientId=a.f_ref and b.mainUser=a.ContactNo left join CRMMemoryDayDet c on b.id=c.f_ref where len(c.Date)&gt;0 and MemoryType=1 and b.id='@ValueofDB:CRMMemoryDay_id',proc_update,'CRMClientInfoDet'@ParamLink:'dateType='+@dateType+'@SPFieldLink:BirthDay='+@BirthDay@ParamLink:'ContactNo='+@id,retCode,retVal)}
			</sql>
		</exec>
	</sql>
</define>

<!-- 联系人纪念日数据库操作 -->
<define name="CRMMemoryDay_operate">
	<sql type="condition">
		<exec condition="&quot;@Sess:BillOper&quot;==&quot;add&quot; || &quot;@Sess:BillOper&quot;==&quot;update&quot;">
			<sql type="define">CRMMemoryDay_add_update</sql>
		</exec>
	</sql>
</define>

<!-- 销售跟单 增加时操作 -->
<define name="CRMSaleFollowUp_add">
	<sql type="condition">
		<condition>
			<select>select 'ExistErrorAlertTime' as ExistErrorAlertTime from CRMSaleFollowUp where id=@ValueofDB:CRMSaleFollowUp_id and AlertTime&lt;0</select>
			<select>select 'Exist' as Exist from CRMSaleFollowUp where datediff(d,VisitTime,NextVisitTime)&gt;@MEM:DistanceNextVisit and id=@ValueofDB:CRMSaleFollowUp_id</select>
		</condition>
		<!-- 提醒时间不允许小于0 -->
		<exec condition="&quot;@SqlReturn:ExistErrorAlertTime&quot;==&quot;ExistErrorAlertTime&quot;">
			<error>CRMSaleFollowUp.add.ExistErrorAlertTime</error>
		</exec>
		
		<!-- 距下次拜访时间时长不超过(天) 系统参数设置值-->
			<exec condition="&quot;@SqlReturn:Exist&quot;==&quot;Exist&quot;">
				<error>CRMSaleFollowUp.add.DistanceNextVisit,@MEM:DistanceNextVisit</error>
			</exec>
		
	</sql>
	<!-- 关注客户 发通知-->
	<sql>
		insert into tblAdvice (id,Content,send,Receive,Title,type,createBy,lastUpdateBy,Status,createTime,lastUpdateTime)
		select lower(substring(replace(newid(),'-',''),1,28)) as id,'<a href="      javascript:mdiwin(''/UserFunctionAction.do?tableName=CRMSaleFollowUp&amp;keyId='+@ValueofDB:CRMSaleFollowUp_id+'&amp;moduleType=&amp;f_brother=&amp;operation=5&amp;pageNo=&amp;parentCode=&amp;parentTableName=CRMClientInfo&amp;saveDraft='','''+@Locale:crm.client.distributionFUV+''')">'+
		@Locale:crm.client.Attention+'</a>',empId,empId,@Locale:crm.client.distributionFUV,'attention',
		@ValueofDB:CRMSaleFollowUp_createBy,@ValueofDB:CRMSaleFollowUp_createBy,'noRead',@ValueofDB:CRMSaleFollowUp_createTime,@ValueofDB:CRMSaleFollowUp_createTime from tblAttention where OTopicId=@ValueofDB:f_brother  and type = 'CRMClientInfo'
	</sql>
	<!-- 更新关注客户的最后活动时间-->
	<sql>
		update tblAttention set lastUpdateTime=@ValueofDB:CRMSaleFollowUp_createTime where OTopicId=@ValueofDB:f_brother and type = 'CRMClientInfo'
	</sql>
	<sql type="condition">
		<!-- 更新 客户资料 上次联系时间 -->
		<exec condition="true">
			<sql>update CRMClientInfo set LastContractTime=@ValueofDB:CRMSaleFollowUp_lastUpdateTime where id=@ValueofDB:f_brother</sql>
		</exec>
	</sql>
	<!--记录客户日志
	<sql type="condition">
			<exec condition="true">
				<sql>insert into CRMClientInfoLog(id,clientId,billType,context,createBy,createTime,relationId) values(lower(substring(replace(newid(),'-',''),1,28)),@ValueofDB:ClientId,'CRMSaleFollowUp',@ValueofDB:VisitTime+@Sess:UserName+@Locale:CRM.difineCRM.FollowBill+subString(@ValueofDB:Content,1,100),@Sess:UserId,@ValueofDB:createTime,@ValueofDB:id)</sql>
			</exec>
	</sql>
	-->
	<sql type="condition">
		<!-- 更新邻居表关联ID或客户名称 -->
		<exec condition="true">
			<sql>update CRMSaleFollowUp set f_brother=ClientId where id=@ValueofDB:CRMSaleFollowUp_id and f_brother='' and ClientId!=''</sql>
			<sql>update CRMSaleFollowUp set ClientId=f_brother where id=@ValueofDB:CRMSaleFollowUp_id and f_brother!='' and ClientId=''</sql>
		</exec>
	</sql>
	<sql type="condition">
		<condition>
			<select>select GenWorkPlan,IsSMS,IsMessage,IsMail,AlertTime from CRMSaleFollowUp where id=@ValueofDB:CRMSaleFollowUp_id</select>
			<select>select (case when IsSMS='1' then '1,' else '' end)+(case when IsMail='1' then '2,' else '' end)+(case when IsMessage='1' then '4,' else '' end) as AlertMethod,convert(varchar(19),DateAdd(hour,-convert(int,@ValueofDB:CRMSaleFollowUp_AlertTime),NextVisitTime),21) as AlertTime,substring(NextVisitTime,1,10) as workDate from CRMSaleFollowUp where id=@ValueofDB:CRMSaleFollowUp_id</select>
			<select>select ClientName,VisitDate,Content from CRMSaleFollowUp left join CRMClientInfo on CRMClientInfo.id=CRMSaleFollowUp.ClientId where CRMSaleFollowUp.id=@ValueofDB:CRMSaleFollowUp_id</select>
			<select>select assClient from CRMSaleContractDetail where f_ref=@ValueofDB:CRMSaleFollowUp_id</select>
		</condition>
		<!-- 生成工作计划 -->
		<exec condition="&quot;@SqlReturn:GenWorkPlan&quot;==&quot;1&quot;">
			<!-- 生成计划前,先执行删除之前的工作计划 -->
			<sql>delete from tblDayWorkPlan where id='9'+@ValueofDB:CRMSaleFollowUp_id</sql>
			<sql type="procedure">
			{call proc_insert(tblDayWorkPlan,id=9@ValueofDB:CRMSaleFollowUp_id@SPFieldLink:DepartmentCode=@ValueofDB:CRMSaleFollowUp_DepartmentCode@SPFieldLink:EmployeeID=@ValueofDB:CRMSaleFollowUp_EmployeeID@SPFieldLink:title=@Locale:CRM.difineCRM.SalesFollowUp @SqlReturn:ClientName @SqlReturn:VisitDate@SPFieldLink:content=@Locale:CRM.difineCRM.SalesFollowUp @SqlReturn:ClientName @SqlReturn:VisitDate &lt;br&gt;@SqlReturn:Content@SPFieldLink:createBy=@ValueofDB:CRMSaleFollowUp_createBy@SPFieldLink:createTime=@ValueofDB:CRMSaleFollowUp_createTime@SPFieldLink:lastUpdateTime=@ValueofDB:CRMSaleFollowUp_lastUpdateTime@SPFieldLink:BeginDate=@SqlReturn:workDate 09:00:00@SPFieldLink:EndDate=@SqlReturn:workDate 18:00:00@SPFieldLink:SCompanyID=@ValueofDB:CRMSaleFollowUp_SCompanyID@SPFieldLink:time=0@SPFieldLink:workFlowNodeName=notApprove@SPFieldLink:grade=3,retCode,retVal)}
			</sql>
		</exec>
		<exec condition="&quot;@MEM:tblDayWorkPlan_IsStatart&quot; != &quot;1&quot;">
	<sql>update tblDayWorkPlan set workFlowNodeName='finish',workFlowNode='-1',checkPersons=''  where id=@SqlReturn:workId</sql>
	</exec>	
		<!-- 生成提醒 -->
		<exec condition="(&quot;@SqlReturn:IsSMS&quot;==&quot;1&quot; || &quot;@SqlReturn:IsMessage&quot;==&quot;1&quot; || &quot;@SqlReturn:IsMail&quot;==&quot;1&quot;)">
			<sql type="procedure">
			{call proc_insert(OAmycalendar,id=9@ValueofDB:CRMSaleFollowUp_id@SPFieldLink:CalendarDate=@ValueofDB:CRMSaleFollowUp_createTime@SPFieldLink:WakeUpBeginDate=@SqlReturn:AlertTime@SPFieldLink:WakeUpType=@SqlReturn:AlertMethod@SPFieldLink:NowWaleUpTimes=1@SPFieldLink:WaleUpTimes=1@SPFieldLink:Setp=1@SPFieldLink:BeforeDay=0@SPFieldLink:BeforeHour=0@SPFieldLink:BeforeMinute=0@SPFieldLink:CalendarTitle=@Locale:CRM.difineCRM.SalesFollowUpAwoke @SqlReturn:ClientName (@SqlReturn:VisitDate)@SPFieldLink:CalendarContext=@Locale:CRM.difineCRM.SalesFollowUpAwoke @SqlReturn:ClientName (@SqlReturn:VisitDate)@SPFieldLink:createBy=@ValueofDB:CRMSaleFollowUp_createBy@SPFieldLink:createTime=@ValueofDB:CRMSaleFollowUp_createTime@SPFieldLink:lastUpdateBy=@ValueofDB:CRMSaleFollowUp_createBy@SPFieldLink:lastUpdateTime=@ValueofDB:CRMSaleFollowUp_createTime@SPFieldLink:SCompanyID=@ValueofDB:CRMSaleFollowUp_SCompanyID,retCode,retVal)}
			</sql>
		</exec>
		<!--启用KPI自动关联销售跟单时回填对应工作计划KPI完成数及比例
		<exec condition="@MEM:KPIAssFollow==true">
		<sql>update tblDayWorkPlan set KPIComplete=KPIComplete+isNull((select count(*) from CRMSaleFollowUp where id=@ValueofDB:CRMSaleFollowUp_id and CRMSaleFollowUp.KPIItem=tblDayWorkPlan.KPIItem and CRMSaleFollowUp.createBy=tblDayWorkPlan.createBy and (convert(varchar(10),CRMSaleFollowUp.VisitTime,110) between tblDayWorkPlan.BeginDate and tblDayWorkPlan.EndDate)),0),KPIScale=(case when KPIAim=0 then 0 else cast((KPIComplete+isNull((select count(*) from CRMSaleFollowUp where id=@ValueofDB:CRMSaleFollowUp_id and CRMSaleFollowUp.KPIItem=tblDayWorkPlan.KPIItem and CRMSaleFollowUp.createBy=tblDayWorkPlan.createBy and (convert(varchar(10),CRMSaleFollowUp.VisitTime,110) between tblDayWorkPlan.BeginDate and tblDayWorkPlan.EndDate)),0))*100/KPIAim as numeric(18,2)) end)</sql>
		</exec>-->
		<!--销售跟单选择批量跟单客户向其他客户插入销售跟单-->
		<exec condition="&quot;@SqlReturn:assClient&quot; !=&quot;null&quot; || &quot;@SqlReturn:assClient&quot;.length!=0">
			<sql>insert into CRMSaleFollowUp(id,f_brother,workFlowNodeName,FollowNo,FollowStatus,VisitType,CustomerIntent,EmployeeID,DepartmentCode,VisitDate,VisitMethod,Content,NextVisitTime,VisitTime,Remark,Caption,createBy,lastupdateBy,createTime,lastUpdateTime,statusId,SCompanyID,FollowPhase,ClientId,GenWorkPlan,IsSMS,isMessage,IsMail,AlertTime,KPIItem,FollowUpID)
select lower(substring(replace(newid(),'-',''),1,28)) as id,CRMSaleContractDetail.assClient as f_broter,CRMSaleFollowUp.workFlowNodeName,CRMSaleFollowUp.FollowNo,CRMSaleFollowUp.FollowStatus,CRMSaleFollowUp.VisitType,CRMSaleFollowUp.CustomerIntent,CRMSaleFollowUp.EmployeeID,CRMSaleFollowUp.DepartmentCode,CRMSaleFollowUp.VisitDate,CRMSaleFollowUp.VisitMethod,CRMSaleFollowUp.Content,CRMSaleFollowUp.NextVisitTime,CRMSaleFollowUp.VisitTime,CRMSaleFollowUp.Remark,CRMSaleFollowUp.Caption,CRMSaleFollowUp.createBy,CRMSaleFollowUp.lastupdateBy,CRMSaleFollowUp.createTime,CRMSaleFollowUp.lastUpdateTime,CRMSaleFollowUp.statusId,CRMSaleFollowUp.SCompanyID,CRMSaleFollowUp.FollowPhase,CRMSaleContractDetail.assClient as ClientId,CRMSaleFollowUp.GenWorkPlan,CRMSaleFollowUp.IsSMS,CRMSaleFollowUp.isMessage,CRMSaleFollowUp.IsMail,CRMSaleFollowUp.AlertTime,CRMSaleFollowUp.KPIItem,CRMSaleFollowUp.id as FollowUpID from CRMSaleFollowUp left join CRMSaleContractDetail on CRMSaleContractDetail.f_ref=CRMSaleFollowUp.id
where CRMSaleFollowUp.id=@ValueofDB:CRMSaleFollowUp_id and CRMSaleContractDetail.assClient!=@ValueofDB:CRMSaleFollowUp_ClientId</sql>
		</exec>
		<!-- 如果下次跟进日期是空的，就更新为客户资料里的下次跟单时间 
		<exec condition="&quot;@ValueofDB:CRMSaleFollowUp_NextVisitTime&quot;==&quot;&quot; || &quot;@ValueofDB:CRMSaleFollowUp_NextVisitTime&quot;.lenth==0">
			<sql>update CRMSaleFollowUp set NextVisitTime=(select NextFollowTime from CRMClientInfo where id=@ValueofDB:CRMSaleFollowUp_f_brother) where id=@ValueofDB:CRMSaleFollowUp_id</sql>
		</exec>
		-->
		<!-- 更新客户资料的下次跟单时间 -->
		<exec condition="&quot;@ValueofDB:CRMSaleFollowUp_NextVisitTime&quot;!=&quot;&quot;">
			<sql>update CRMClientInfo set NextFollowTime=@ValueofDB:CRMSaleFollowUp_NextVisitTime where id=@ValueofDB:CRMSaleFollowUp_f_brother</sql>
		</exec>
		<!-- 更新客户资料的最后跟进时间 -->
		<exec condition="&quot;@ValueofDB:CRMSaleFollowUp_VisitTime&quot;!=&quot;&quot;">
			<sql>update CRMClientInfo set LastFollowTime=@ValueofDB:CRMSaleFollowUp_VisitTime where id=@ValueofDB:CRMSaleFollowUp_f_brother</sql>
		</exec>
	<!--记录客户日志
			<exec condition="(&quot;@SqlReturn:assClient&quot; !=&quot;null&quot; || &quot;@SqlReturn:assClient&quot;.length!=0) &amp;&amp; &quot;@Sess:BillOper&quot; == &quot;add&quot;">
				<sql>insert into CRMClientInfoLog(id,clientId,billType,context,createBy,createTime,relationId) 
					select id,ClientId,'CRMSaleFollowUp',VisitDate+@Locale:CRM.difineCRM.FollowBill+Content,@Sess:UserId,createTime,id from CRMSaleFollowUp where FollowUpID=@ValueofDB:CRMSaleFollowUp_id</sql>
			</exec>
			-->
	</sql>
</define>

<!-- 销售跟单 删除时操作 -->
<define name="CRMSaleFollowUp_del">
	<sql type="condition">
		<condition>
			<select>select '9'+@ValueofDB:CRMSaleFollowUp_id as GenID</select>
		</condition>
		<exec condition="true">
			<sql>delete from tblDayWorkPlan where id=@SqlReturn:GenID</sql>
			<sql>delete from OAmycalendar where id=@SqlReturn:GenID</sql>
			<sql>delete from CRMSaleFollowUp where FollowUpID=@ValueofDB:CRMSaleFollowUp_id</sql>
			<sql>delete from tblAlert where relationId=@ValueofDB:CRMSaleFollowUp_id</sql>
			<sql>delete from tbladvice where relationId=@ValueofDB:CRMSaleFollowUp_id</sql>
		</exec>
			<!--启用KPI自动关联销售跟单时回填对应工作计划KPI完成数及比例
		<exec condition="@MEM:KPIAssFollow==true">
		<sql>update tblDayWorkPlan set KPIComplete=KPIComplete-isNull((select count(*) from CRMSaleFollowUp where id=@ValueofDB:CRMSaleFollowUp_id and CRMSaleFollowUp.KPIItem=tblDayWorkPlan.KPIItem and CRMSaleFollowUp.createBy=tblDayWorkPlan.createBy and (convert(varchar(10),CRMSaleFollowUp.VisitTime,110) between tblDayWorkPlan.BeginDate and tblDayWorkPlan.EndDate)),0),KPIScale=(case when KPIAim=0 then 0 else cast((KPIComplete-isNull((select count(*) from CRMSaleFollowUp where id=@ValueofDB:CRMSaleFollowUp_id and CRMSaleFollowUp.KPIItem=tblDayWorkPlan.KPIItem and CRMSaleFollowUp.createBy=tblDayWorkPlan.createBy and (convert(varchar(10),CRMSaleFollowUp.VisitTime,110) between tblDayWorkPlan.BeginDate and tblDayWorkPlan.EndDate)),0))*100/KPIAim as numeric(18,2)) end)</sql>
		</exec>-->
	</sql>
</define>

<define name="CRMBusinessDistrict_operate">
	<sql type="condition">
		<condition>
		</condition>
		<!-- 增加修改操作 -->
		<exec condition="&quot;@Sess:BillOper&quot;==&quot;delete&quot;">	
			<sql type="define">CRMBusinessDistrict_del</sql>
		</exec>
	</sql>
</define>

<define name="CRMBusinessDistrict_del">
	<sql type="condition">
		<condition>
		<select>select ClientName from CRMClientInfo where BusinessDistrict=@ValueofDB:CRMBusinessDistrict_id union SELECT BusinessDistrict as ClientName from  tblEmpDistrictDet where BusinessDistrict=@ValueofDB:CRMBusinessDistrict_id</select>
		</condition>
		<!-- 被引用不能删除 -->
		<exec condition="&quot;@SqlReturn:ClientName&quot;!=&quot;null&quot;">	
		<error>tblDistrict.del.ExistErrorUsed</error>
		</exec>
	</sql>
</define>

<!-- 客户移交 接受 -->
<define name="CRMClientTransfer_Receive">
	<sql type="condition">
		<condition>
			<select>select ClientId as strClientId,TransferMan,Audit,TransferTo from CRMClientTransfer where id=@ValueofDB:id</select>
			<select>select ClientName from CRMClientTransfer left join CRMClientinfo on CRMClientinfo.id=CRMClientTransfer.ClientId where CRMClientTransfer.id=@ValueofDB:id</select>
			<select>select EmpFullName,departmentCode from tblEmployee where id=@Sess:UserId</select>
			<select>select id as empId from CRMClientInfoEmp where f_ref=(select clientId from CRMClientTransfer where id=@ValueofDB:id) and employeeId=(select TransferTo from CRMClientTransfer where id=@ValueofDB:id)</select>
		</condition>
		<!-- 必须是移交对象才能接受或拒绝 -->
		<exec condition="&quot;@SqlReturn:TransferTo&quot;!=&quot;@Sess:UserId&quot;">
			<error>CRMClientTransfer.operate.error</error>
		</exec>
		<exec condition="@SqlReturn:Audit!=0">
			<error>ClientName.Audit.error,@SqlReturn:ClientName</error>
		</exec>
		<!-- 已处理 -->
		<exec condition="true">	
		<!--当角色接受客户移交时回填拥有者-->
			<sql>update CRMClientInfo set createBy=@SqlReturn:TransferTo,departmentCode=@SqlReturn:departmentCode where id=@SqlReturn:strClientId</sql>
			<sql>update CRMClientTransfer set statusId=1,Audit=1 where id=@ValueofDB:CRMClientTransfer_id</sql>
			<sql>delete from CRMClientInfoEmp where f_ref=@SqlReturn:strClientId and EmployeeID=@SqlReturn:TransferMan</sql>
			<sql>update CRMShareClient SET popedomUserIds = replace(','+popedomUserIds,','+@SqlReturn:TransferMan+',',',')  where clientId=@SqlReturn:strClientId</sql>
			
			
			<!-- 标识当前客户 为移交标志 -->
			<sql>update CRMClientInfo set handFlag=1 where id=@SqlReturn:strClientId</sql>
			<!-- 接受后添加一条通知消息 -->
			<sql>insert into tblAdvice(id,send,title,receive,content,status,exist,createBy,createTime) values(lower(substring(replace(newid(),'-',''),1,28)),@Sess:UserId,@SqlReturn:EmpFullName+'接受了客户：'+@SqlReturn:ClientName,@SqlReturn:TransferMan,@SqlReturn:EmpFullName+'接受了客户：'+@SqlReturn:ClientName,'noRead','all',@Sess:UserId,convert(varchar(19),getdate(),120))</sql>
		</exec>
		
		<!-- TransferTo共享表的操作(添加emp共享表,修改共享总类表) -->
		<exec condition="&quot;@SqlReturn:empId&quot;==&quot;null&quot;">
			<sql>insert into CRMClientInfoEmp(id,f_ref,DepartmentCode,EmployeeID,SCompanyID) select lower(substring(replace(newid(),'-',''),1,28)),@SqlReturn:strClientId,(select DepartmentCode from tblEmployee where id=@SqlReturn:TransferTo),@SqlReturn:TransferTo,@Sess:SCompanyID where @SqlReturn:TransferTo !='1' and not exists(select * from CRMClientInfoEmp where f_ref=@SqlReturn:strClientId and EmployeeID=@SqlReturn:TransferTo)</sql>
			<sql>update CRMShareClient set popedomUserIds = popedomUserIds+@SqlReturn:TransferTo+',' where clientId = @SqlReturn:strClientId</sql>
		</exec>
	</sql>
	<sql type="condition">
		<condition>
			<select>select ClientId as ClientId2,TransferMan,Audit,TransferTo from CRMClientTransfer where id=@ValueofDB:id</select>
			<select>select count(id) as isShare from CRMClientInfoEmp where f_ref=@SqlReturn:ClientId2 and employeeId!='1'</select>
		</condition>
		<!-- 如果跟单人大于等于2人 即共享 -->
		<exec condition="@SqlReturn:isShare &gt; 1">
			<sql>update CRMClientInfo set shareFlag=1 where id=@SqlReturn:ClientId2</sql>
		</exec>
	</sql>
	
</define>

<define name="CRMClientTransfer_AutoReceive">
	<sql type="condition">
		<condition>
			<select>select ClientId as strClientId,TransferMan,Audit,TransferTo from CRMClientTransfer where id=@ValueofDB:id</select>
			<select>select ClientName from CRMClientTransfer left join CRMClientinfo on CRMClientinfo.id=CRMClientTransfer.ClientId where CRMClientTransfer.id=@ValueofDB:id</select>
			<select>select EmpFullName,departmentCode from tblEmployee where id=@Sess:UserId</select>
			<select>select id as empId from CRMClientInfoEmp where f_ref=(select clientId from CRMClientTransfer where id=@ValueofDB:id) and employeeId=(select TransferTo from CRMClientTransfer where id=@ValueofDB:id)</select>
		</condition>	
		<exec condition="true">	
		<!--当角色接受客户移交时回填拥有者-->
			<sql>update CRMClientInfo set createBy=@SqlReturn:TransferTo,departmentCode=@SqlReturn:departmentCode where id=@SqlReturn:strClientId</sql>
			<sql>update CRMClientTransfer set statusId=1,Audit=1 where id=@ValueofDB:CRMClientTransfer_id</sql>
			<sql>delete from CRMClientInfoEmp where f_ref=@SqlReturn:strClientId and EmployeeID=@SqlReturn:TransferMan</sql>
			<sql>update CRMShareClient SET popedomUserIds = replace(','+popedomUserIds,','+@SqlReturn:TransferMan+',',',')  where clientId=@SqlReturn:strClientId</sql>
			
			
			<!-- 标识当前客户 为移交标志 -->
			<sql>update CRMClientInfo set handFlag=1 where id=@SqlReturn:strClientId</sql>
			<!-- 接受后添加一条通知消息 -->
		</exec>
		
		<!-- TransferTo共享表的操作(添加emp共享表,修改共享总类表) -->
		<exec condition="&quot;@SqlReturn:empId&quot;==&quot;null&quot;">
			<sql>insert into CRMClientInfoEmp(id,f_ref,DepartmentCode,EmployeeID,SCompanyID) select lower(substring(replace(newid(),'-',''),1,28)),@SqlReturn:strClientId,(select DepartmentCode from tblEmployee where id=@SqlReturn:TransferTo),@SqlReturn:TransferTo,@Sess:SCompanyID where @SqlReturn:TransferTo !='1' and not exists(select * from CRMClientInfoEmp where f_ref=@SqlReturn:strClientId and EmployeeID=@SqlReturn:TransferTo)</sql>
			<sql>update CRMShareClient set popedomUserIds = popedomUserIds+@SqlReturn:TransferTo+',' where clientId = @SqlReturn:strClientId</sql>
		</exec>
	</sql>
	<sql type="condition">
		<condition>
			<select>select ClientId as ClientId2,TransferMan,Audit,TransferTo from CRMClientTransfer where id=@ValueofDB:id</select>
			<select>select count(id) as isShare from CRMClientInfoEmp where f_ref=@SqlReturn:ClientId2 and employeeId!='1'</select>
		</condition>
		<!-- 如果跟单人大于等于2人 即共享 -->
		<exec condition="@SqlReturn:isShare &gt; 1">
			<sql>update CRMClientInfo set shareFlag=1 where id=@SqlReturn:ClientId2</sql>
		</exec>
		<!-- 记录客户日志 -->
		<exec condition="true">
			<sql>insert into CRMClientInfoLog(id,clientId,billType,context,createBy,createTime,relationId) values(@ValueofDB:id,@ValueofDB:ClientId,'CRMClientTransfer',@ValueofDB:logContent,@Sess:UserId,@ValueofDB:createTime,@ValueofDB:id)</sql> 
		</exec>	
	</sql>
	
	
</define>

<!-- 客户移交 拒绝 -->
<define name="CRMClientTransfer_Reject">
	<sql type="condition">
		<condition>
			<select>select ClientId,TransferMan,Audit,TransferTo from CRMClientTransfer where id=@ValueofDB:CRMClientTransfer_id</select>
		<select>select ClientName from CRMClientTransfer left join CRMClientinfo on CRMClientinfo.id=CRMClientTransfer.Clientid where CRMClientTransfer.id=@ValueofDB:CRMClientTransfer_id</select>
		<select>select EmpFullName from tblEmployee where id=@Sess:UserId</select>
		</condition>
		<!-- 必须是移交对象才能接受或拒绝 -->
		<exec condition="&quot;@SqlReturn:TransferTo&quot;!=&quot;@Sess:UserId&quot;">
			<error>CRMClientTransfer.operate.error</error>
		</exec>
		<exec condition="@SqlReturn:Audit!=0">
		<error>ClientName.Audit.error,@SqlReturn:ClientName</error>
		</exec>
		<!-- 已处理 -->
		<exec condition="true">	
			<sql>update CRMClientTransfer set statusId=1,Audit=2 where id=@ValueofDB:CRMClientTransfer_id</sql>
			<!-- 删除跟单人 -->
			<sql>delete from CRMClientInfoEmp where f_ref=@SqlReturn:ClientId and EmployeeID=@SqlReturn:TransferTo</sql>
			<!-- 拒绝后添加一条通知消息 -->
			<sql>insert into tblAdvice(id,send,title,receive,content,status,exist,createBy,createTime) values(lower(substring(replace(newid(),'-',''),1,28)),@Sess:UserId,@SqlReturn:EmpFullName+'拒绝了客户：'+@SqlReturn:ClientName,@SqlReturn:TransferMan,@SqlReturn:EmpFullName+'拒绝了客户：'+@SqlReturn:ClientName,'noRead','all',@Sess:UserId,convert(varchar(19),getdate(),120))</sql>
		</exec>
	</sql>
</define>

<!-- 纪念日提醒设置操作 -->
<define name="MemoryDayNoteSet_operate">
	<sql type="condition">
		<exec condition="&quot;@Sess:BillOper&quot;==&quot;add&quot; || &quot;@Sess:BillOper&quot;==&quot;update&quot;">
			<sql type="define">MemoryDayNoteSet_add_update</sql>
		</exec>
	</sql>
</define>

<define name="MemoryDayNoteSet_add_update">
	<sql type="condition">
		<condition>
			<select>select 'ExistSMSContentBlank' as ExistSMSContentBlank from MemoryDayNoteSet where ifSMSSend='1' and smsContent='' and id=@ValueofDB:MemoryDayNoteSet_id</select>
			<select>select 'ExistMailTitleMailContentBlank' as ExistMailTitleMailContentBlank from MemoryDayNoteSet where ifMailSend='1' and (mailTitle='' or datalength(mailContent)=0) and id=@ValueofDB:MemoryDayNoteSet_id</select>
		</condition>
		<!-- 短信内容不能为空 -->
		<exec condition="&quot;@SqlReturn:ExistSMSContentBlank&quot;==&quot;ExistSMSContentBlank&quot;">
			<error>MemoryDayNoteSet.operate.ExistSMSContentBlank</error>
		</exec>
		<!-- 邮件标题和邮件内容都不能为空 -->
		<exec condition="&quot;@SqlReturn:ExistMailTitleMailContentBlank&quot;==&quot;ExistMailTitleMailContentBlank&quot;">
			<error>MemoryDayNoteSet.operate.ExistMailTitleMailContentBlank</error>
		</exec>
	</sql>
</define>

<!-- 纪念日提醒设置 启用 -->
<define name="MemoryDayNoteSet_Start">
	<sql type="condition">
		<condition>
		</condition>
		<exec condition="true">
			<sql>update MemoryDayNoteSet set statusId=0 where id=@ValueofDB:MemoryDayNoteSet_id</sql>
		</exec>
	</sql>
</define>

<!-- 纪念日提醒设置 禁用 -->
<define name="MemoryDayNoteSet_Stop">
	<sql type="condition">
		<condition>
		</condition>
		<exec condition="true">
			<sql>update MemoryDayNoteSet set statusId=1 where id=@ValueofDB:MemoryDayNoteSet_id</sql>
		</exec>
	</sql>
</define>

<!-- 客户资料 启用 -->
<define name="OpenValue_CRMClientInfo">
	<sql type="condition">
		<condition>
		</condition>
		<exec condition="true">
			<sql>update CRMClientInfo set statusId=0 where id=@ValueofDB:CRMClientInfo_id</sql>
		</exec>
	</sql>
</define>

<!-- 客户资料 禁用 -->
<define name="StopValue_CRMClientInfo">
	<sql type="condition">
		<condition>
		</condition>
		<exec condition="true">
			<sql>update CRMClientInfo set statusId=1 where id=@ValueofDB:CRMClientInfo_id</sql>
		</exec>
	</sql>
</define>
<!-- 客户关健字 验证 -->
<define name="CRMCheckClient">
	<sql type="condition">
		<condition>
			<select>select 'ExistError4' as ExistError4,a.ClientName as ClientName,case when len(isnull(a.Address,''))=0 then ' ' else a.Address end as Address,b.EmpFullName as Employee,c.DeptFullName as Department,a.Keywords as Keywords From CRMClientInfo a left join tblEmployee b on b.id=a.createBy left join tblDepartment c on c.classCode=b.DepartmentCode where   a.Keywords=@ValueofDB:keyword and @MEM:InputKeyword='true'</select>
		</condition>
		<!-- 关键字有冲突 -->
		<exec condition="&quot;@SqlReturn:ExistError4&quot;==&quot;ExistError4&quot;">
			<error>CRMClientInfo.add.Rekeyword,@SqlReturn:Department @SqlReturn:Employee,@SqlReturn:ClientName,@SqlReturn:Address</error>
		</exec>
		<!-- 客户关健字是否唯一 -->
		<exec condition="&quot;@SqlReturn:ExistError4&quot;!=&quot;ExistError4&quot;">
			<error>CRMClientInfo.add.keyword2</error>
		</exec>
	</sql>
</define>

<!--信息来源启用-->
<define name="OpenValue_BaseInfo_tblSourceInfo">
    <sql type="condition">
		<condition>
			<select>select classcode as SourceCode,case when substring(classCode,1,5)!=classCode then substring(classCode,1,5) else '' end as str1,case when substring(classCode,1,10)!=classCode then substring(classCode,1,10) else '' end as str2,case when substring(classCode,1,15)!=classCode then substring(classCode,1,15) else '' end as str3,case when substring(classCode,1,20)!=classCode then substring(classCode,1,20) else '' end as str4,case when substring(classCode,1,25)!=classCode then substring(classCode,1,25) else '' end as str5 from tblSourceInfo where tblSourceInfo.id=@ValueofDB:tblSourceInfo_id</select>
		</condition>
		<exec condition="true">
			<sql>update tblSourceInfo set statusId=0 where id=@ValueofDB:tblSourceInfo_id</sql>
			<sql>update tblSourceInfo set statusId=0 where classcode like @SqlReturn:SourceCode+'%'</sql>
			<sql>update tblSourceInfo set statusId=0 where classCode=@SqlReturn:str1 or classCode=@SqlReturn:str2 or classCode=@SqlReturn:str3 or classCode=@SqlReturn:str4 or classCode=@SqlReturn:str5</sql>
		</exec>
    </sql>
</define>

<!--信息来源停用-->
<define name="StopValue_BaseInfo_tblSourceInfo">
    <sql type="condition">
		<condition>
			<select>select classcode from tblSourceInfo where id=@ValueofDB:tblSourceInfo_id</select>
		</condition>
		<exec condition="true">
			<sql>update tblSourceInfo set statusId=-1 where id=@ValueofDB:tblSourceInfo_id</sql>
			<sql>update tblSourceInfo set statusId=-1 where classcode like @SqlReturn:classcode+'%'</sql>
		</exec>
    </sql>
</define>

	<!--以下增加信息来源前执行的操作 -->
<define name="tblSourceInfo_add_before_check">
	<sql type="condition"> 	
		<condition>
			<select>select tblSourceInfo.SourceName as FullName from tblSourceInfo where tblSourceInfo.classCode in (select SourceInfo from CRMClientInfo) 
and tblSourceInfo.SCompanyID=@Sess:SCompanyID and tblSourceInfo.classCode=substring(@ValueofDB:tblSourceInfo_classCode,1,len(@ValueofDB:tblSourceInfo_classCode)-5)</select>
		</condition>
		<!-- 已被引用或发生业务的信息来源不能添加下级 -->
		<exec condition="(&quot;@SqlReturn:FullName&quot;!= &quot;null&quot; &amp;&amp; &quot;@SqlReturn:FullName&quot;.length != 0)">
		<error>BaseInfo.addType.error,@SqlReturn:FullName</error>
		</exec>
	</sql>
</define>
<!--以上增加信息来源前执行的操作-->

	
<!--以下增加信息来源执行的操作-->
<define name="tblSourceInfo_add">
	<sql type="condition"> 
		<condition>
			<select>select count(SourceNo) as SourceNo from tblSourceInfo where classCode=@ValueofDB:tblSourceInfo_classCode and SCompanyID=@Sess:SCompanyID</select>
			<select>select count(SourceName) as SourceName from tblSourceInfo where classCode=@ValueofDB:tblSourceInfo_classCode and SCompanyID=@Sess:SCompanyID</select>
		</condition>
		<exec condition="@SqlReturn:SourceNo &gt; 1">
		<error>tblSourceInfo.SourceNo.error</error>
		</exec>	
		<exec condition="@SqlReturn:SourceName &gt; 1">
		<error>tblSourceInfo.SourceName.error</error>
		</exec>			
	</sql>
</define>
<!--以上增加信息来源执行的操作-->
				
	<!--以下信息来源执行的操作-->
    <define name="tblSourceInfo_del">
		<sql type="condition"> 	
			<condition>
			<select>select classCode from tblSourceInfo where id=@ValueofDB:tblSourceInfo_id</select>
			<select>select SourceInfo from CRMClientInfo where SourceInfo =(select classCode from tblSourceInfo where id=@ValueofDB:tblSourceInfo_id)</select>
			</condition>
		    <exec condition="(&quot;@SqlReturn:SourceInfo&quot; != &quot;null&quot; &amp;&amp; &quot;@SqlReturn:SourceInfo&quot;.length != 0)">
			<error>tblSourceInfo.Delete.error</error>
			</exec>
		</sql>
	</define>
	
	<define name="SMSModel_del_before">
		<sql type="condition"> 	
			<condition>
				<select>select modelType from tblSMSModel where id=@ValueofDB:_id</select>
			</condition>
		    <exec condition="@SqlReturn:modelType==1">
				<error>default.module.not.delete</error>
			</exec>
		</sql>
	</define>
	<define name="SMSModel_update">
	<sql type="condition">
		<condition>
			<select>select billTableName,ExecuteAction from tblSMSModel group by billTableName,ExecuteAction having count(*) &gt; 1</select>
			<select>select ExecuteStyle   from tblSMSModel where id=@ValueofDB:tblSMSModel_id and (ExecuteStyle='22' or ExecuteStyle='33') and (select count(*) from tblSMSUser where tblSMSUser.f_ref=@ValueofDB:tblSMSModel_id)=0</select>
			<select>select ExecuteAction  from tblSMSModel where id=@ValueofDB:tblSMSModel_id and ExecuteAction='delete' and ExecuteStyle!='22'</select>
		</condition>
		<!-- 同一单据不允许有重复的执行动作 -->
     <exec condition="&quot;@SqlReturn:billTableName&quot; !=&quot;null&quot; &amp;&amp; &quot;@SqlReturn:billTableName&quot;.length!=0">
     <error>BillTable.SMSModel.error</error>
   </exec>
   		<!-- 执行方式为自动或手动加自动时必须选择职员-->
     <exec condition="&quot;@SqlReturn:ExecuteStyle&quot; !=&quot;null&quot; &amp;&amp; &quot;@SqlReturn:ExecuteStyle&quot;.length!=0">
     <error>Execute.SMSModel.error</error>
   </exec>
     		<!-- 执行动作为删除时执行方式必须选择自动-->
     <exec condition="&quot;@SqlReturn:ExecuteAction&quot; !=&quot;null&quot; &amp;&amp; &quot;@SqlReturn:ExecuteAction&quot;.length!=0">
     <error>ExecuteAction.SMSModel.error</error>
   </exec>
	</sql>
</define>


<!-- 修改后 重启 -->
<define name="SMSModel_NoRestar">
</define>
<!--故障类型启用-->
<define name="OpenValue_BaseInfo_CRMFaultType">
    <sql type="condition">
		<condition>
			<select>select classcode as SourceCode,case when substring(classCode,1,5)!=classCode then substring(classCode,1,5) else '' end as str1,case when substring(classCode,1,10)!=classCode then substring(classCode,1,10) else '' end as str2,case when substring(classCode,1,15)!=classCode then substring(classCode,1,15) else '' end as str3,case when substring(classCode,1,20)!=classCode then substring(classCode,1,20) else '' end as str4,case when substring(classCode,1,25)!=classCode then substring(classCode,1,25) else '' end as str5 from CRMFaultType where CRMFaultType.id=@ValueofDB:CRMFaultType_id</select>
		</condition>
		<exec condition="true">
			<sql>update CRMFaultType set statusId=0 where id=@ValueofDB:CRMFaultType_id</sql>
			<sql>update CRMFaultType set statusId=0 where classcode like @SqlReturn:SourceCode+'%'</sql>
			<sql>update CRMFaultType set statusId=0 where classCode=@SqlReturn:str1 or classCode=@SqlReturn:str2 or classCode=@SqlReturn:str3 or classCode=@SqlReturn:str4 or classCode=@SqlReturn:str5</sql>
		</exec>
    </sql>
</define>

<!--故障类型停用-->
<define name="StopValue_BaseInfo_CRMFaultType">
    <sql type="condition">
		<condition>
			<select>select classcode from CRMFaultType where id=@ValueofDB:CRMFaultType_id</select>
		</condition>
		<exec condition="true">
			<sql>update CRMFaultType set statusId=-1 where id=@ValueofDB:CRMFaultType_id</sql>
			<sql>update CRMFaultType set statusId=-1 where classcode like @SqlReturn:classcode+'%'</sql>
		</exec>
    </sql>
</define>

	<!--以下增加故障类型前执行的操作 -->
<define name="CRMFaultType_add_before_check">
	<sql type="condition"> 	
		<condition>
			<select>select CRMFaultType.FaultName as FullName from CRMFaultType where CRMFaultType.classCode in (select FaultCode from tblMaintainNoteDet) 
and CRMFaultType.SCompanyID=@Sess:SCompanyID and CRMFaultType.classCode=substring(@ValueofDB:CRMFaultType_classCode,1,len(@ValueofDB:CRMFaultType_classCode)-5)</select>
		</condition>
		<!-- 已被引用或发生业务的故障类型不能添加下级 -->
		<exec condition="(&quot;@SqlReturn:FullName&quot;!= &quot;null&quot; &amp;&amp; &quot;@SqlReturn:FullName&quot;.length != 0)">
		<error>BaseInfo.addType.error,@SqlReturn:FullName</error>
		</exec>
	</sql>
</define>
<!--以上增加故障类型前执行的操作-->

	
<!--以下增加故障类型执行的操作-->
<define name="CRMFaultType_add">
	<sql type="condition"> 
		<condition>
			<select>select count(Number) as FaultNumber from CRMFaultType where classCode=@ValueofDB:CRMFaultType_classCode and SCompanyID=@Sess:SCompanyID</select>
			<select>select count(FaultName) as FaultName from CRMFaultType where classCode=@ValueofDB:CRMFaultType_classCode and SCompanyID=@Sess:SCompanyID</select>
		</condition>
		<exec condition="@SqlReturn:FaultNumber &gt; 1">
		<error>CRMFaultType.FaultNumber.error</error>
		</exec>	
		<exec condition="@SqlReturn:FaultName &gt; 1">
		<error>CRMFaultType.FaultName.error</error>
		</exec>			
	</sql>
</define>
	<!--以上增加故障类型执行的操作-->
				
	<!--以下故障类型执行的操作 &quot;@Sess:BillOper&quot; != &quot;update&quot;-->
    <define name="CRMFaultType_del">
		<sql type="condition"> 	
			<condition>
			<select>select classCode from CRMFaultType where id=@ValueofDB:CRMFaultType_id</select>
			<select>select FaultCode from tblMaintainNoteDet where FaultCode =(select classCode from CRMFaultType where id=@ValueofDB:CRMFaultType_id)</select>
			</condition>
		    <exec condition="(&quot;@SqlReturn:FaultCode&quot; != &quot;null&quot; &amp;&amp; &quot;@SqlReturn:FaultCode&quot;.length != 0) &amp;&amp; &quot;@Sess:BillOper&quot; != &quot;update&quot;">
			<error>CRMFaultType.Delete.error</error>
			</exec>
		</sql>
	</define>


<!--检测项目启用-->
<define name="OpenValue_BaseInfo_CRMCheckItem">
    <sql type="condition">
		<condition>
			<select>select classcode as SourceCode,case when substring(classCode,1,5)!=classCode then substring(classCode,1,5) else '' end as str1,case when substring(classCode,1,10)!=classCode then substring(classCode,1,10) else '' end as str2,case when substring(classCode,1,15)!=classCode then substring(classCode,1,15) else '' end as str3,case when substring(classCode,1,20)!=classCode then substring(classCode,1,20) else '' end as str4,case when substring(classCode,1,25)!=classCode then substring(classCode,1,25) else '' end as str5 from CRMCheckItem where CRMCheckItem.id=@ValueofDB:CRMCheckItem_id</select>
		</condition>
		<exec condition="true">
			<sql>update CRMCheckItem set statusId=0 where id=@ValueofDB:CRMCheckItem_id</sql>
			<sql>update CRMCheckItem set statusId=0 where classcode like @SqlReturn:SourceCode+'%'</sql>
			<sql>update CRMCheckItem set statusId=0 where classCode=@SqlReturn:str1 or classCode=@SqlReturn:str2 or classCode=@SqlReturn:str3 or classCode=@SqlReturn:str4 or classCode=@SqlReturn:str5</sql>
		</exec>
    </sql>
</define>

<!--检测项目停用-->
<define name="StopValue_BaseInfo_CRMCheckItem">
    <sql type="condition">
		<condition>
			<select>select classcode from CRMCheckItem where id=@ValueofDB:CRMCheckItem_id</select>
		</condition>
		<exec condition="true">
			<sql>update CRMCheckItem set statusId=-1 where id=@ValueofDB:CRMCheckItem_id</sql>
			<sql>update CRMCheckItem set statusId=-1 where classcode like @SqlReturn:classcode+'%'</sql>
		</exec>
    </sql>
</define>

	<!--以下增加检测项目前执行的操作 -->
<define name="CRMCheckItem_add_before_check">
	<sql type="condition"> 	
		<condition>
			<select>select CRMCheckItem.ItemName as FullName from CRMCheckItem where CRMCheckItem.classCode in (select ItemCode from CRMPeriodicExamineDetail) 
and CRMCheckItem.SCompanyID=@Sess:SCompanyID and CRMCheckItem.classCode=substring(@ValueofDB:CRMCheckItem_classCode,1,len(@ValueofDB:CRMCheckItem_classCode)-5)</select>
		</condition>
		<!-- 已被引用或发生业务的检测项目不能添加下级 -->
		<exec condition="(&quot;@SqlReturn:FullName&quot;!= &quot;null&quot; &amp;&amp; &quot;@SqlReturn:FullName&quot;.length != 0)">
		<error>BaseInfo.addType.error,@SqlReturn:FullName</error>
		</exec>
	</sql>
</define>
<!--以上增加检测项目前执行的操作-->

	
<!--以下增加检测项目执行的操作-->
<define name="CRMCheckItem_add">
	<sql type="condition"> 
		<condition>
			<select>select count(ItemNo) as FaultNumber from CRMCheckItem where classCode=@ValueofDB:CRMCheckItem_classCode and SCompanyID=@Sess:SCompanyID</select>
			<select>select count(ItemName) as FaultName from CRMCheckItem where classCode=@ValueofDB:CRMCheckItem_classCode and SCompanyID=@Sess:SCompanyID</select>
		</condition>
		<exec condition="@SqlReturn:FaultNumber &gt; 1">
		<error>CRMCheckItem.FaultNumber.error</error>
		</exec>	
		<exec condition="@SqlReturn:FaultName &gt; 1">
		<error>CRMCheckItem.FaultName.error</error>
		</exec>			
	</sql>
</define>
	<!--以上增加检测项目执行的操作-->
				
	<!--以下检测项目执行的操作 &quot;@Sess:BillOper&quot; != &quot;update&quot;-->
    <define name="CRMCheckItem_del">
		<sql type="condition"> 	
			<condition>
			<select>select classCode from CRMCheckItem where id=@ValueofDB:CRMCheckItem_id</select>
			<select>select ItemCode from CRMPeriodicExamineDetail where ItemCode =(select classCode from CRMCheckItem where id=@ValueofDB:CRMCheckItem_id)</select>
			</condition>
		    <exec condition="(&quot;@SqlReturn:FaultCode&quot; != &quot;null&quot; &amp;&amp; &quot;@SqlReturn:FaultCode&quot;.length != 0) &amp;&amp; &quot;@Sess:BillOper&quot; != &quot;update&quot;">
			<error>CRMCheckItem.Delete.error</error>
			</exec>
		</sql>
	</define>		







	
<!-- CRM 收款单 -->
<define name="CRMSaleReceive_Add">
	<sql type="condition">
		<condition>
		<select>select 'NoExistsAmt' as NoExistsAmt from CRMSaleReceive where id=@ValueofDB:CRMSaleReceive_id and ExeBalAmt &lt;= 0</select>
		</condition>
		<!--金额必须大于0-->
		<exec condition="&quot;@SqlReturn:NoExistsAmt&quot; == &quot;NoExistsAmt&quot;">
		<error>control.receivemoney.morethanZero</error>
		</exec>
		<!-- 收款单未启用审核时 -->
		<exec condition="&quot;@MEM:CRMSaleReceive_IsStatart&quot;!=&quot;1&quot;">
		<sql type="define">CRMSaleReceive_Add_One</sql>
		</exec>
		<exec condition="'@ValueofDB:SaleContractId' != 'null'">
		<sql>update CRMSaleContract set  ReceiveAmount=a.Amount  from (select SUM(ExeBalAmt) as Amount,SaleContractId   from CRMSaleReceive where SaleContractId=@ValueofDB:SaleContractId group by CRMSaleReceive.SaleContractId ) a where a.SaleContractId=CRMSaleContract.id </sql>
		</exec>
	</sql>	
</define>	

<define name="CRMSaleReceive_Add_One">
	<sql type="condition">
		<condition>
			<select>select isNull(ExeBalAmt,0) as ExeBalAmt,AccBillNO from CRMSaleReceive where id=@ValueofDB:CRMSaleReceive_id</select>
		</condition>
		<!-- 回填销售合同的汇款金额 -->
		<exec condition="true">
		<sql>update CRMSaleContract set ReceiveAmount=ReceiveAmount+@SqlReturn:ExeBalAmt,NoReceiveAmount=NoReceiveAmount-@SqlReturn:ExeBalAmt where id=@ValueofDB:CRMSaleReceive_AccBillNO</sql>
		</exec>
				<!--插入动态信息-->
			<exec condition="true">
					<sql>update CRMClientInfo set LastContractTime=@ValueofDB:CRMSaleReceive_lastUpdateTime where id=@ValueofDB:f_brother</sql>
			</exec>
				     <!--启用关联销售收款单且未启用ERP收款单关联CRM销售合同回填对应工作计划销售金额完成数及比例
		<exec condition="@MEM:SalesAssReceive==true &amp;&amp; @MEM:ReceiveCRMContract==false">
			<sql>update tblDayWorkPlan set ReComplete=ReComplete+isNull((select ExeBalAmt from CRMSaleReceive where id=@ValueofDB:CRMSaleReceive_id and CRMSaleReceive.EmployeeID=tblDayWorkPlan.createBy and CRMSaleReceive.BillDate between tblDayWorkPlan.BeginDate and tblDayWorkPlan.EndDate),0),ReScale=(case when ReceiveAmt=0 then 0 else cast((ReComplete+isNull((select ExeBalAmt from CRMSaleReceive where id=@ValueofDB:CRMSaleReceive_id and CRMSaleReceive.EmployeeID=tblDayWorkPlan.createBy and CRMSaleReceive.BillDate between tblDayWorkPlan.BeginDate and tblDayWorkPlan.EndDate),0))*100/ReceiveAmt as numeric(18,2)) end)</sql>
		</exec>-->
	</sql>	
</define>	

<!-- CRM 收款单 -->
<define name="CRMSaleReceive_Delete">
	<sql type="condition">
		<!-- 收款单未启用审核时 -->
		<exec condition="&quot;@MEM:CRMSaleReceive_IsStatart&quot;!=&quot;1&quot;">
		<sql type="define">CRMSaleReceive_Del_One</sql>
		</exec>
	</sql>	
</define>	

<define name="CRMSaleReceive_Del_One">
	<sql type="condition">
		<condition>
		<select>select isNull(ExeBalAmt,0) as ExeBalAmt,AccBillNO from CRMSaleReceive where id=@ValueofDB:CRMSaleReceive_id</select>
		
		</condition>
		<!-- 回填销售合同的汇款金额 -->
		<exec condition="&quot;@SqlReturn:AccBillNO&quot;!=&quot;null&quot;&amp;&amp;&quot;@SqlReturn:AccBillNO&quot;.length!=0">
		<sql>update CRMSaleContract set ReceiveAmount=ReceiveAmount-@SqlReturn:ExeBalAmt,NoReceiveAmount=NoReceiveAmount+@SqlReturn:ExeBalAmt where id=@SqlReturn:AccBillNO</sql>
		</exec>
			<exec condition="&quot;@Sess:BillOper&quot;==&quot;delete&quot;">
			<sql>update CRMSaleContract set NoReceiveAmount=NoReceiveAmount</sql>
			</exec>
			  <!--启用关联销售收款单且未启用ERP收款单关联CRM销售合同回填对应工作计划销售金额完成数及比例
		<exec condition="@MEM:SalesAssReceive==true &amp;&amp; @MEM:ReceiveCRMContract==false">
			<sql>update tblDayWorkPlan set ReComplete=ReComplete-isNull((select ExeBalAmt from CRMSaleReceive where id=@ValueofDB:CRMSaleReceive_id and CRMSaleReceive.EmployeeID=tblDayWorkPlan.createBy and CRMSaleReceive.BillDate between tblDayWorkPlan.BeginDate and tblDayWorkPlan.EndDate),0),ReScale=(case when ReceiveAmt=0 then 0 else cast((ReComplete-isNull((select ExeBalAmt from CRMSaleReceive where id=@ValueofDB:CRMSaleReceive_id and CRMSaleReceive.EmployeeID=tblDayWorkPlan.createBy and CRMSaleReceive.BillDate between tblDayWorkPlan.BeginDate and tblDayWorkPlan.EndDate),0))*100/ReceiveAmt as numeric(18,2)) end)</sql>
		</exec>-->
	</sql>	
</define>	










	<!--销售金额添加操作-->
<define name="CRMSalesAmount_add">
	<sql type="condition">
		<condition>
			<select>select BeginAmt,EndAmt from CRMSalesAmount where id=@ValueofDB:CRMSalesAmount_id</select>
			<select>select c.ExistsEqual as ExistsEqual,e.ExistsInterval as ExistsInterval from CRMSalesAmount a outer apply (select 'Exists' as ExistsEqual from CRMSalesAmount b where b.id!=a.id and (b.BeginAmt=a.BeginAmt or b.EndAmt=a.EndAmt)) as c outer apply (select 'Exists' as ExistsInterval from CRMSalesAmount d where d.id!=a.id and ((d.BeginAmt&gt;a.BeginAmt and a.EndAmt&gt;d.BeginAmt) or (d.EndAmt&lt;a.EndAmt and a.BeginAmt&lt;d.EndAmt))) as e where a.id=@ValueofDB:CRMSalesAmount_id</select>
			<select>select 'ExistData' as ExistData from CRMSalesAmount where id!=@ValueofDB:CRMSalesAmount_id</select>
		</condition>
		<!-- 结束天数必须大于开始天数 -->
		<exec condition="@SqlReturn:BeginAmt&gt;= @SqlReturn:EndAmt">
			<error>SalesAmount.Add.error</error>
		</exec>	 
		<!-- 开始天数和结束天数都必须大于0 -->
		<exec condition="@SqlReturn:BeginAmt&lt;0||@SqlReturn:EndAmt&lt;0">
			<error>SalesAmount.days.error</error>
		</exec>	
		<!-- 金额区间不能够交叉重复 -->
		<exec condition="&quot;@SqlReturn:ExistsEqual&quot;==&quot;Exists&quot;||&quot;@SqlReturn:ExistsInterval&quot;==&quot;Exists&quot;">
			<error>SalesAmount.days.repeat.error</error>
		</exec>
	</sql>
</define>
<!--事件计划判断开始日期必须小于结束日期-->
	<define name="tblDayWorkPlan2_Add">
    <sql type="condition">
		<condition>
			<select>select BeginDate,EndDate  from tblDayWorkPlan2 where tblDayWorkPlan2.id=@ValueofDB:tblDayWorkPlan_id</select>
		</condition>
		<exec condition="&quot;@ValueofDB:tblDayWorkPlan2_BeginDate&quot;&gt;&quot;@ValueofDB:tblDayWorkPlan2_EndDate&quot;">
			 <error>EndDate.BeginDate.error</error>
		</exec>
	</sql>	
	</define>
	<!-- 呼叫分配判断当前日期，如果小于当期日期则不能修改，只能修改当天以后的数据-->
	<define name="CRMCallDistribution_Update">
    <sql type="condition">
		<condition>
			<select>select CallDate from CRMCallDistribution where CRMCallDistribution.id=@ValueofDB:CRMCallDistribution_id</select>
		</condition>
		<exec condition="&quot;@SqlReturn:CallDate&quot; != &quot;null&quot; &amp;&amp; &quot;@SqlReturn:CallDate&quot; != &quot;&quot; &amp;&amp; &quot;@MEM:sysShortDate&quot;&gt;&quot;@SqlReturn:CallDate&quot;">
			 <error>CRMCallDistribution.CallDate.Modify.error</error>
			 </exec>
	</sql>	
	</define>
		<!-- 呼叫分配判断当前日期，如果小于当期日期则不能删除，只能删除当天以后的数据-->
	<define name="CRMCallDistribution_Delete">
    <sql type="condition">
		<condition>
			<select>select CallDate from CRMCallDistribution where CRMCallDistribution.id=@ValueofDB:CRMCallDistribution_id</select>
		</condition>
		<exec condition="&quot;@SqlReturn:CallDate&quot; != &quot;null&quot; &amp;&amp; &quot;@SqlReturn:CallDate&quot; != &quot;&quot; &amp;&amp; &quot;@MEM:sysShortDate&quot;&gt;&quot;@SqlReturn:CallDate&quot;">
			 <error>CRMCallDistribution.CallDate.Delete.error</error>
			 </exec>
	</sql>	
	</define>
	<!-- 需求分析表 增加时操作 -->
<define name="CRMDemand_Add">
	<sql type="condition">
		<condition>
		</condition>
		<!--插入动态信息-->
			<exec condition="true">
					<sql>update CRMClientInfo set LastContractTime=@ValueofDB:CRMDemand_lastUpdateTime where id=@ValueofDB:f_brother</sql>
			</exec>
	</sql>
</define>
<define name="CRMDemand_Delete">
	<sql type="condition">
		<condition>
		</condition>
	</sql>
</define>
	<!-- 客户费用 增加时操作 -->
<define name="CRMFee_Add">
	<sql type="condition">
		<condition>
		</condition>
		<!--插入动态信息-->
			<exec condition="true">
					<sql>update CRMClientInfo set LastContractTime=@ValueofDB:CRMFee_lastUpdateTime where id=@ValueofDB:f_brother</sql>
			</exec>
	</sql>
</define>
<define name="CRMFee_Delete">
	<sql type="condition">
		<condition>
		</condition>
		<!--删除动态信息-->
	</sql>
</define>
	<!-- 竞争对手 增加时操作 -->
<define name="CRMCompetitorInfo_Add">
	<sql type="condition">
		<condition>
		</condition>
		<!--插入动态信息-->
			<exec condition="true">
					<sql>update CRMClientInfo set LastContractTime=@ValueofDB:CRMCompetitorInfo_lastUpdateTime where id=@ValueofDB:f_brother</sql>
			</exec>
	</sql>
</define>
<define name="CRMCompetitorInfo_Delete">
	<sql type="condition">
		<condition>
		</condition>
		<!--删除动态信息
			<exec condition="true">
				<sql>delete from CRMClientInfoLog where id=@ValueofDB:CRMCompetitorInfo_id</sql>
			</exec>
			-->
	</sql>
</define>
<!-- 市场活动 增加时操作 -->
<define name="CRMMartAction_add">
	<sql type="condition">
		<condition>
			<select>select count(*) as countDetSum from CRMActionParticipant where f_ref=@ValueofDB:CRMMartAction_id</select>
		</condition>
		<!-- 开始日期不能大于结束日期-->
		<exec condition="&quot;@ValueofDB:CRMMartAction_BeginDate&quot;&gt;&quot;@ValueofDB:CRMMartAction_EndDate&quot;">
				<error>EndDate.BeginDate.error</error>
		</exec>
		<!-- 明细条数不能小于1-->
		<exec condition="@SqlReturn:countDetSum&lt;1">
				<error>CRMActionParticipant.employee.error</error>
		</exec>
	</sql>
</define>
<!-- 市场活动 删除时操作 -->
<define name="CRMMartAction_delete">
	<sql type="condition">
		<condition>
			<select>select count(*) as number from CRMClientInfo where AssociatedAaction=@ValueofDB:CRMMartAction_id</select>
		</condition>
		<exec condition="&quot;@SqlReturn:number&quot;&gt;&quot;0&quot;">
			<error>Common.crmmart.delete</error>
		</exec>
	</sql>
</define>
<!-- 活动费用 增加时操作 -->
<define name="CRMActionExpense_add">
	<sql type="condition">
		<condition>
			<select>select 'exists' as existExpen from CRMActionExpenseDet where f_ref=@ValueofDB:CRMActionExpense_id and isnull(Amount,0)&lt;=0</select>
		</condition>
		<!-- 活动费用不能小于等于0-->
		<exec condition="&quot;@SqlReturn:existExpen&quot;==&quot;exists&quot;">
				<error>CRMMartAction.CRMActionExpense.error</error>
		</exec>
	</sql>
</define>

<!-- 执行光荣榜启用 -->
	<define name="OpenValue_BaseInfo_tblfameTop">
	<sql type="condition">
	<condition></condition>
	<exec condition="true">
	<sql>update tblfameTop set statusId=0 where id=@ValueofDB:tblfameTop_id</sql>
	</exec>
	</sql>
	</define>
	<!-- 执行光荣榜停用 -->
	<define name="StopValue_BaseInfo_tblfameTop">
	<sql type="condition">
	<condition></condition>
	<exec condition="true">
	<sql>update tblfameTop set statusId=1 where id=@ValueofDB:tblfameTop_id</sql>
	</exec>
	</sql>
	</define>
	<!-- 执行修改目标级别表 -->
	<define name="tblGoalGrade_update">
	<sql type="condition">
	<condition>
	</condition>
		<exec condition="@ValueofDB:tblGoalGrade_statusId==0">
		<sql>update tblLanguage set zh_CN=@ValueofDB:tblGoalGrade_name where id in (select languageId from tblDBFieldInfo where fieldName=@ValueofDB:tblGoalGrade_id)</sql>
		<sql>update tblDBFieldInfo set inputType='8',inputTypeOld='8' where tableid in (select id from tblDBTableInfo where tableName in('tblCompanyGoal','tblDepartmentGoal','tblEmployeeGoal')) and fieldName=@ValueofDB:tblGoalGrade_id</sql>
		<sql>update tblDBFieldInfo set inputType='0',inputTypeOld='0' where tableid in (select id from tblDBTableInfo where tableName in('tblCompanyGoalDet','tblDepartmentGoalDet','tblEmployeeGoalDet')) and fieldName=@ValueofDB:tblGoalGrade_id</sql>
		</exec>
		<exec condition="@ValueofDB:tblGoalGrade_statusId==1">
		<sql>update tblLanguage set zh_CN=@ValueofDB:tblGoalGrade_name where id in (select languageId from tblDBFieldInfo where fieldName=@ValueofDB:tblGoalGrade_id)</sql>
		<sql>update tblDBFieldInfo set inputType='100',inputTypeOld='100' where tableid in (select id from tblDBTableInfo where tableName in('tblCompanyGoal','tblDepartmentGoal','tblEmployeeGoal')) and fieldName=@ValueofDB:tblGoalGrade_id</sql>
		<sql>update tblDBFieldInfo set inputType='100',inputTypeOld='100' where tableid in (select id from tblDBTableInfo where tableName in('tblCompanyGoalDet','tblDepartmentGoalDet','tblEmployeeGoalDet')) and fieldName=@ValueofDB:tblGoalGrade_id</sql>
		</exec>
		<exec condition="true">
		<sucess>afterOperation.needRestart.success</sucess>
		</exec>
	</sql>
	</define>
		<!-- 执行启用目标级别表 -->
	<define name="OpenValue_BaseInfo_tblGoalGrade">
	<sql type="condition">
	<condition>
	</condition>
		<exec condition="true">
		<sql>update tblDBFieldInfo set inputType='8',inputTypeOld='8' where tableid in (select id from tblDBTableInfo where tableName in('tblCompanyGoal','tblDepartmentGoal','tblEmployeeGoal')) and fieldName=@ValueofDB:tblGoalGrade_id</sql>
		<sql>update tblDBFieldInfo set inputType='0',inputTypeOld='0' where tableid in (select id from tblDBTableInfo where tableName in('tblCompanyGoalDet','tblDepartmentGoalDet','tblEmployeeGoalDet')) and fieldName=@ValueofDB:tblGoalGrade_id</sql>
		<sql>update tblGoalGrade set statusId=0 where id=@ValueofDB:tblGoalGrade_id</sql>
		</exec>
		<exec condition="true">
		<sucess>afterOperation.needRestart.success</sucess>
		</exec>
		
	</sql>
	</define>
			<!-- 执行停用目标级别表 -->
	<define name="StopValue_BaseInfo_tblGoalGrade">
	<sql type="condition">
	<condition>
	</condition>
		
		<exec condition="true">
		<sql>update tblDBFieldInfo set inputType='100',inputTypeOld='100' where tableid in (select id from tblDBTableInfo where tableName in('tblCompanyGoal','tblDepartmentGoal','tblEmployeeGoal')) and fieldName=@ValueofDB:tblGoalGrade_id</sql>
		<sql>update tblDBFieldInfo set inputType='100',inputTypeOld='100' where tableid in (select id from tblDBTableInfo where tableName in('tblCompanyGoalDet','tblDepartmentGoalDet','tblEmployeeGoalDet')) and fieldName=@ValueofDB:tblGoalGrade_id</sql>
		<sql>update tblGoalGrade set statusId=1 where id=@ValueofDB:tblGoalGrade_id</sql>
		</exec>
		<exec condition="true">
		<sucess>afterOperation.needRestart.success</sucess>
		</exec>
	</sql>
	</define>
<!--目标类型增加操作-->
	
<define name="tblGoalType_add">
	<sql type="condition">
	<condition>
	<select>select isnull(max(cNum)+1,0) as enumValue1 from (select 1 as c1) b left join  tblGoalType a on 1=1</select>
	<select>select a.id as kid from tblDBEnumeration a  where a.enumName='goalType' group by a.id	</select>
	<select>select cNum,name,name+'1' as lname from tblGoalType where id=@ValueofDB:tblGoalType_id</select>
	</condition>
	<exec condition="@ValueofDB:tblGoalType_dataType==2&amp;&amp;&quot;@ValueofDB:tblGoalType_dataSql&quot;.length==0">
	<error>CRMGoldType.GetSql.error</error>
	</exec>
    <exec condition="&quot;@Sess:BillOper&quot;==&quot;add&quot;"> 
	<sql>insert
tblDBEnumerationItem(id,enumValue,enumId,SCompanyID,classCode,RowON,workFlowNodeName,workFlowNode,printCount,languageId) values(@ValueofDB:tblGoalType_id,@SqlReturn:enumValue1,@SqlReturn:kid,'','','','','','0',@SqlReturn:lname)
	</sql>
	<sql>insert
tblLanguage(id,zh_TW,zh_HK,en,zh_CN) select id+'1',zh_TW,zh_HK,en,zh_CN from tblLanguage where id = @SqlReturn:name
	</sql>
	
	<sql>update tblGoalType set cNum=@SqlReturn:enumValue1 where id=@ValueofDB:tblGoalType_id</sql>
	</exec>	
	<exec condition="true">
	<sucess>afterOperation.needRestart.success</sucess>
	</exec>
	</sql>
	</define>
	
	<!--目标类型增加操作-->
	
<define name="tblGoalType_update">
	<sql type="condition">
	<condition>	
		<select>select zh_CN as zhcn,zh_HK as zhhk,zh_TW as zhtw,en as en from tbllanguage where id = (select name from tblGoalType where id=@ValueofDB:tblGoalType_id) </select>
	</condition>
	<exec condition="@ValueofDB:tblGoalType_dataType==2&amp;&amp;&quot;@ValueofDB:tblGoalType_dataSql&quot;.length==0">
	<error>CRMGoldType.GetSql.error</error>
	</exec>
	<exec condition="&quot;@Sess:BillOper&quot;==&quot;update&quot;"> 
	<sql>update tblLanguage set zh_CN=@SqlReturn:zhcn,zh_HK=@SqlReturn:zhhk,zh_TW=@SqlReturn:zhtw,en=@SqlReturn:en where id in (select languageId from tblDBEnumerationItem where  enumValue=@ValueofDB:cNum and enumId=(select id from tblDBEnumeration where enumName='goalType'))</sql>
	</exec>
	<exec condition="true">
	<sucess>afterOperation.needRestart.success</sucess>
	</exec>
	</sql>
	</define>
		
	<!--目标类型删除操作-->

	<define name="tblGoalType_del_before">
		<sql type="condition">
		<condition>
		<select>select cNum from tblGoalType where id=@ValueofDB:tblGoalType_id</select>
		</condition>
	<exec condition="&quot;@Sess:BillOper&quot;==&quot;delete&quot;">		
	
	<!--删除枚举表里面的目标级别名称及枚举值-->
		<sql>delete from tblLanguage where id in (select languageId from tblDBEnumerationItem where  enumValue=@SqlReturn:cNum and enumId=(select id from tblDBEnumeration where enumName='goalType'))</sql>
		<sql>delete from tblDBEnumerationItem where enumValue=@SqlReturn:cNum and enumId=(select id from tblDBEnumeration where enumName='goalType')</sql>
		
		</exec>
		<exec condition="true">
	    <sucess>afterOperation.needRestart.success</sucess>
	   </exec>
		</sql>
	</define>

	
	<!--目标类型启用操作-->
	<define name="OpenValue_BaseInfo_tblGoalType">
	<sql type="condition">
	<condition><select>select id as kid from tblDBEnumeration where enumName='goalType'</select>
	           <select>select cNum,name,name+'1' as lname from tblGoalType where id=@ValueofDB:tblGoalType_id</select>
	           <select>select id as enumerationItemId from tblDBEnumerationItem where id=@ValueofDB:tblGoalType_id</select>
	</condition>
	
	<!--判断是否已经启用-->
	<exec condition="'@SqlReturn:enumerationItemId'!='null'">	
	<error>tblGoalType.Used.Error</error>
	</exec>
	
	<exec condition="true">
	<sql>insert
tblDBEnumerationItem(id,enumValue,enumId,SCompanyID,classCode,RowON,workFlowNodeName,workFlowNode,printCount,languageId) values(@ValueofDB:tblGoalType_id,@SqlReturn:cNum,@SqlReturn:kid,'','','','','','0',@SqlReturn:lname)
	</sql>
	<sql>insert
tblLanguage(id,zh_TW,zh_HK,en,zh_CN) select id+'1',zh_TW,zh_HK,en,zh_CN from tblLanguage where id = @SqlReturn:name
	</sql>
    <sql>update tblGoalType set statusId=0 where id=@ValueofDB:tblGoalType_id</sql>
	</exec>
	<exec condition="true">
	<sucess>afterOperation.needRestart.success</sucess>
	</exec>
	</sql>
	</define>
	<!--目标类型停用操作-->
	<define name="StopValue_BaseInfo_tblGoalType">
	<sql type="condition">
	<condition>
	<select>select cNum from tblGoalType where id=@ValueofDB:tblGoalType_id</select>
	</condition>
	<exec condition="true">
	<sql>update tblGoalType set statusId=1 where id=@ValueofDB:tblGoalType_id</sql>
	<sql>delete from tblLanguage where id in (select languageId from tblDBEnumerationItem where  enumValue=@SqlReturn:cNum and enumId=(select id from tblDBEnumeration where enumName='goalType'))</sql>
	<sql>delete from tblDBEnumerationItem where enumValue=@SqlReturn:cNum and enumId=(select id from tblDBEnumeration where enumName='goalType')</sql>
	</exec>
	<exec condition="true">
	<sucess>afterOperation.needRestart.success</sucess>
	</exec>
	</sql>
	</define>
	
	<!-- CRM转ERP客户操作 -->
	<define name="crmToErp_add">
	</define>
	
	<!-- ERP转CRM客户操作 -->
	<define name="erpToCrm_add">
	<sql type="condition">
		<exec condition="true">
			<sql>INSERT INTO CRMShareClient(id,clientId,popedomUserIds,popedomDeptIds,popedomEmpGroupIds,popedomTitleIds) values(lower(substring(replace(newid(),'-',''),1,28)),''+@ValueofDB:clientId,@ValueofDB:employeeId+',','','','')</sql>
		</exec>
	</sql>
	</define>
	
	<!--名片识别转CRM客户操作-->
	<define name="cardscanToCrm">
	<sql type="condition">
		<exec condition="true">
			<sql type="define">cardscanToCrm_prepare</sql>
		</exec>
		<condition>
			<select>select count(0) as num from CRMClientInfo where ClientName in (select ComName from tblcardscan where id = @ValueofDB:id)</select>	
		</condition>
		<exec condition="@SqlReturn:num != 0">
			<confirm yesDefine="cardscanToCrm_direct" noDefine="">
				CRM客户资料里面已经存在该公司,&lt;br&gt;确定要将其转入到该客户下？
			</confirm>
		</exec>
		<exec condition="@SqlReturn:num == 0">
			<sql type="define">cardscanToCrm_direct</sql>
		</exec>
	</sql>
	</define>
	
	<!--名片识别转CRM客户前判断-->
	<define name="cardscanToCrm_prepare">
		<sql type="condition">
			<condition>
				<select>
					select id as keyId,createBy,ComContactor,ComContactorMobile,isnull(ComName,'') ComName,ComTel,ComEmail,ComAddress,QQ,isnull(Status,1) as 					Status from tblcardscan where id = @ValueofDB:id
				</select>
			</condition>
			<exec condition="'@SqlReturn:keyId' == 'null'">
				<error>名片记录不存在</error>
			</exec>
			<exec condition="'@SqlReturn:Status' != '1'">
				<error>名片状态不合法</error>
			</exec>
			<exec condition="'@SqlReturn:ComName' == ''">
				<error>请先完善名片公司名称</error>
			</exec>
		</sql>
	</define>
	
	<!--名片识别转CRM客户操作-->
	<define name="cardscanToCrm_direct">
		<sql type="condition">
			<exec condition="true">
				<sql type="define">cardscanToCrm_prepare</sql>
			</exec>
			<exec condition="true">
				<sql type="procedure">
					{call proc_cardscanToCrm(@ValueofDB:id,@Sess:UserId,@Sess:DepartmentCode,retCode,retVal)}
				</sql>
			</exec>
			<exec condition="true">
				<sucess>转入成功</sucess>
			</exec>				
		</sql>
	</define>
	
	<!-- 外勤签入后-->
	<define name="outAttendenceSignIn">
		<sql type="condition">
			<condition>
				<select>
					select (case when AddressLat is null then 'true' else 'false' end) as UpdateLocFlat from CRMClientInfo where id = @ValueofDB:ClientId
				</select>
			</condition>
			<exec condition="'@SqlReturn:UpdateLocFlat' == 'true'">
				<sql>update CRMClientInfo set AddressLat = @ValueofDB:SignInLat, AddressLng = @ValueofDB:SignInLng where id = @ValueofDB:ClientId</sql>
			</exec>
			<condition>
				<select>
					select DirectBoss from tblEmployee  where id = @ValueofDB:createBy
				</select>
			</condition>
			<exec condition="true">
				<sql type="class"> com.menyi.aio.web.mobile.OutAttendanceNotice.signNotice(@SqlReturn:DirectBoss, @ValueofDB:EmployeeID, @Sess:UserName 有外勤信息抄送给您, @ValueofDB:id)</sql>
			</exec>
		</sql>
	</define>
	
	<!-- 外勤签出后-->	
	<define name="outAttendenceSignOut">
		<sql type="condition">
			<condition>
				<select>
					select DirectBoss from tblEmployee  where id = @ValueofDB:createBy
				</select>
			</condition>
			<exec condition="true">
				<sql type="class"> com.menyi.aio.web.mobile.OutAttendanceNotice.signNotice(@SqlReturn:DirectBoss, @ValueofDB:EmployeeID, @Sess:UserName 抄送给您的外勤信息有更新, @ValueofDB:id)</sql>
			</exec>
		</sql>
	</define>
	
	<define name="CRMSalesChance_add"></define>
    <define name="CRMSalesChance_update"></define>
    <define name="CRMSalesChance_del"></define>
    <define name="CRMClientInfo_Add_One"></define>
    
    <define name="CRMClientInfo_Delete_One"></define>
    
      
    <!-- 发货操作 -->
    <define name="deliverGoods_add"></define>
    
    <!-- 新增线索添加操作 -->
    <define name="CRMPotentialClient_add">
    	
    </define>
    
    <!-- 线索转客户操作 -->
    <define name="PotentialToClient_add">
    	<!-- 
		<sql type="condition">
			<exec condition="true">
				<sql>update CRMClientInfo set fkfs='1' WHERE id=@ValueofDB:clientId</sql>
			</exec>
		</sql>
		 -->
    </define>
    
    <!-- 审核流回退记录标识 -->
    <define name="WorkFlow_recall">
		<sql type="condition">
			<exec condition="true">
				<sql>update CRMClientInfo set WorkFlowStatus='back' WHERE id=@ValueofDB:id</sql>
			</exec>
		</sql>
    </define>
    
    <!-- 审核流通过标识 -->
    <define name="WorkFlow_pass">
		<sql type="condition">
			<exec condition="true">
				<sql>update CRMClientInfo set WorkFlowStatus='finish' WHERE id=@ValueofDB:id</sql>
			</exec>
		</sql>
    </define>
    <!-- 录单点回退 -->
    <define name="WorkFlow_clear">
		<sql type="condition">
			<exec condition="true">
				<sql>update CRMClientInfo set WorkFlowStatus='' WHERE id=@ValueofDB:id</sql>
			</exec>
		</sql>
    </define>
    
</defineSqls>