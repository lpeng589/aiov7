<?xml version="1.0" encoding="gb2312"?>
<defineSqls>
&lt;--===========生成出纳账明细===========-->
<define name="tblPay_genCashier">
	<!--生成出纳明细-->
	<sql type="condition">
		<condition>
			<select>select isnull(Max(No),0)+1 as maxNo from tblCashierAccount where PeriodYear=DATEPART(YEAR,@ValueofDB:BillDate) and PeriodMonth = DATEPART(MONTH,@ValueofDB:BillDate)</select>							
		</condition>					
		<exec condition="true">
			<sql>
				declare @ret int,@row int ,@rows int,@detID varchar(50),@accCode varchar(50),@amt numeric(14,2),@refAcc varchar(50)
				set @ret = @SqlReturn:maxNo			
				declare @tab table(
					num int identity(1,1),
					detID varchar(50),
					accCode varchar(50),
					amt numeric(14,2)
				)				
				set @row = 1 
				--查找对应的客户科目
				if(@ValueofDB:PaytypeID = 'PrePay')
				begin
					select @refAcc = AccNumber from tblAccTypeInfo where SuplierCode =  @ValueofDB:CompanyCode and AccNumber like '1123%' 
				end else if(@ValueofDB:PaytypeID = 'Pay')
				begin
					select @refAcc = AccNumber from tblAccTypeInfo where SuplierCode = @ValueofDB:CompanyCode and AccNumber like '2202%' 
				end 
				insert into @tab(detID,accCode,amt) select id,Account,Amount from tblPayAccountDet where f_ref = @ValueofDB:id
				set @rows = @@ROWCOUNT
				while(@row&lt;=@rows)
				begin
					select @detID=detID,@accCode=accCode from @tab where num = @row
										
					insert into tblCashierAccount(id,BillDate,No,CredType,CredNo,PeriodYear,PeriodMonth,AccCode,RefAcc,DebitAmount,LendAmount,EmployeeID,RecordComment,Currency,BillID,BillType,createBy,createTime)
					select ('S' + CONVERT(nvarchar(13),REPLACE(CONVERT(decimal(18,8),GETDATE()),'.','')) + RIGHT(NEWID(),12)) as id,
					@ValueofDB:BillDate as BillDate,(@SqlReturn:maxNo+@row) as No,'记' as CredType,0 as CredNo,DATEPART(YEAR,@ValueofDB:BillDate) as pYear,DATEPART(Month,@ValueofDB:BillDate) as pMonth,
					@accCode as AccCode,@refAcc as RefAcc,0.0 as debit,(case @ValueofDB:PaytypeID when 'PrePay' then Amount when 'Pay' then Amount end) as lend,
					@ValueofDB:EmployeeID as EmployeeID,@ValueofDB:Abstract as RecordComment,'RMB' as Currency,@ValueofDB:id as billID,'tblPay' as BillType,@ValueofDB:createBy,@ValueofDB:createTime from tblPayAccountDet where id = @detID
					set @row = @row + 1
				end							
			</sql>
		</exec>
	</sql>
</define>
<!--===================================================采购付款单====================================================-->
<define name="tblPay_Add">
	<!--付款退款时不能选择本单-->
	<sql type="condition">
		<condition>
			<select>select RefbillID from tblPayDet where f_REf=@ValueofDB:tblPay_id and RefbillID=@ValueofDB:tblPay_id</select>
		</condition>
		<exec condition="'@SqlReturn:RefbillID'!='null'">
			<error>tblPayDet.NoSelectBill.error</error> 
		</exec>
	</sql>	
	<!--关联单据重复给出提示-->
	<sql type="condition">
		<condition>
			<select>select RefBillNo from tblpayDet where f_REf=@ValueofDB:tblPay_id group by RefBillNo,RefbillID  having COUNT(RefbillID)&gt;1</select>
		</condition>
		<exec condition="'@SqlReturn:RefBillNo'!='null'">
			<error>关联了重复的单据 @SqlReturn:RefBillNo</error> 
		</exec>
	</sql>
	<sql type="condition">
		<condition><select>select count(0) as detCount from tblPayDet where f_ref=@ValueofDB:tblPay_id</select></condition>
		
		<!--当付款类型为 “其他付款”， 但没有选择关联单据给出错误提示-->
		<exec condition="'@ValueofDB:tblPay_PaytypeID'=='OtherPay'&amp;&amp;@SqlReturn:detCount==0">
			<error>tblPay.NoSelectBill.error</error> 
		</exec>
		<!--当明细表录入数据时，判断付款类型，与付款单据是否匹配-->
		<exec condition="@SqlReturn:detCount&gt;0">
			<sql type="define">tblPay_Add_BillTypeAmt_validate</sql>
		</exec>
		<!--如果是多账户付款，判断选择了账户，没有录入金额的给出提示-->
		<exec condition="true">
			<sql type="define">tblPay_Add_ManyAccount_validate</sql>
		</exec>
	</sql>
	<!--外币控制暂不做处理-->
	<sql type="condition">
	    <condition>
			<select>select AccNumber,AccName,IsForCur,Currency as CURD from tblAccTypeInfo where AccNumber=@ValueofDB:tblPay_PayBankID and SCompanyID=@ValueofDB:tblPay_SCompanyID</select>
			<select>select id baseCurrency from tblCurrency where IsBaseCurrency=1</select>
			<!--多账户付款查询所选的付款帐户对应的科目代码、科目名、是否核算外币、核算的币种信息-->
			<select>select Account as AnyAccount from tblPayAccountDet left join tblAccTypeinfo on tblAccTypeinfo.Accnumber=tblPayAccountDet.Account where f_ref=@ValueofDB:tblPay_id and ( (len(@ValueofDB:tblPay_Currency) &gt; 0 and ((@ValueofDB:tblPay_Currency !=@SqlReturn:baseCurrency and tblAccTypeInfo.Currency!=@ValueofDB:tblPay_Currency ) or ( @ValueofDB:tblPay_Currency =@SqlReturn:baseCurrency and  tblAccTypeInfo.Currency!='' and tblAccTypeInfo.Currency!=@SqlReturn:baseCurrency  ) )) or (len(@ValueofDB:tblPay_Currency)=0 and len(tblAccTypeInfo.Currency)!=0))</select>
	    </condition>
		<!--币种为空，付款帐户不为空时，选择的付款多帐户存在核算外币时提示-->
		<exec condition="'@SqlReturn:AnyAccount' != 'null' ">
			<!--选择的帐号不是该外币对应的帐号-->
			<error>tblAccTypeInfo.SelectCurType.error</error> 
		</exec>
			<!--如果是本位币帐户，不用录入汇率-->	
		 <exec condition=" ('@ValueofDB:tblPay_Currency'.length == 0 &amp;&amp; @ValueofDB:tblPay_CurrencyRate &gt; 0 &amp;&amp; @ValueofDB:tblPay_CurrencyRate!=1)">		
			<error>CurrencyRate.putErrors.error</error> 
		 </exec>
	</sql>

	<!--=======不启用审核流时直接过账执行下列操作，启用审核流时，点击审核按钮执行下述操作=====-->
	<sql type="condition">
		<exec condition="'@MEM:tblPay_IsStatart' == '0' &amp;&amp; @MEM:OpenInvoice==false">
			<sql type="define">tblPay_Add_One</sql>
		</exec>
	</sql>
</define>	
<!--========判断选择了付款账户，是否输入付款金额==================-->
<define name="tblPay_Add_ManyAccount_validate">
	<!--没有选择付款账户，给出错误提示-->
	<sql type="condition">
		<condition><select>select count(0) as detCount from tblPayAccountDet where f_ref=@ValueofDB:tblPay_id</select></condition>
		<exec condition="@SqlReturn:detCount==0">
			<error>tblPay.payAccount.NoSelect.error</error> 
		</exec>
	</sql>
	<!--选择了付款账户，没有输入付款金额，给出提示-->
	<sql type="condition">
		<condition><select>select count(0) as detCount from tblPayAccountDet where f_ref=@ValueofDB:tblPay_id and Amount=0</select></condition>
		<exec condition="@SqlReturn:detCount&gt;0">
			<error>tblPay.NoInputAccAmt.error</error> 
		</exec>
	</sql>
	<!--付款账户不能有重复-->
	<sql type="condition">
		<condition><select>select 'sameAcc' as sameAcc from tblPayAccountDet where f_ref=@ValueofDB:tblPay_id group by Account having count(Account)&gt;1</select></condition>
		<exec condition="'@SqlReturn:sameAcc'=='sameAcc'">
			<error>tblPay.payAccount.same.error</error> 
		</exec>
	</sql>
</define>
<!--==============判断付款类型，与付款单据是否匹配=============-->
<define name="tblPay_Add_BillTypeAmt_validate">
	<sql type="condition">
		<condition><select>select count(0) as detCount from tblPayDet where f_ref=@ValueofDB:tblPay_id and
		(
		(@ValueofDB:tblPay_PaytypeID='PrePay' and PayBillType!='tblBuyOrder') or
		(@ValueofDB:tblPay_PaytypeID='RetrunPay' and PayBillType!='tblPay') or
		(@ValueofDB:tblPay_PaytypeID='ReturnReceive' and PayBillType!='tblBuyOutStock') or
		(@ValueofDB:tblPay_PaytypeID='OtherPay' and PayBillType!='tblExpensed'))</select>
		</condition>
		
		<!--选择“应付款”，关联单据可不选，如果选择后不是采购入库单给出提示-->
		<exec condition="'@ValueofDB:tblPay_PaytypeID'=='Pay'&amp;&amp;@SqlReturn:detCount&gt;0">
			<error>tblPay.Pay.selectBill.error</error> 
		</exec>
		<!--选择“预付款”，关联单据可不选，如果选择后不是采购订单给出提示-->
		<exec condition="'@ValueofDB:tblPay_PaytypeID'=='PrePay'&amp;&amp;@SqlReturn:detCount&gt;0">
			<error>tblPay.PrePay.selectBill.error</error> 
		</exec>
		<!--选择“付款退款”，如果不是选择付款单给出提示-->
		<exec condition="'@ValueofDB:tblPay_PaytypeID'=='RetrunPay'&amp;&amp;@SqlReturn:detCount&gt;0">
			<error>tblPay.RetrunPay.selectBill.error</error> 
		</exec>
		<!--选择“退货收款”，关联单据如果不是选择退货单给出提示-->
		<exec condition="'@ValueofDB:tblPay_PaytypeID'=='ReturnReceive'&amp;&amp;@SqlReturn:detCount&gt;0">
			<error>tblPay.ReturnReceive.selectBill.error</error> 
		</exec>
		<!--选择“其他付款”，关联单据如果不是选择其他付款单给出提示-->
		<exec condition="'@ValueofDB:tblPay_PaytypeID'=='OtherPay'&amp;&amp;@SqlReturn:detCount&gt;0">
			<error>tblPay.OtherPay.selectBillGM.error</error> 
		</exec>
	</sql>
	<sql type="condition"><!--判断所选择的单据的单据日期是否有大于付款日期的，给出提示-->
		<condition><select>select RefBillNo from tblPayDet where f_ref=@ValueofDB:tblPay_id and RefBillDate&gt;@ValueofDB:tblPay_BillDate</select></condition>
		<exec condition="'@SqlReturn:RefBillNo'!='null'">
			<error>Pay.Date.error,@SqlReturn:RefBillNo</error> 
		</exec>
	</sql>
	<sql type="condition"><!--主表的供应商与明细表中关联单据的供应商不同时给出提示-->
		<condition><select>select RefBillNo from tblPayDet where f_ref=@ValueofDB:tblPay_id and CompanyCode!=@ValueofDB:tblPay_CompanyCode</select></condition>
		<exec condition="'@SqlReturn:RefBillNo'!='null'">
			<error>tblPay.difCom.error,@SqlReturn:RefBillNo</error> 
		</exec>
	</sql>
	<sql type="condition"><!--启用品牌时，明细表中选择多个相同的关联单据时给出提示-->
		<condition>
			<select>select SourceID from tblPayDet where f_ref=@ValueofDB:tblPay_id group by SourceID having count(SourceID)&gt;1 and len(SourceID)&gt;0</select>
			<select>select RefbillNo from tblPayDet where f_ref=@ValueofDB:tblPay_id and len(SourceID)=0 group by RefbillNo having count(RefbillNo)&gt;1 </select>
			<select>select b.RefbillNo as RefbillNoS from tblPay a join tblPayDet b on a.id=b.f_ref where a.id=@ValueofDB:tblPay_id and a.PaytypeID in('Pay','PrePay','ReturnReceive')</select>
		</condition>
		<exec condition="'@SqlReturn:SourceID'!='null'&amp;&amp;'@MEM:productbankcontrol'=='true'">
			<error>Overlap.RefBillNo.SourceID.error</error> 
		</exec>
		<exec condition="'@SqlReturn:RefbillNo'!='null'&amp;&amp;'@MEM:productbankcontrol'=='true'">
			<error>Overlap.RefBillNo.error</error> 
		</exec>
		<exec condition="'@SqlReturn:RefbillNoS'!='null'&amp;&amp;'@MEM:productbankcontrol'=='true'">
			<error>Overlap.RefBillNo.Goods.error,@SqlReturn:RefbillNoS</error> 
		</exec>
	</sql>
	<sql type="condition"><!--明细表中选择多个相同的关联单据明细时给出提示-->
		<condition>
		    <select>select SourceID from tblPayDet where f_ref=@ValueofDB:tblPay_id group by SourceID having count(SourceID)&gt;1</select>
		</condition>
		<exec condition="'@SqlReturn:SourceID'!='null'&amp;&amp;'@MEM:productbankcontrol'=='true'">
			<error>Overlap.SourceID.error</error> 
		</exec>
	</sql>	
	<!--==============判断明细表输入的本次结算金额是否合理=============-->
	<sql type="condition"><!--明细表没有输入结算金额或者小于0时给出提示-->
		<condition>
			<select>select RefBillNo from tblPayDet where f_ref=@ValueofDB:tblPay_id and isnull(tblPayDet.ExeBalFcAmt,0)&gt;=0 and tblPayDet.PayBillType in ('tblBuyOutStock','PDExceedMaterial','PDWorkOrderfinish','PDBuyCutPay') and @ValueofDB:tblPay_PaytypeID='Pay' </select>
		</condition>
		<exec condition="'@SqlReturn:RefBillNo'!='null'">
			<error>@SqlReturn:RefBillNo 单据待结算金额不能大于0</error> 
		</exec>
	</sql>
	<sql type="condition"><!--明细表没有输入结算金额或者小于0时给出提示-->
		<condition>
			<select>select RefBillNo from tblPayDet where f_ref=@ValueofDB:tblPay_id and isnull(tblPayDet.ExeBalFcAmt,0)&lt;=0 and (tblPayDet.PayBillType not in ('tblBuyOutStock','PDExceedMaterial','PDWorkOrderfinish','PDBuyCutPay') or @ValueofDB:tblPay_PaytypeID&lt;&gt;'Pay') </select>
		</condition>
		<exec condition="'@SqlReturn:RefBillNo'!='null'">
			<error>tblPay.settleAmt.no.error,@SqlReturn:RefBillNo</error> 
		</exec>
	</sql>
	
	<sql type="condition"><!--本次结算大于待结算时给出提示-->
		<condition>
			<select>select RefBillNo,ExeBalAmt,WexeBalAmt from tblPayDet where f_ref=@ValueofDB:tblPay_id and isnull(ExeBalFcAmt,0)&lt;isnull(CurWexeBalAmt,0) and tblPayDet.PayBillType in ('tblBuyOutStock','PDExceedMaterial','PDWorkOrderfinish','PDBuyCutPay') and @ValueofDB:tblPay_PaytypeID='Pay' </select>
		</condition>
		<exec condition="'@SqlReturn:RefBillNo'!='null'">
			 <error>tblPayDet.PaymentMore.error,@SqlReturn:RefBillNo</error> 
		</exec>
	</sql>
	<sql type="condition"><!--本次结算大于待结算时给出提示-->
		<condition>
			<select>select RefBillNo,ExeBalAmt,WexeBalAmt from tblPayDet where f_ref=@ValueofDB:tblPay_id  and isnull(ExeBalFcAmt,0)&gt;isnull(CurWexeBalAmt,0) and (tblPayDet.PayBillType not in ('tblBuyOutStock','PDExceedMaterial','PDWorkOrderfinish','PDBuyCutPay') or @ValueofDB:tblPay_PaytypeID&lt;&gt;'Pay') </select>
		</condition>
		<exec condition="'@SqlReturn:RefBillNo'!='null'">
			 <error>tblPayDet.PaymentMore.error,@SqlReturn:RefBillNo</error> 
		</exec>
	</sql>

	
	<sql type="condition">
		<condition><select>select 'exist' as existsBill,dbo.throwZero(sum(ExeBalAmt)) as sumExeAmt,dbo.throwZero(sum(WexeBalAmt)) as sumWexeAmt,dbo.throwZero((case when @ValueofDB:tblPay_SettleAmt&gt;=sum(WexeBalAmt) then sum(WexeBalAmt)-sum(ExeBalAmt) else @ValueofDB:tblPay_SettleAmt-sum(ExeBalAmt) end)) as keepAmt from tblPayDet where f_ref=@ValueofDB:tblPay_id</select></condition>
		<!--当付款类型为其他付款，但本次结算金额与往来结算合计不相等时给出提示-->
		<exec condition="'@ValueofDB:tblPay_PaytypeID'=='OtherPay'&amp;&amp;@SqlReturn:sumExeAmt!=@ValueofDB:tblPay_SettleAmt">
			<error>tblPay.add.AccAmt.ExistError12</error> 
		</exec>
		<!--往来结算合计小于本次结算时给出提示-->
		<exec condition="@ValueofDB:tblPay_SettleAmt&lt;@SqlReturn:sumExeAmt">
			<error>PayBalance.PaymentLess.error,@SqlReturn:sumExeAmt</error> 
		</exec>
		<!--往来结算合计大于本次结算，本次结算金额小于待结算金额时给出提示-->
		<exec condition="@ValueofDB:tblPay_SettleAmt&gt;@SqlReturn:sumExeAmt&amp;&amp;@SqlReturn:sumExeAmt&lt;@SqlReturn:sumWexeAmt">
			<error>PayBalance.PaymentMid.error,@SqlReturn:keepAmt</error> 
		</exec>
	</sql>
</define>

<define name="tblPay_Add_One">
	<sql type="condition">
		<condition><select>select b.ComFullName as AccCom from tblPay a left join tblCompany b on a.CompanyCode=b.classCode where a.id=@ValueofDB:tblPay_id</select></condition>

		<!--================插入往来明细=======================-->
		<!--未启用预收预付记应收应付,为预付款时，插入往来明细，预付款借方金额=往来结算金额-->
		<exec condition="'@MEM:prerecvpaymarktoneedrecvpay'=='false' &amp;&amp; '@ValueofDB:tblPay_PaytypeID'== 'PrePay' &amp;&amp; @ValueofDB:tblPay_SettleAmt&gt;0">
			<sql type="procedure">{call proc_insertComIni(@ValueofDB:tblPay_id,@ValueofDB:tblPay_CompanyCode,3,@ValueofDB:tblPay_BillDate,PrePayTotalDebit=@ValueofDB:tblPay_SettleAmt@ParamNum:@SPFieldLink:PrePayTotalLend=0@SPFieldLink:RelationDocID=@ValueofDB:tblPay_id@SPFieldLink:PeriodYear=@ValueofDB:tblPay_PeriodYear@SPFieldLink:BillType=tblPay@SPFieldLink:PeriodMonth=@ValueofDB:tblPay_PeriodMonth@SPFieldLink:Period=@ValueofDB:tblPay_Period@SPFieldLink:createBy=@ValueofDB:tblPay_createBy@SPFieldLink:createTime=@ValueofDB:tblPay_createTime@SPFieldLink:lastUpdateBy=@ValueofDB:tblPay_lastUpdateBy@SPFieldLink:lastUpdateTime=@ValueofDB:tblPay_lastUpdateTime@SPFieldLink:SCompanyID=@ValueofDB:tblPay_SCompanyID@SPFieldLink:Currency=@ValueofDB:tblPay_Currency@SPFieldLink:CurrencyRate=@ValueofDB:tblPay_CurrencyRate@SPFieldLink:FcPrePayTotalDebit=@ValueofDB:tblPay_CurrencyAmt@ParamNum:@SPFieldLink:FcPrePayTotalCredit=0@SPFieldLink:BillNo=@ValueofDB:tblPay_BillNo@SPFieldLink:EmployeeID=@ValueofDB:tblPay_EmployeeID@SPFieldLink:DepartmentCode=@ValueofDB:tblPay_DepartmentCode@SPFieldLink:Remark=@ValueofDB:tblPay_Remark,retCode,retVal)}</sql>
		</exec>
		<!--已启用预收预付记应收应付,为预付款时，插入往来明细，预付款借方金额=往来结算金额-->
		<exec condition="'@MEM:prerecvpaymarktoneedrecvpay'=='true' &amp;&amp; '@ValueofDB:tblPay_PaytypeID'== 'PrePay'&amp;&amp;@ValueofDB:tblPay_SettleAmt&gt;0">
			<sql type="procedure">{call proc_insertComIni(@ValueofDB:tblPay_id,@ValueofDB:tblPay_CompanyCode,1,@ValueofDB:tblPay_BillDate,PayTotalDebit=@ValueofDB:tblPay_SettleAmt@ParamNum:@SPFieldLink:PayTotalLend=0@SPFieldLink:RelationDocID=@ValueofDB:tblPay_id@SPFieldLink:PeriodYear=@ValueofDB:tblPay_PeriodYear@SPFieldLink:BillType=tblPay@SPFieldLink:PeriodMonth=@ValueofDB:tblPay_PeriodMonth@SPFieldLink:Period=@ValueofDB:tblPay_Period@SPFieldLink:createBy=@ValueofDB:tblPay_createBy@SPFieldLink:createTime=@ValueofDB:tblPay_createTime@SPFieldLink:lastUpdateBy=@ValueofDB:tblPay_lastUpdateBy@SPFieldLink:lastUpdateTime=@ValueofDB:tblPay_lastUpdateTime@SPFieldLink:SCompanyID=@ValueofDB:tblPay_SCompanyID@SPFieldLink:Currency=@ValueofDB:tblPay_Currency@SPFieldLink:CurrencyRate=@ValueofDB:tblPay_CurrencyRate@SPFieldLink:FcPayTotalDebit=@ValueofDB:tblPay_CurrencyAmt@ParamNum:@SPFieldLink:FcPayTotalCredit=0@SPFieldLink:BillNo=@ValueofDB:tblPay_BillNo@SPFieldLink:EmployeeID=@ValueofDB:tblPay_EmployeeID@SPFieldLink:DepartmentCode=@ValueofDB:tblPay_DepartmentCode@SPFieldLink:Remark=@ValueofDB:tblPay_Remark,retCode,retVal)}</sql>
		</exec>		
		<!--为“应付款”，“其他付款”时，插入往来明细，应付款借方金额=往来结算金额-->
		<exec condition="('@ValueofDB:tblPay_PaytypeID'=='Pay'||'@ValueofDB:tblPay_PaytypeID'=='OtherPay')&amp;&amp;@ValueofDB:tblPay_SettleAmt&gt;0">
			<sql type="procedure">{call proc_insertComIni(@ValueofDB:tblPay_id,@ValueofDB:tblPay_CompanyCode,1,@ValueofDB:tblPay_BillDate,PayTotalDebit=@ValueofDB:tblPay_SettleAmt@ParamNum:@SPFieldLink:PayTotalLend=0@SPFieldLink:RelationDocID=@ValueofDB:tblPay_id@SPFieldLink:PeriodYear=@ValueofDB:tblPay_PeriodYear@SPFieldLink:BillType=tblPay@SPFieldLink:PeriodMonth=@ValueofDB:tblPay_PeriodMonth@SPFieldLink:Period=@ValueofDB:tblPay_Period@SPFieldLink:createBy=@ValueofDB:tblPay_createBy@SPFieldLink:createTime=@ValueofDB:tblPay_createTime@SPFieldLink:lastUpdateBy=@ValueofDB:tblPay_lastUpdateBy@SPFieldLink:lastUpdateTime=@ValueofDB:tblPay_lastUpdateTime@SPFieldLink:SCompanyID=@ValueofDB:tblPay_SCompanyID@SPFieldLink:Currency=@ValueofDB:tblPay_Currency@SPFieldLink:CurrencyRate=@ValueofDB:tblPay_CurrencyRate@SPFieldLink:FcPayTotalDebit=@ValueofDB:tblPay_CurrencyAmt@SPFieldLink:FcPayTotalCredit=0@SPFieldLink:BillNo=@ValueofDB:tblPay_BillNo@SPFieldLink:EmployeeID=@ValueofDB:tblPay_EmployeeID@SPFieldLink:DepartmentCode=@ValueofDB:tblPay_DepartmentCode@SPFieldLink:Remark=@ValueofDB:tblPay_Remark,retCode,retVal)}</sql>
		</exec>
		<!--为“付款退款”，“退货收款”时，插入往来明细，应付款借方金额=-往来结算金额-->
		<exec condition="('@ValueofDB:tblPay_PaytypeID'=='RetrunPay'||'@ValueofDB:tblPay_PaytypeID'=='ReturnReceive')&amp;&amp;@ValueofDB:tblPay_SettleAmt&gt;0">
			<sql type="procedure">{call proc_insertComIni(@ValueofDB:tblPay_id,@ValueofDB:tblPay_CompanyCode,1,@ValueofDB:tblPay_BillDate,PayTotalDebit=(-1)*@ValueofDB:tblPay_SettleAmt@ParamNum:@SPFieldLink:PayTotalLend=0@SPFieldLink:RelationDocID=@ValueofDB:tblPay_id@SPFieldLink:PeriodYear=@ValueofDB:tblPay_PeriodYear@SPFieldLink:BillType=tblPay@SPFieldLink:PeriodMonth=@ValueofDB:tblPay_PeriodMonth@SPFieldLink:Period=@ValueofDB:tblPay_Period@SPFieldLink:createBy=@ValueofDB:tblPay_createBy@SPFieldLink:createTime=@ValueofDB:tblPay_createTime@SPFieldLink:lastUpdateBy=@ValueofDB:tblPay_lastUpdateBy@SPFieldLink:lastUpdateTime=@ValueofDB:tblPay_lastUpdateTime@SPFieldLink:SCompanyID=@ValueofDB:tblPay_SCompanyID@SPFieldLink:Currency=@ValueofDB:tblPay_Currency@SPFieldLink:CurrencyRate=@ValueofDB:tblPay_CurrencyRate@SPFieldLink:FcPayTotalDebit=(-1)*@ValueofDB:tblPay_CurrencyAmt@ParamNum:@SPFieldLink:FcPayTotalCredit=0@SPFieldLink:BillNo=@ValueofDB:tblPay_BillNo@SPFieldLink:EmployeeID=@ValueofDB:tblPay_EmployeeID@SPFieldLink:DepartmentCode=@ValueofDB:tblPay_DepartmentCode@SPFieldLink:Remark=@ValueofDB:tblPay_Remark,retCode,retVal)}</sql>
		</exec>
		<!--===============回填相关单据的累积付款，待付款====================-->
		<!--不启用品牌管理时，回填订单，入库单，退货单的累积付款，收款金额-->
		<exec condition="'@MEM:productbankcontrol'!='true'">
			<sql type="procedure">{call proc_BuyPayAmortPD(@ValueofDB:id,add,retCode,retVal)}</sql>
		</exec>

		<!--如果启用“自动产生凭证”，则自动插入凭证-->
		<exec condition="'@MEM:autoGenerateAcc'=='true'">
		 	<sql type="certificate">tblPay_Acc</sql>
		</exec>
		
		<exec condition="true">
			<sql type="define">tblPay_genCashier</sql>
		</exec>
	</sql>
</define>

<!--================点击删除，修改时调用==========-->
<define name="tblPay_Del">
	<!--启用审核后能修改或者删除的说明此单没有审核，不必调用此define. 不启用审核流，执行所有控制及过账操作，启用审核，点击反审核时执行此操作-->
	<sql type="condition">
		<exec condition="'@MEM:tblPay_IsStatart' == '0' &amp;&amp; @MEM:OpenInvoice==false">
			<sql type="define">tblPay_Del_One</sql>
		</exec>
	</sql>
</define>

<define name="tblPay_Del_One">
	<!-- 判断是否已经生成出纳明细-->
	<sql type="condition">
		<condition>
			<select>select count(0) count from tblCashierAccount where BillType = 'tblPay' and BillID = @ValueofDB:id</select>
		</condition>
		<exec condition="@SqlReturn:count&gt;0">
			<error>已生成出纳账明细，不允许此操作！</error>
		</exec>
	</sql>	
	<!--===========控制类判断===============-->
	<sql type="condition"><!--自动生成的单据不允许修改-->
		<condition>
			<!--拿付款单主表数据-->
			<select>select AutoBillMarker from tblPay where id=@ValueofDB:tblPay_id</select>
			<!--拿付款单明细表数据，只用于自动生成过来的明细，只有一条记录-->
			<select>select RefbillNo from tblPayDet where f_ref=@ValueofDB:tblPay_id</select>
		</condition>		
		<exec condition="@SqlReturn:AutoBillMarker==1">
			<error>DeleteBill.DelFalse.Error,@SqlReturn:RefbillNo</error> 
		</exec>
	</sql>	
	<sql type="condition"><!--存在对应的付款退款时，给出提示-->
		<condition><select>select a.BillNo as ReturnPayNo from tblPay a,tblPayDet b where a.id=b.f_ref and b.RefbillID=@ValueofDB:tblPay_id and a.workFlowNodeName!='print'</select></condition>
		<exec condition="'@SqlReturn:ReturnPayNo'!='null'">
			<error>PayDel.receiveNo.error,@SqlReturn:ReturnPayNo</error> 
		</exec>
	</sql>
	<sql type="condition"><!--凭证启用了审核流,判断是否存在关联此单据的凭证已经审核完毕-->
		<condition><select>select CredTypeID,OrderNo from tblAccMain where @MEM:tblAccMain_IsStatart=1 and RefBillID=@ValueofDB:tblPay_id and  workFlowNodeName='finish'</select></condition>
		<exec condition="'@SqlReturn:OrderNo'!='null'">	
			<error>DelBill.RefAccMain.error,@SqlReturn:CredTypeID @SqlReturn:OrderNo</error> 
		</exec>
	</sql>
	
	
	<!--================逻辑操作============================-->
	<sql type="condition">
		<condition><select>select PaytypeID from tblPay where id=@ValueofDB:tblPay_id</select></condition>
		<!--不启用品牌时，回填订单，入库单，退货单的累积付款，收款金额-->
		<exec condition="'@MEM:productbankcontrol'!='true'">
			<sql type="procedure">{call proc_BuyPayAmortPD(@ValueofDB:tblPay_id,delete,retCode,retVal)}</sql>
		</exec>
		<!--根据是否启用预收预付记应收应付,决定删除往来明细的类型-->
		<exec condition="'@SqlReturn:PaytypeID'=='PrePay'">
			<sql type="procedure">{call proc_iterateExeProc(select id as IniId from tblCompanyIni where relationDocID='@ValueofDB:tblPay_id',proc_deleteComIni,@IniId@ParamLink:(case when '@MEM:prerecvpaymarktoneedrecvpay'='true' then 1 else 3 end),retCode,retVal)}</sql>
		</exec>
		<exec condition="'@SqlReturn:PaytypeID'!='PrePay'">
			<sql type="procedure">{call proc_iterateExeProc(select id as IniId from tblCompanyIni where relationDocID='@ValueofDB:tblPay_id',proc_deleteComIni,@IniId@ParamLink:1,retCode,retVal)}</sql>
		</exec>
		<exec condition=" '@MEM:autoGenerateAcc'=='true'"><!--启用“自动产生凭证”时，删除凭证审核流或者减少科目余额，删除凭证信息-->
			<sql type="procedure">{call proc_delAccAndRefOper(@MEM:tblAccMain_IsStatart,@Sess:BillOper,@ValueofDB:tblPay_id,retCode,retVal)}</sql>
		</exec>
	</sql>
</define> 
<!--===================================================以上代码：采购付款单====================================================-->


</defineSqls>